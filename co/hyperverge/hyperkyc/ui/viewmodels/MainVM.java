package co.hyperverge.hyperkyc.ui.viewmodels;

import android.app.Application;
import android.content.Context;
import android.content.res.Resources;
import android.os.Build;
import android.util.Log;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.ViewModelKt;
import co.hyperverge.hvqrmodule.objects.HVQRConfig;
import co.hyperverge.hyperkyc.BuildConfig;
import co.hyperverge.hyperkyc.HyperKyc;
import co.hyperverge.hyperkyc.core.RuleEvaluatorKt;
import co.hyperverge.hyperkyc.core.hv.AnalyticsLogger;
import co.hyperverge.hyperkyc.core.hv.HyperSnapBridgeKt;
import co.hyperverge.hyperkyc.core.hv.models.HSDefaultRemoteConfig;
import co.hyperverge.hyperkyc.core.hv.models.HSRemoteConfig;
import co.hyperverge.hyperkyc.core.hv.models.HSUIConfig;
import co.hyperverge.hyperkyc.data.models.FailureReason;
import co.hyperverge.hyperkyc.data.models.HyperKycConfig;
import co.hyperverge.hyperkyc.data.models.KycCountry;
import co.hyperverge.hyperkyc.data.models.KycDocument;
import co.hyperverge.hyperkyc.data.models.Properties;
import co.hyperverge.hyperkyc.data.models.StartTransaction;
import co.hyperverge.hyperkyc.data.models.VideoStatementConfig;
import co.hyperverge.hyperkyc.data.models.VideoStatementV2Config;
import co.hyperverge.hyperkyc.data.models.WorkflowAPIHeaders;
import co.hyperverge.hyperkyc.data.models.WorkflowAPIParams;
import co.hyperverge.hyperkyc.data.models.WorkflowCondition;
import co.hyperverge.hyperkyc.data.models.WorkflowConfig;
import co.hyperverge.hyperkyc.data.models.WorkflowModule;
import co.hyperverge.hyperkyc.data.models.result.HyperKycData;
import co.hyperverge.hyperkyc.data.models.result.HyperKycDataKt;
import co.hyperverge.hyperkyc.data.models.result.HyperKycResult;
import co.hyperverge.hyperkyc.data.models.result.HyperKycStatus;
import co.hyperverge.hyperkyc.data.models.state.TransactionState;
import co.hyperverge.hyperkyc.data.models.state.TransactionStateRequest;
import co.hyperverge.hyperkyc.data.models.state.TransactionStateResponse;
import co.hyperverge.hyperkyc.data.network.ApiAction;
import co.hyperverge.hyperkyc.data.network.NetworkRepo;
import co.hyperverge.hyperkyc.data.network.ResponsesKt;
import co.hyperverge.hyperkyc.data.network.RuntimeTypeAdapterFactory;
import co.hyperverge.hyperkyc.ui.WebViewFragment;
import co.hyperverge.hyperkyc.ui.models.FinishWithResultEvent;
import co.hyperverge.hyperkyc.ui.models.LoadingUIState;
import co.hyperverge.hyperkyc.ui.models.NetworkUIState;
import co.hyperverge.hyperkyc.ui.models.WorkflowUIState;
import co.hyperverge.hyperkyc.utils.HSStateHandler;
import co.hyperverge.hyperkyc.utils.extensions.ContextExtsKt;
import co.hyperverge.hyperkyc.utils.extensions.CoreExtsKt;
import co.hyperverge.hyperkyc.utils.extensions.JSONExtsKt;
import co.hyperverge.hyperkyc.utils.extensions.LogExtsKt;
import co.hyperverge.hyperlogger.HyperLogger;
import co.hyperverge.hypersnapsdk.HyperSnapSDK;
import co.hyperverge.hypersnapsdk.activities.HVRetakeActivity;
import co.hyperverge.hypersnapsdk.objects.HVDocConfig;
import co.hyperverge.hypersnapsdk.objects.HVFaceConfig;
import co.hyperverge.hypersnapsdk.utils.AppConstants;
import co.hyperverge.hypersnapsdk.utils.InternalToolUtils;
import com.facebook.internal.AnalyticsEvents;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.ToNumberPolicy;
import io.flutter.plugins.firebase.database.Constants;
import io.sentry.protocol.App;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import kotlin.ExceptionsKt;
import kotlin.Lazy;
import kotlin.LazyKt;
import kotlin.Metadata;
import kotlin.NotImplementedError;
import kotlin.Pair;
import kotlin.Result;
import kotlin.ResultKt;
import kotlin.TuplesKt;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.IndexedValue;
import kotlin.collections.MapsKt;
import kotlin.comparisons.ComparisonsKt;
import kotlin.coroutines.Continuation;
import kotlin.io.FilesKt;
import kotlin.io.TextStreamsKt;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlin.jvm.internal.Reflection;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.Charsets;
import kotlin.text.MatchResult;
import kotlin.text.Regex;
import kotlin.text.StringsKt;
import kotlinx.coroutines.BuildersKt__Builders_commonKt;
import kotlinx.coroutines.CoroutineScopeKt;
import kotlinx.coroutines.Dispatchers;
import kotlinx.coroutines.flow.Flow;
import kotlinx.coroutines.flow.FlowKt;
import kotlinx.coroutines.flow.MutableStateFlow;
import kotlinx.coroutines.flow.SharingStarted;
import kotlinx.coroutines.flow.StateFlow;
import kotlinx.coroutines.flow.StateFlowKt;
import okhttp3.Response;
import org.apache.commons.io.FilenameUtils;
import org.json.JSONObject;

/* compiled from: MainVM.kt */
@Metadata(d1 = {"\u0000ð\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\u0018\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u001a\n\u0002\u0018\u0002\n\u0002\u0010$\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010!\n\u0002\b\u0006\n\u0002\u0010\t\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010#\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u000b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u001c\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0011\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\b\u0000\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003¢\u0006\u0002\u0010\u0004J\u0012\u0010\u009f\u0001\u001a\u00020\u00162\u0007\u0010 \u0001\u001a\u00020\u0007H\u0002J\u001a\u0010¡\u0001\u001a\u0004\u0018\u00010`2\u0007\u0010¢\u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\b£\u0001J*\u0010¤\u0001\u001a\u0004\u0018\u00010.2\t\u0010¢\u0001\u001a\u0004\u0018\u00010\u00072\t\u0010¥\u0001\u001a\u0004\u0018\u00010.H\u0000¢\u0006\u0006\b¦\u0001\u0010§\u0001J\u0019\u0010¨\u0001\u001a\u00020C2\b\u0010©\u0001\u001a\u00030ª\u0001H\u0000¢\u0006\u0003\b«\u0001J\u0013\u0010¬\u0001\u001a\u00030\u009d\u00012\u0007\u0010 \u0001\u001a\u00020\u0007H\u0002J\u0012\u0010\u00ad\u0001\u001a\u00020\u00162\u0007\u0010 \u0001\u001a\u00020\u0007H\u0002J\u000f\u0010®\u0001\u001a\u00020\u0016H\u0000¢\u0006\u0003\b¯\u0001J\u001c\u0010°\u0001\u001a\u00020\u00162\u000b\b\u0002\u0010±\u0001\u001a\u0004\u0018\u00010\u0007H\u0000¢\u0006\u0003\b²\u0001J\u0014\u0010³\u0001\u001a\u0004\u0018\u00010\u00072\u0007\u0010´\u0001\u001a\u00020\u0007H\u0002J\u001f\u0010µ\u0001\u001a\u001a\u0012\u0015\u0012\u0013\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u001f0\u00060^j\u0003`·\u00010¶\u0001J\u001d\u0010¸\u0001\u001a\u0018\u0012\u0013\u0012\u0011\u0012\u0004\u0012\u00020$\u0018\u00010^j\u0005\u0018\u0001`¹\u00010¶\u0001J%\u0010º\u0001\u001a\u0018\u0012\u0013\u0012\u0011\u0012\u0004\u0012\u00020t\u0018\u00010^j\u0005\u0018\u0001`»\u00010¶\u00012\u0006\u0010<\u001a\u00020=J0\u0010¼\u0001\u001a+\u0012&\u0012$\u0012\u001c\u0012\u001a\u0012\u0004\u0012\u00020\u0007\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`0_0_0^j\u0002`a0¶\u0001J?\u0010½\u0001\u001a\u0014\u0012\u000f\u0012\r\u0012\u0004\u0012\u00020w0^j\u0003`¾\u00010¶\u00012\u0013\u0010¿\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`0_2\u0007\u0010À\u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\bÁ\u0001J\"\u0010Â\u0001\u001a\u0015\u0012\u0010\u0012\u000e\u0012\u0005\u0012\u00030\u0090\u00010^j\u0003`Ã\u00010¶\u00012\u0006\u0010<\u001a\u00020=J,\u0010Ä\u0001\u001a\u0015\u0012\u0010\u0012\u000e\u0012\u0005\u0012\u00030Å\u00010^j\u0003`Æ\u00010¶\u00012\u0007\u0010Ç\u0001\u001a\u00020\u00072\u0007\u0010È\u0001\u001a\u00020\u0007J\u0007\u0010É\u0001\u001a\u00020.J\u0007\u0010Ê\u0001\u001a\u00020.J\u0007\u0010Ë\u0001\u001a\u00020.J\u0012\u0010Ì\u0001\u001a\u00020.2\u0007\u0010 \u0001\u001a\u00020\u0007H\u0002J6\u0010Í\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0007\u0012\u0006\u0012\u0004\u0018\u00010`0\u00142\u0007\u0010Î\u0001\u001a\u00020\u00072\u000b\b\u0002\u0010Ï\u0001\u001a\u0004\u0018\u00010\u00072\u0007\u0010Ð\u0001\u001a\u00020\u0007H\u0002J/\u0010Ñ\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0007\u0012\u0006\u0012\u0004\u0018\u00010`0\u00142\u0007\u0010Ò\u0001\u001a\u00020\u00072\u0007\u0010Ð\u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\bÓ\u0001J\u0015\u0010Ô\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u00070_H\u0002J\u000f\u0010Õ\u0001\u001a\b\u0012\u0004\u0012\u00020\u001f0\u0006H\u0002J\t\u0010Ö\u0001\u001a\u00020\"H\u0002J\u000f\u0010×\u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\bØ\u0001J\u0015\u0010Ù\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u00070_H\u0002J$\u0010Ù\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u00070_2\u0007\u0010 \u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\bÚ\u0001J\t\u0010Û\u0001\u001a\u00020\u0007H\u0002J\u001b\u0010Ü\u0001\u001a\u00020\u00072\u0007\u0010Ý\u0001\u001a\u00020\u00072\u0007\u0010Þ\u0001\u001a\u00020\u0007H\u0002J\u0012\u0010ß\u0001\u001a\u00020\u00072\u0007\u0010È\u0001\u001a\u00020\u0007H\u0002J\u0012\u0010à\u0001\u001a\u00020\u00072\u0007\u0010È\u0001\u001a\u00020\u0007H\u0002J\u0012\u0010á\u0001\u001a\u00020r2\u0007\u0010 \u0001\u001a\u00020\u0007H\u0002J\u0018\u0010â\u0001\u001a\u000b\u0012\u0006\u0012\u0004\u0018\u00010,0ã\u0001H\u0000¢\u0006\u0003\bä\u0001J\u0012\u0010å\u0001\u001a\u00020\u00072\u0007\u0010Þ\u0001\u001a\u00020\u0007H\u0002J\u0017\u0010æ\u0001\u001a\u00020\u00072\u0006\u0010<\u001a\u00020=H\u0000¢\u0006\u0003\bç\u0001J\u000b\u0010è\u0001\u001a\u0004\u0018\u00010\u0007H\u0002J\u001b\u0010é\u0001\u001a\u00020\u00072\u0007\u0010ê\u0001\u001a\u00020\u00072\u0007\u0010ë\u0001\u001a\u00020\rH\u0002J\u000f\u0010ì\u0001\u001a\b\u0012\u0004\u0012\u00020\u00070kH\u0002J\u001b\u0010í\u0001\u001a\u0005\u0018\u00010î\u00012\u0007\u0010 \u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\bï\u0001J/\u0010ð\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`\u0018\u00010_2\u0007\u0010 \u0001\u001a\u00020\u00072\u0007\u0010ñ\u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\bò\u0001J\u001b\u0010ó\u0001\u001a\u0014\u0012\u0004\u0012\u00020\u00070ô\u0001j\t\u0012\u0004\u0012\u00020\u0007`õ\u0001H\u0002J9\u0010ö\u0001\u001a\u0004\u0018\u00010`2\t\u0010÷\u0001\u001a\u0004\u0018\u00010\u00072\t\u0010ø\u0001\u001a\u0004\u0018\u00010\u00072\u0007\u0010ù\u0001\u001a\u00020\u00072\u0007\u0010ú\u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\bû\u0001J\u001b\u0010ü\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u00070_H\u0000¢\u0006\u0003\bý\u0001J\t\u0010þ\u0001\u001a\u00020rH\u0002J\n\u0010ÿ\u0001\u001a\u00030\u0080\u0002H\u0002J\u001f\u0010\u0081\u0002\u001a\u001a\u0012\u0004\u0012\u00020\u0007\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`0_0_J\u0011\u0010\u0082\u0002\u001a\f\u0012\u0007\u0012\u0005\u0018\u00010\u009d\u00010ã\u0001J\t\u0010\u0083\u0002\u001a\u00020\u0016H\u0002J\t\u0010\u0084\u0002\u001a\u00020.H\u0002J\t\u0010\u0085\u0002\u001a\u00020.H\u0002J\u0007\u0010\u0086\u0002\u001a\u00020\u0016J\u001a\u0010\u0087\u0002\u001a\u0004\u0018\u00010`2\u0007\u0010¢\u0001\u001a\u00020\u0007H\u0000¢\u0006\u0003\b\u0088\u0002J\u0012\u0010\u0089\u0002\u001a\u00020.2\u0007\u0010´\u0001\u001a\u00020\u0007H\u0002J\u000f\u0010\u008a\u0002\u001a\u00020.H\u0000¢\u0006\u0003\b\u008b\u0002J\t\u0010\u008c\u0002\u001a\u00020.H\u0002J\u0013\u0010\u008d\u0002\u001a\u00020\u00162\b\u0010\u008e\u0002\u001a\u00030\u009d\u0001H\u0002J\u001b\u0010\u008f\u0002\u001a\u00020\u00162\u0007\u0010ê\u0001\u001a\u00020\u00072\u0007\u0010\u0090\u0002\u001a\u00020\rH\u0002J2\u0010\u0091\u0002\u001a\u0017\u0012\u0012\u0012\u0010\u0012\u0007\u0012\u0005\u0018\u00010\u0092\u00020^j\u0003`\u0093\u00020¶\u00012\b\u0010\u0094\u0002\u001a\u00030\u0095\u0002H\u0086@ø\u0001\u0000¢\u0006\u0003\u0010\u0096\u0002JC\u0010\u0097\u0002\u001a\u001c\u0012\u0017\u0012\u0015\u0012\f\u0012\n\u0012\u0005\u0012\u00030\u0092\u00020\u0098\u00020^j\u0003`\u0099\u00020¶\u00012\b\u0010\u009a\u0002\u001a\u00030\u009b\u00022\u0013\u0010\u009c\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u00070_ø\u0001\u0000J\u0018\u0010\u009d\u0002\u001a\u00020.2\u0007\u0010\u009e\u0002\u001a\u00020\u0007H\u0000¢\u0006\u0003\b\u009f\u0002J8\u0010 \u0002\u001a\u0004\u0018\u00010`2\u000b\b\u0002\u0010´\u0001\u001a\u0004\u0018\u00010\u00072\b\u0010¡\u0002\u001a\u00030¢\u00022\t\b\u0002\u0010£\u0002\u001a\u00020.2\t\b\u0002\u0010¤\u0002\u001a\u00020.H\u0002J\u000f\u0010¥\u0002\u001a\u00020\u0016H\u0000¢\u0006\u0003\b¦\u0002J\u0017\u0010§\u0002\u001a\u00020\u00162\f\b\u0002\u0010¨\u0002\u001a\u0005\u0018\u00010©\u0002H\u0002J\u0007\u0010ª\u0002\u001a\u00020\u0016J\t\u0010«\u0002\u001a\u00020\u0016H\u0002J\f\u0010¬\u0002\u001a\u0005\u0018\u00010ª\u0001H\u0002J3\u0010\u00ad\u0002\u001a\u00020\u00162\t\b\u0002\u0010®\u0002\u001a\u00020.2\f\b\u0002\u0010©\u0001\u001a\u0005\u0018\u00010ª\u00012\t\b\u0002\u0010¯\u0002\u001a\u00020.H\u0000¢\u0006\u0003\b°\u0002J\u0007\u0010±\u0002\u001a\u00020.J+\u0010²\u0002\u001a\u000f\u0012\u0004\u0012\u00020.\u0012\u0004\u0012\u00020\u00070³\u00022\t\b\u0002\u0010´\u0002\u001a\u00020=H\u0086@ø\u0001\u0000¢\u0006\u0003\u0010µ\u0002J#\u0010¶\u0002\u001a\u00020\u00072\u0007\u0010¢\u0001\u001a\u00020\u00072\t\b\u0002\u0010·\u0002\u001a\u00020.H\u0000¢\u0006\u0003\b¸\u0002JC\u0010¹\u0002\u001a\u00020\u00162\f\b\u0002\u0010º\u0002\u001a\u0005\u0018\u00010\u009d\u00012\f\b\u0002\u0010»\u0002\u001a\u0005\u0018\u00010¼\u00022\u000b\b\u0002\u0010½\u0002\u001a\u0004\u0018\u00010\u00072\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\b¿\u0002JA\u0010À\u0002\u001a\u00020\u00162\u000b\b\u0002\u0010 \u0001\u001a\u0004\u0018\u00010\u00072\u000b\b\u0002\u0010Á\u0002\u001a\u0004\u0018\u00010\u00072\u000b\b\u0002\u0010Â\u0002\u001a\u0004\u0018\u00010\u00072\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bÃ\u0002J'\u0010Ä\u0002\u001a\u00020\u00162\u000b\b\u0002\u0010Å\u0002\u001a\u0004\u0018\u00010\u001f2\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bÆ\u0002J\u0011\u0010Ç\u0002\u001a\u00020\u00162\b\u0010È\u0002\u001a\u00030É\u0002J6\u0010Ê\u0002\u001a\u00020\u00162\f\b\u0002\u0010Ë\u0002\u001a\u0005\u0018\u00010Ì\u00022\f\b\u0002\u0010Í\u0002\u001a\u0005\u0018\u00010Î\u00022\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bÏ\u0002J6\u0010Ð\u0002\u001a\u00020\u00162\f\b\u0002\u0010Ñ\u0002\u001a\u0005\u0018\u00010Ò\u00022\f\b\u0002\u0010Ó\u0002\u001a\u0005\u0018\u00010Ô\u00022\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bÕ\u0002J@\u0010Ö\u0002\u001a\u00020\u00162\u000b\b\u0002\u0010 \u0001\u001a\u0004\u0018\u00010\u00072\u0017\b\u0002\u0010×\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`\u0018\u00010_2\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bØ\u0002J[\u0010Ù\u0002\u001a\u00020\u00162\u0007\u0010 \u0001\u001a\u00020\u00072\t\b\u0002\u0010Ú\u0002\u001a\u00020\u00072\u0011\b\u0002\u0010Û\u0002\u001a\n\u0012\u0004\u0012\u00020\u0007\u0018\u00010\u00062\u0012\b\u0002\u0010Ü\u0002\u001a\u000b\u0012\u0005\u0012\u00030Ý\u0002\u0018\u00010\u00062\u0015\u0010Þ\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0007\u0012\u0006\u0012\u0004\u0018\u00010`0_H\u0002J\u001a\u0010ß\u0002\u001a\u00020\u00162\u0006\u0010 \u001a\u00020\u00072\u0007\u0010Ï\u0001\u001a\u00020\u0007H\u0002J5\u0010à\u0002\u001a\u00020\u00162\u000b\b\u0002\u0010 \u0001\u001a\u0004\u0018\u00010\u00072\f\b\u0002\u0010á\u0002\u001a\u0005\u0018\u00010â\u00022\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bã\u0002J6\u0010ä\u0002\u001a\u00020\u00162\f\b\u0002\u0010å\u0002\u001a\u0005\u0018\u00010\u009d\u00012\f\b\u0002\u0010æ\u0002\u001a\u0005\u0018\u00010ç\u00022\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bè\u0002J\t\u0010é\u0002\u001a\u00020\u0016H\u0002J6\u0010ê\u0002\u001a\u00020\u00162\f\b\u0002\u0010ë\u0002\u001a\u0005\u0018\u00010\u009d\u00012\f\b\u0002\u0010ì\u0002\u001a\u0005\u0018\u00010í\u00022\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bî\u0002J6\u0010ï\u0002\u001a\u00020\u00162\f\b\u0002\u0010ð\u0002\u001a\u0005\u0018\u00010\u009d\u00012\f\b\u0002\u0010ñ\u0002\u001a\u0005\u0018\u00010ò\u00022\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\bó\u0002J5\u0010ô\u0002\u001a\u00020\u00162\u000b\b\u0002\u0010 \u0001\u001a\u0004\u0018\u00010\u00072\f\b\u0002\u0010õ\u0002\u001a\u0005\u0018\u00010ö\u00022\t\b\u0002\u0010¾\u0002\u001a\u00020.H\u0000¢\u0006\u0003\b÷\u0002J6\u0010ø\u0002\u001a\u00020\u0016*\"\u0012\u0004\u0012\u00020\u0007\u0012\u0006\u0012\u0004\u0018\u00010`0gj\u0010\u0012\u0004\u0012\u00020\u0007\u0012\u0006\u0012\u0004\u0018\u00010``i2\u0007\u0010 \u0001\u001a\u00020\u0007H\u0002J\u000f\u0010¡\u0001\u001a\u0004\u0018\u00010`*\u00020\u0007H\u0002J\"\u0010¤\u0001\u001a\u0004\u0018\u00010.*\u0004\u0018\u00010\u00072\t\u0010¥\u0001\u001a\u0004\u0018\u00010.H\u0002¢\u0006\u0003\u0010§\u0001J\u001b\u0010ù\u0002\u001a\n\u0012\u0005\u0012\u00030û\u00020ú\u0002*\u00020\u0007H\u0000¢\u0006\u0003\bü\u0002J\u000f\u0010ý\u0002\u001a\u0004\u0018\u00010`*\u00020\u0007H\u0002J\u000f\u0010þ\u0002\u001a\u00020\u0007*\u0004\u0018\u00010`H\u0002J\u0019\u0010ÿ\u0002\u001a\u00020.*\u00030î\u00012\t\b\u0002\u0010¥\u0001\u001a\u00020.H\u0002J\u0018\u0010¶\u0002\u001a\u00020\u0007*\u00020\u00072\t\b\u0002\u0010·\u0002\u001a\u00020.H\u0002R\u001a\u0010\u0005\u001a\b\u0012\u0004\u0012\u00020\u00070\u00068BX\u0082\u0004¢\u0006\u0006\u001a\u0004\b\b\u0010\tR\u001a\u0010\n\u001a\b\u0012\u0004\u0012\u00020\u00070\u00068BX\u0082\u0004¢\u0006\u0006\u001a\u0004\b\u000b\u0010\tR#\u0010\f\u001a\n \u000e*\u0004\u0018\u00010\r0\r8BX\u0082\u0084\u0002¢\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R&\u0010\u0013\u001a\u0014\u0012\u0004\u0012\u00020\u0007\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00160\u00150\u0014X\u0080\u0004¢\u0006\b\n\u0000\u001a\u0004\b\u0017\u0010\u0018R\u0014\u0010\u0019\u001a\u00020\u001a8BX\u0082\u0004¢\u0006\u0006\u001a\u0004\b\u001b\u0010\u001cR\u001a\u0010\u001d\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u001f0\u00060\u001eX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010 \u001a\u00020\u0007X\u0082.¢\u0006\u0002\n\u0000R\u000e\u0010!\u001a\u00020\"X\u0082\u000e¢\u0006\u0002\n\u0000R\u001a\u0010#\u001a\u00020$X\u0080.¢\u0006\u000e\n\u0000\u001a\u0004\b%\u0010&\"\u0004\b'\u0010(R\u0010\u0010)\u001a\u0004\u0018\u00010*X\u0082\u000e¢\u0006\u0002\n\u0000R\u0016\u0010+\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010,0\u001eX\u0082\u000e¢\u0006\u0002\n\u0000R\u001a\u0010-\u001a\u00020.X\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b/\u00100\"\u0004\b1\u00102R\u001b\u00103\u001a\u0002048FX\u0086\u0084\u0002¢\u0006\f\n\u0004\b7\u0010\u0012\u001a\u0004\b5\u00106R\u0014\u00108\u001a\u000209X\u0080\u0004¢\u0006\b\n\u0000\u001a\u0004\b:\u0010;R\u001a\u0010<\u001a\u00020=X\u0080.¢\u0006\u000e\n\u0000\u001a\u0004\b>\u0010?\"\u0004\b@\u0010AR\u001a\u0010B\u001a\u00020CX\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\bD\u0010E\"\u0004\bF\u0010GR\u0014\u0010H\u001a\u00020.8@X\u0080\u0004¢\u0006\u0006\u001a\u0004\bI\u00100R\u001a\u0010J\u001a\u00020.X\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\bK\u00100\"\u0004\bL\u00102R\u001a\u0010M\u001a\u00020\u0007X\u0080.¢\u0006\u000e\n\u0000\u001a\u0004\bN\u0010O\"\u0004\bP\u0010QR\u0012\u0010R\u001a\u0004\u0018\u00010\"X\u0082\u000e¢\u0006\u0004\n\u0002\u0010SR\u001c\u0010T\u001a\u0004\u0018\u00010\u0007X\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\bU\u0010O\"\u0004\bV\u0010QR\u001c\u0010W\u001a\u0004\u0018\u00010\u0007X\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\bX\u0010O\"\u0004\bY\u0010QR\u001c\u0010Z\u001a\u0004\u0018\u00010\u0007X\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b[\u0010O\"\u0004\b\\\u0010QR6\u0010]\u001a*\u0012&\u0012$\u0012\u001c\u0012\u001a\u0012\u0004\u0012\u00020\u0007\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`0_0_0^j\u0002`a0\u001eX\u0082\u0004¢\u0006\u0002\n\u0000R\u0017\u0010b\u001a\b\u0012\u0004\u0012\u00020c0\u001e¢\u0006\b\n\u0000\u001a\u0004\bd\u0010eR*\u0010f\u001a\u001e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020h0gj\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020h`iX\u0082\u000e¢\u0006\u0002\n\u0000R \u0010j\u001a\b\u0012\u0004\u0012\u00020\u00070kX\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\bl\u0010\t\"\u0004\bm\u0010nR*\u0010o\u001a\u001e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u00070gj\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u0007`iX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010p\u001a\u00020\"X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010q\u001a\u00020rX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010s\u001a\u00020tX\u0082.¢\u0006\u0002\n\u0000R\u0010\u0010u\u001a\u0004\u0018\u00010\u0007X\u0082\u000e¢\u0006\u0002\n\u0000R.\u0010v\u001a\u0016\u0012\u0012\u0012\u0010\u0012\u0004\u0012\u00020w\u0018\u00010^j\u0004\u0018\u0001`x0\u001eX\u0080\u000e¢\u0006\u000e\n\u0000\u001a\u0004\by\u0010e\"\u0004\bz\u0010{R*\u0010}\u001a\u0004\u0018\u00010\u001f2\b\u0010|\u001a\u0004\u0018\u00010\u001f@FX\u0086\u000e¢\u0006\u0010\n\u0000\u001a\u0004\b~\u0010\u007f\"\u0006\b\u0080\u0001\u0010\u0081\u0001R\u001f\u0010\u0082\u0001\u001a\u00020\"X\u0080\u000e¢\u0006\u0012\n\u0000\u001a\u0006\b\u0083\u0001\u0010\u0084\u0001\"\u0006\b\u0085\u0001\u0010\u0086\u0001R'\u0010\u0087\u0001\u001a\u001a\u0012\u0004\u0012\u00020\u0007\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`0_0_X\u0082\u000e¢\u0006\u0002\n\u0000R/\u0010\u0088\u0001\u001a\"\u0012\u001e\u0012\u001c\u0012\u0004\u0012\u00020\u0007\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020`0_\u0018\u00010_0\u001eX\u0082\u000e¢\u0006\u0002\n\u0000R\u000f\u0010\u0089\u0001\u001a\u00020rX\u0082\u000e¢\u0006\u0002\n\u0000R\u001e\u0010\u008a\u0001\u001a\u00020\r8BX\u0082\u0084\u0002¢\u0006\u000e\n\u0005\b\u008c\u0001\u0010\u0012\u001a\u0005\b\u008b\u0001\u0010\u0010R\u0016\u0010\u008d\u0001\u001a\u00020\r8BX\u0082\u0004¢\u0006\u0007\u001a\u0005\b\u008e\u0001\u0010\u0010R\"\u0010\u008f\u0001\u001a\u0005\u0018\u00010\u0090\u0001X\u0086\u000e¢\u0006\u0012\n\u0000\u001a\u0006\b\u0091\u0001\u0010\u0092\u0001\"\u0006\b\u0093\u0001\u0010\u0094\u0001R\u001e\u0010\u0095\u0001\u001a\t\u0012\u0004\u0012\u00020\u00070\u0096\u0001X\u0080\u0004¢\u0006\n\n\u0000\u001a\u0006\b\u0097\u0001\u0010\u0098\u0001R#\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u00020\u00070kX\u0080\u000e¢\u0006\u0010\n\u0000\u001a\u0005\b\u009a\u0001\u0010\t\"\u0005\b\u009b\u0001\u0010nR\u0018\u0010\u009c\u0001\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010\u009d\u00010\u001eX\u0082\u0004¢\u0006\u0002\n\u0000R\u0016\u0010\u009e\u0001\u001a\t\u0012\u0005\u0012\u00030\u009d\u00010kX\u0082.¢\u0006\u0002\n\u0000\u0082\u0002\u0004\n\u0002\b\u0019¨\u0006\u0080\u0003"}, d2 = {"Lco/hyperverge/hyperkyc/ui/viewmodels/MainVM;", "Landroidx/lifecycle/AndroidViewModel;", App.TYPE, "Landroid/app/Application;", "(Landroid/app/Application;)V", "activeModuleIds", "", "", "getActiveModuleIds", "()Ljava/util/List;", "allModuleIds", "getAllModuleIds", "cacheDir", "Ljava/io/File;", "kotlin.jvm.PlatformType", "getCacheDir", "()Ljava/io/File;", "cacheDir$delegate", "Lkotlin/Lazy;", "childModuleDataCallbacks", "", "Lkotlin/Function0;", "", "getChildModuleDataCallbacks$hyperkyc_release", "()Ljava/util/Map;", "context", "Landroid/content/Context;", "getContext", "()Landroid/content/Context;", "countriesFlow", "Lkotlinx/coroutines/flow/MutableStateFlow;", "Lco/hyperverge/hyperkyc/data/models/KycCountry;", "currentFlowId", "currentFlowPos", "", "defaultRemoteConfig", "Lco/hyperverge/hyperkyc/core/hv/models/HSDefaultRemoteConfig;", "getDefaultRemoteConfig$hyperkyc_release", "()Lco/hyperverge/hyperkyc/core/hv/models/HSDefaultRemoteConfig;", "setDefaultRemoteConfig$hyperkyc_release", "(Lco/hyperverge/hyperkyc/core/hv/models/HSDefaultRemoteConfig;)V", "failureReason", "Lco/hyperverge/hyperkyc/data/models/FailureReason;", "finishWorkflowEventFlow", "Lco/hyperverge/hyperkyc/ui/models/FinishWithResultEvent;", "flowFinished", "", "getFlowFinished$hyperkyc_release", "()Z", "setFlowFinished$hyperkyc_release", "(Z)V", "gson", "Lcom/google/gson/Gson;", "getGson", "()Lcom/google/gson/Gson;", "gson$delegate", "hsStateHandler", "Lco/hyperverge/hyperkyc/utils/HSStateHandler;", "getHsStateHandler$hyperkyc_release", "()Lco/hyperverge/hyperkyc/utils/HSStateHandler;", HyperKycConfig.ARG_KEY, "Lco/hyperverge/hyperkyc/data/models/HyperKycConfig;", "getHyperKycConfig$hyperkyc_release", "()Lco/hyperverge/hyperkyc/data/models/HyperKycConfig;", "setHyperKycConfig$hyperkyc_release", "(Lco/hyperverge/hyperkyc/data/models/HyperKycConfig;)V", HyperKycData.ARG_KEY, "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData;", "getHyperKycData$hyperkyc_release", "()Lco/hyperverge/hyperkyc/data/models/result/HyperKycData;", "setHyperKycData$hyperkyc_release", "(Lco/hyperverge/hyperkyc/data/models/result/HyperKycData;)V", "isAtFirstModule", "isAtFirstModule$hyperkyc_release", "isPushingState", "isPushingState$hyperkyc_release", "setPushingState$hyperkyc_release", "journeyId", "getJourneyId$hyperkyc_release", "()Ljava/lang/String;", "setJourneyId$hyperkyc_release", "(Ljava/lang/String;)V", "lastParentModulePos", "Ljava/lang/Integer;", "latestCondition", "getLatestCondition$hyperkyc_release", "setLatestCondition$hyperkyc_release", "latestRule", "getLatestRule$hyperkyc_release", "setLatestRule$hyperkyc_release", "latestRuleRaw", "getLatestRuleRaw$hyperkyc_release", "setLatestRuleRaw$hyperkyc_release", "loadTextConfigUiStateflow", "Lco/hyperverge/hyperkyc/ui/models/NetworkUIState;", "", "", "Lco/hyperverge/hyperkyc/ui/custom/TextConfigUIState;", "loadingUIStateFlow", "Lco/hyperverge/hyperkyc/ui/models/LoadingUIState;", "getLoadingUIStateFlow", "()Lkotlinx/coroutines/flow/MutableStateFlow;", "moduleDataMap", "Ljava/util/HashMap;", "Lco/hyperverge/hyperkyc/data/models/state/TransactionState$ModuleData;", "Lkotlin/collections/HashMap;", "moduleExecutionOrder", "", "getModuleExecutionOrder$hyperkyc_release", "setModuleExecutionOrder$hyperkyc_release", "(Ljava/util/List;)V", WorkflowModule.PREFIX_OUTPUTS, "previousFlowPos", "previousTimeStamp", "", HyperKycConfig.ARG_REMOTE_CONFIG, "Lco/hyperverge/hyperkyc/core/hv/models/HSRemoteConfig;", "resumeFrom", "saveStateUIStateFlow", "Lco/hyperverge/hyperkyc/data/models/state/TransactionStateResponse;", "Lco/hyperverge/hyperkyc/ui/custom/SaveStateUIState;", "getSaveStateUIStateFlow$hyperkyc_release", "setSaveStateUIStateFlow$hyperkyc_release", "(Lkotlinx/coroutines/flow/MutableStateFlow;)V", "value", "selectedCountry", "getSelectedCountry", "()Lco/hyperverge/hyperkyc/data/models/KycCountry;", "setSelectedCountry", "(Lco/hyperverge/hyperkyc/data/models/KycCountry;)V", "sessionRecordingReAttemptsLeft", "getSessionRecordingReAttemptsLeft$hyperkyc_release", "()I", "setSessionRecordingReAttemptsLeft$hyperkyc_release", "(I)V", "textConfigData", "textConfigFlow", "totalTimeSpent", "transactionStateDir", "getTransactionStateDir", "transactionStateDir$delegate", "transactionStateFile", "getTransactionStateFile", "uiConfigData", "Lco/hyperverge/hyperkyc/core/hv/models/HSUIConfig;", "getUiConfigData", "()Lco/hyperverge/hyperkyc/core/hv/models/HSUIConfig;", "setUiConfigData", "(Lco/hyperverge/hyperkyc/core/hv/models/HSUIConfig;)V", "waitingForParentSet", "", "getWaitingForParentSet$hyperkyc_release", "()Ljava/util/Set;", "workflowExecutionOrder", "getWorkflowExecutionOrder$hyperkyc_release", "setWorkflowExecutionOrder$hyperkyc_release", "workflowUIStateFlow", "Lco/hyperverge/hyperkyc/ui/models/WorkflowUIState;", "workflowUIStateList", "addToModuleExecutionOrder", "moduleId", "anyInjectFromVariables", "string", "anyInjectFromVariables$hyperkyc_release", "asBoolean", "default", "asBoolean$hyperkyc_release", "(Ljava/lang/String;Ljava/lang/Boolean;)Ljava/lang/Boolean;", "createHyperKycData", "transactionState", "Lco/hyperverge/hyperkyc/data/models/state/TransactionState;", "createHyperKycData$hyperkyc_release", "createWorkflowUIState", "deleteModuleData", "deleteSavedTransactionStates", "deleteSavedTransactionStates$hyperkyc_release", "enqueueStatePush", "status", "enqueueStatePush$hyperkyc_release", "evaluateNextStep", "id", "fetchCountries", "Lkotlinx/coroutines/flow/Flow;", "Lco/hyperverge/hyperkyc/ui/custom/CountryListUIState;", "fetchDefaultRemoteConfig", "Lco/hyperverge/hyperkyc/ui/custom/DefaultRemoteConfigUIState;", "fetchRemoteConfig", "Lco/hyperverge/hyperkyc/ui/custom/RemoteConfigUIState;", "fetchTextConfigs", "fetchTransactionState", "Lco/hyperverge/hyperkyc/ui/custom/FetchStateUIState;", WorkflowModule.PREFIX_INPUTS, "workflowConfigHash", "fetchTransactionState$hyperkyc_release", "fetchUIColorConfigs", "Lco/hyperverge/hyperkyc/ui/custom/UIColorConfigUIState;", "fetchWorkflowConfig", "Lco/hyperverge/hyperkyc/data/models/WorkflowConfig;", "Lco/hyperverge/hyperkyc/ui/custom/WorkflowConfigUIState;", "appId", "workflowId", "flowBack", "flowBackToNearestStartSessionModule", "flowForward", "generateWorkflowUIState", "getAnalyticsForCondition", "currentConditionId", AnalyticsLogger.Keys.NEXTSTEP, Constants.EVENT_TYPE, "getAnalyticsForModule", "currentModuleId", "getAnalyticsForModule$hyperkyc_release", "getAuthHeaders", "getCountries", "getCurrentFlowPos", "getCurrentModuleId", "getCurrentModuleId$hyperkyc_release", "getDefaultHeaders", "getDefaultHeaders$hyperkyc_release", "getDummyDefaultRemoteConfigJson", "getDummyTextConfig", "source", "languageToBeUsed", "getDummyUIConfig", "getDummyWorkflowConfigJson", "getExpiryAt", "getFinishWorkflowEventFlow", "Lkotlinx/coroutines/flow/StateFlow;", "getFinishWorkflowEventFlow$hyperkyc_release", "getLanguageSource", "getLanguageToBeUsed", "getLanguageToBeUsed$hyperkyc_release", "getLastParentModuleId", "getLogUploadBaseUrl", "baseS3Url", "logFile", "getModuleExecOrder", "getModuleForId", "Lco/hyperverge/hyperkyc/data/models/WorkflowModule;", "getModuleForId$hyperkyc_release", "getModuleTextConfig", WebViewFragment.ARG_SUB_TYPE, "getModuleTextConfig$hyperkyc_release", "getRequestIds", "Ljava/util/ArrayList;", "Lkotlin/collections/ArrayList;", "getResponseValue", "responseJson", "responseHeaderJson", "responseVar", Constants.PATH, "getResponseValue$hyperkyc_release", "getResultsDetailMap", "getResultsDetailMap$hyperkyc_release", "getResumeWorkflowDurationInHours", "getStateMetadata", "Lco/hyperverge/hyperkyc/data/models/state/TransactionState$Metadata;", "getTextConfigData", "getUiStateFlow", "handleBackNavigation", "handleDocCaptureFlowBack", "hasValidSavedWorkflowState", "initJourneyIdIfNotSet", "injectFromVariables", "injectFromVariables$hyperkyc_release", "isChildModule", "isJourneyIdSet", "isJourneyIdSet$hyperkyc_release", "isLocalWorkflowResumeEnabled", "logModuleStartedEvent", "uiState", "makeAPICallToPushLogsToRemote", "file", "performReviewFinish", "Lokhttp3/Response;", "Lco/hyperverge/hyperkyc/ui/custom/FinishReviewUIState;", HyperKycResult.ARG_KEY, "Lco/hyperverge/hyperkyc/data/models/result/HyperKycResult;", "(Lco/hyperverge/hyperkyc/data/models/result/HyperKycResult;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "performStartTransactionApiCall", "Lkotlin/Result;", "Lco/hyperverge/hyperkyc/ui/custom/StartTransactionUIState;", "startTransaction", "Lco/hyperverge/hyperkyc/data/models/StartTransaction;", "headers", "processCheckRule", WorkflowModule.Properties.Section.Component.Validation.Type.RULE, "processCheckRule$hyperkyc_release", "processCondition", AnalyticsLogger.Keys.CONDITION, "Lco/hyperverge/hyperkyc/data/models/WorkflowCondition;", "injectFromVariablesForResult", "updateResumeFrom", "pushLogsToRemote", "pushLogsToRemote$hyperkyc_release", "pushTransactionState", "transactionStateMetadata", "Lco/hyperverge/hyperkyc/data/models/state/TransactionState$TransactionMetadata;", "refreshWorkflows", "resetToLastParentModule", "retrieveStateFromLocal", "saveStateLocally", "shouldSave", "saveAsync", "saveStateLocally$hyperkyc_release", "shouldShowBranding", "startWorkFlow", "Lkotlin/Pair;", HVRetakeActivity.CONFIG_TAG, "(Lco/hyperverge/hyperkyc/data/models/HyperKycConfig;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "stringInjectFromVariables", "addQuotesIfEmpty", "stringInjectFromVariables$hyperkyc_release", "updateApiCallData", "apiCallUIState", "apiData", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$APIData;", "state", "incrementAttempts", "updateApiCallData$hyperkyc_release", "updateBarcodeData", "barcodeData", "barcodeStatus", "updateBarcodeData$hyperkyc_release", "updateCountryResult", "kycCountry", "updateCountryResult$hyperkyc_release", "updateDocCaptureUiStates", "newDocument", "Lco/hyperverge/hyperkyc/data/models/KycDocument;", "updateDocData", "docUIState", "Lco/hyperverge/hyperkyc/ui/models/WorkflowUIState$DocCapture;", "docData", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$DocData;", "updateDocData$hyperkyc_release", "updateFaceData", "faceUIState", "Lco/hyperverge/hyperkyc/ui/models/WorkflowUIState$FaceCapture;", "faceCaptureData", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$FaceData;", "updateFaceData$hyperkyc_release", "updateFormData", "formInputs", "updateFormData$hyperkyc_release", "updateModuleDataMap", "action", "requestIds", "flags", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$ApiFlags;", "variables", "updateModulesAttempts", "updateNFCData", "nfcResult", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$NFCResult;", "updateNFCData$hyperkyc_release", "updateSessionData", "stopSessionUIState", "sessionData", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$SessionData;", "updateSessionData$hyperkyc_release", "updateUiState", "updateVideoStatementData", "videoStatementUIState", "videoStatementData", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$VideoStatementData;", "updateVideoStatementData$hyperkyc_release", "updateVideoStatementV2Data", "videoStatementV2UIState", "videoStatementV2Data", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$VideoStatementV2Data;", "updateVideoStatementV2Data$hyperkyc_release", "updateWebviewData", "webviewData", "Lco/hyperverge/hyperkyc/data/models/result/HyperKycData$WebviewData;", "updateWebviewData$hyperkyc_release", "addDynamicVariables", "getInjectionPaths", "Lkotlin/sequences/Sequence;", "Lkotlin/text/MatchResult;", "getInjectionPaths$hyperkyc_release", "injectFromResponse", "primitiveToString", "shouldShowBackButton", "hyperkyc_release"}, k = 1, mv = {1, 8, 0}, xi = 48)
/* loaded from: classes2.dex */
public final class MainVM extends AndroidViewModel {

    /* renamed from: cacheDir$delegate, reason: from kotlin metadata */
    private final Lazy cacheDir;
    private final Map<String, Function0<Unit>> childModuleDataCallbacks;
    private MutableStateFlow<List<KycCountry>> countriesFlow;
    private String currentFlowId;
    private int currentFlowPos;
    public HSDefaultRemoteConfig defaultRemoteConfig;
    private FailureReason failureReason;
    private MutableStateFlow<FinishWithResultEvent> finishWorkflowEventFlow;
    private boolean flowFinished;

    /* renamed from: gson$delegate, reason: from kotlin metadata */
    private final Lazy gson;
    private final HSStateHandler hsStateHandler;
    public HyperKycConfig hyperKycConfig;
    private HyperKycData hyperKycData;
    private boolean isPushingState;
    public String journeyId;
    private Integer lastParentModulePos;
    private String latestCondition;
    private String latestRule;
    private String latestRuleRaw;
    private final MutableStateFlow<NetworkUIState<Map<String, Map<String, Object>>>> loadTextConfigUiStateflow;
    private final MutableStateFlow<LoadingUIState> loadingUIStateFlow;
    private HashMap<String, TransactionState.ModuleData> moduleDataMap;
    private List<String> moduleExecutionOrder;
    private HashMap<String, String> outputs;
    private int previousFlowPos;
    private long previousTimeStamp;
    private HSRemoteConfig remoteConfig;
    private String resumeFrom;
    private MutableStateFlow<NetworkUIState<TransactionStateResponse>> saveStateUIStateFlow;
    private KycCountry selectedCountry;
    private int sessionRecordingReAttemptsLeft;
    private Map<String, ? extends Map<String, ? extends Object>> textConfigData;
    private MutableStateFlow<Map<String, Map<String, Object>>> textConfigFlow;
    private long totalTimeSpent;

    /* renamed from: transactionStateDir$delegate, reason: from kotlin metadata */
    private final Lazy transactionStateDir;
    private HSUIConfig uiConfigData;
    private final Set<String> waitingForParentSet;
    private List<String> workflowExecutionOrder;
    private final MutableStateFlow<WorkflowUIState> workflowUIStateFlow;
    private List<WorkflowUIState> workflowUIStateList;

    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
    public MainVM(Application app) {
        super(app);
        Intrinsics.checkNotNullParameter(app, "app");
        this.gson = LazyKt.lazy(new Function0<Gson>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$gson$2
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // kotlin.jvm.functions.Function0
            public final Gson invoke() {
                return new GsonBuilder().setPrettyPrinting().registerTypeAdapterFactory(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.registerSubtype$default(RuntimeTypeAdapterFactory.INSTANCE.of(WorkflowUIState.class, Reflection.getOrCreateKotlinClass(WorkflowUIState.class).getClass().getName()), WorkflowUIState.PickCountry.class, null, 2, null), WorkflowUIState.PickDocument.class, null, 2, null), WorkflowUIState.DocCapture.class, null, 2, null), WorkflowUIState.FaceCapture.class, null, 2, null), WorkflowUIState.ApiCall.class, null, 2, null), WorkflowUIState.Form.class, null, 2, null), WorkflowUIState.WebView.class, null, 2, null), WorkflowUIState.BarcodeCapture.class, null, 2, null), WorkflowUIState.NFCReader.class, null, 2, null), WorkflowUIState.End.class, null, 2, null), WorkflowUIState.StartSessionRecording.class, null, 2, null), WorkflowUIState.StopSessionRecording.class, null, 2, null), WorkflowUIState.VideoStatement.class, null, 2, null), WorkflowUIState.VideoStatementV2.class, null, 2, null)).setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();
            }
        });
        this.workflowUIStateFlow = StateFlowKt.MutableStateFlow(null);
        this.loadingUIStateFlow = StateFlowKt.MutableStateFlow(LoadingUIState.Idle.INSTANCE);
        this.loadTextConfigUiStateflow = StateFlowKt.MutableStateFlow(NetworkUIState.Loading.INSTANCE);
        this.countriesFlow = StateFlowKt.MutableStateFlow(CollectionsKt.emptyList());
        this.textConfigFlow = StateFlowKt.MutableStateFlow(null);
        this.textConfigData = MapsKt.emptyMap();
        this.currentFlowPos = -1;
        this.previousFlowPos = -1;
        this.outputs = new HashMap<>();
        this.previousTimeStamp = System.currentTimeMillis();
        this.sessionRecordingReAttemptsLeft = -1;
        this.childModuleDataCallbacks = new LinkedHashMap();
        this.waitingForParentSet = new LinkedHashSet();
        this.workflowExecutionOrder = new ArrayList();
        this.cacheDir = LazyKt.lazy(new Function0<File>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$cacheDir$2
            /* JADX INFO: Access modifiers changed from: package-private */
            {
                super(0);
            }

            /* JADX WARN: Can't rename method to resolve collision */
            @Override // kotlin.jvm.functions.Function0
            public final File invoke() {
                return MainVM.this.getApplication().getCacheDir();
            }
        });
        this.hyperKycData = new HyperKycData(null, null, null, null, null, null, null, null, null, null, null, 2047, null);
        this.moduleDataMap = new HashMap<>();
        this.moduleExecutionOrder = new ArrayList();
        this.saveStateUIStateFlow = StateFlowKt.MutableStateFlow(null);
        this.finishWorkflowEventFlow = StateFlowKt.MutableStateFlow(null);
        this.transactionStateDir = LazyKt.lazy(new Function0<File>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$transactionStateDir$2
            /* JADX INFO: Access modifiers changed from: package-private */
            {
                super(0);
            }

            /* JADX WARN: Can't rename method to resolve collision */
            @Override // kotlin.jvm.functions.Function0
            public final File invoke() {
                Context context;
                StringBuilder sb = new StringBuilder();
                context = MainVM.this.getContext();
                sb.append(context.getFilesDir().getAbsolutePath());
                sb.append("/hv/transactionState/");
                File file = new File(sb.toString());
                if (!file.exists()) {
                    file.mkdirs();
                }
                return file;
            }
        });
        File filesDir = getContext().getFilesDir();
        Intrinsics.checkNotNullExpressionValue(filesDir, "context.filesDir");
        this.hsStateHandler = new HSStateHandler(filesDir);
    }

    public final Gson getGson() {
        Object value = this.gson.getValue();
        Intrinsics.checkNotNullExpressionValue(value, "<get-gson>(...)");
        return (Gson) value;
    }

    public final StateFlow<WorkflowUIState> getUiStateFlow() {
        return this.workflowUIStateFlow;
    }

    public final MutableStateFlow<LoadingUIState> getLoadingUIStateFlow() {
        return this.loadingUIStateFlow;
    }

    private final List<KycCountry> getCountries() {
        return this.countriesFlow.getValue();
    }

    public final Map<String, Map<String, Object>> getTextConfigData() {
        return this.textConfigData;
    }

    private final int getCurrentFlowPos() {
        return this.currentFlowPos;
    }

    /* renamed from: getLatestCondition$hyperkyc_release, reason: from getter */
    public final String getLatestCondition() {
        return this.latestCondition;
    }

    public final void setLatestCondition$hyperkyc_release(String str) {
        this.latestCondition = str;
    }

    /* renamed from: getLatestRule$hyperkyc_release, reason: from getter */
    public final String getLatestRule() {
        return this.latestRule;
    }

    public final void setLatestRule$hyperkyc_release(String str) {
        this.latestRule = str;
    }

    /* renamed from: getLatestRuleRaw$hyperkyc_release, reason: from getter */
    public final String getLatestRuleRaw() {
        return this.latestRuleRaw;
    }

    public final void setLatestRuleRaw$hyperkyc_release(String str) {
        this.latestRuleRaw = str;
    }

    public final String getJourneyId$hyperkyc_release() {
        String str = this.journeyId;
        if (str != null) {
            return str;
        }
        Intrinsics.throwUninitializedPropertyAccessException("journeyId");
        return null;
    }

    public final void setJourneyId$hyperkyc_release(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.journeyId = str;
    }

    /* renamed from: getSessionRecordingReAttemptsLeft$hyperkyc_release, reason: from getter */
    public final int getSessionRecordingReAttemptsLeft() {
        return this.sessionRecordingReAttemptsLeft;
    }

    public final void setSessionRecordingReAttemptsLeft$hyperkyc_release(int i) {
        this.sessionRecordingReAttemptsLeft = i;
    }

    public final Map<String, Function0<Unit>> getChildModuleDataCallbacks$hyperkyc_release() {
        return this.childModuleDataCallbacks;
    }

    public final Set<String> getWaitingForParentSet$hyperkyc_release() {
        return this.waitingForParentSet;
    }

    /* renamed from: getFlowFinished$hyperkyc_release, reason: from getter */
    public final boolean getFlowFinished() {
        return this.flowFinished;
    }

    public final void setFlowFinished$hyperkyc_release(boolean z) {
        this.flowFinished = z;
    }

    public final boolean isJourneyIdSet$hyperkyc_release() {
        return this.journeyId != null;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(51:1|2|3|4|5|6|7|8|9|(2:11|(44:13|14|15|(37:17|18|(1:20)|21|(1:26)|27|28|29|(1:31)|32|33|(1:35)(1:273)|36|(1:38)|39|(1:41)(10:195|196|197|198|199|200|(1:202)|203|(4:205|206|207|(22:209|210|211|212|(3:249|(1:251)(1:254)|(1:253))(1:218)|219|(1:221)|222|(1:227)|228|229|230|(1:232)|233|234|(1:236)(1:245)|237|238|239|240|(1:242)|243)(1:258))|262)|42|(1:44)|45|46|(1:48)|49|(1:191)(1:53)|55|(1:57)(1:61)|(1:59)(1:60)|62|(1:64)|65|(1:69)|70|(1:72)|73|(6:155|156|157|(1:159)|160|(4:162|(10:164|(3:182|(1:184)(1:187)|(1:186))|170|(1:172)|173|(1:177)|178|(1:180)|181|(22:78|(1:152)(1:82)|84|(1:86)(1:90)|(1:88)(1:89)|91|(1:93)|94|(1:98)|99|(1:101)|102|(1:104)|105|106|107|108|(1:110)|111|(2:113|(15:115|(1:145)(1:119)|121|(1:123)(1:143)|(10:125|126|(1:128)|129|(1:133)|134|(1:136)(1:142)|137|(1:139)(1:141)|140)|144|126|(0)|129|(2:131|133)|134|(0)(0)|137|(0)(0)|140))|146|147)(2:153|154))|76|(0)(0)))|75|76|(0)(0))|277|(1:279)(1:282)|(1:281)|18|(0)|21|(2:23|26)|27|28|29|(0)|32|33|(0)(0)|36|(0)|39|(0)(0)|42|(0)|45|46|(0)|49|(1:51)|191|55|(0)(0)|(0)(0)|62|(0)|65|(2:67|69)|70|(0)|73|(0)|75|76|(0)(0)))|286|277|(0)(0)|(0)|18|(0)|21|(0)|27|28|29|(0)|32|33|(0)(0)|36|(0)|39|(0)(0)|42|(0)|45|46|(0)|49|(0)|191|55|(0)(0)|(0)(0)|62|(0)|65|(0)|70|(0)|73|(0)|75|76|(0)(0)) */
    /* JADX WARN: Code restructure failed: missing block: B:120:0x05ab, code lost:
    
        if (r0 != null) goto L262;
     */
    /* JADX WARN: Code restructure failed: missing block: B:275:0x00db, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:276:0x00dc, code lost:
    
        r4 = kotlin.Result.INSTANCE;
        r0 = kotlin.Result.m1202constructorimpl(kotlin.ResultKt.createFailure(r0));
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x02e7, code lost:
    
        if (r14 != null) goto L152;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x049f, code lost:
    
        if (r14 != null) goto L221;
     */
    /* JADX WARN: Removed duplicated region for block: B:128:0x05d2  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0619  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0628  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x062b  */
    /* JADX WARN: Removed duplicated region for block: B:142:0x061e  */
    /* JADX WARN: Removed duplicated region for block: B:153:0x064b  */
    /* JADX WARN: Removed duplicated region for block: B:155:0x0374 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:195:0x0127 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:202:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:205:0x0169  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x008a A[Catch: all -> 0x0288, TryCatch #3 {all -> 0x0288, blocks: (B:15:0x005c, B:18:0x0079, B:20:0x008a, B:21:0x0091, B:23:0x009b, B:26:0x00a2, B:27:0x00aa, B:33:0x00e6, B:36:0x00f1, B:39:0x010b, B:273:0x00ed, B:276:0x00dc, B:277:0x0069, B:279:0x006f, B:29:0x00c4, B:31:0x00ca, B:32:0x00ce), top: B:14:0x005c, inners: #12 }] */
    /* JADX WARN: Removed duplicated region for block: B:23:0x009b A[Catch: all -> 0x0288, TryCatch #3 {all -> 0x0288, blocks: (B:15:0x005c, B:18:0x0079, B:20:0x008a, B:21:0x0091, B:23:0x009b, B:26:0x00a2, B:27:0x00aa, B:33:0x00e6, B:36:0x00f1, B:39:0x010b, B:273:0x00ed, B:276:0x00dc, B:277:0x0069, B:279:0x006f, B:29:0x00c4, B:31:0x00ca, B:32:0x00ce), top: B:14:0x005c, inners: #12 }] */
    /* JADX WARN: Removed duplicated region for block: B:273:0x00ed A[Catch: all -> 0x0288, TryCatch #3 {all -> 0x0288, blocks: (B:15:0x005c, B:18:0x0079, B:20:0x008a, B:21:0x0091, B:23:0x009b, B:26:0x00a2, B:27:0x00aa, B:33:0x00e6, B:36:0x00f1, B:39:0x010b, B:273:0x00ed, B:276:0x00dc, B:277:0x0069, B:279:0x006f, B:29:0x00c4, B:31:0x00ca, B:32:0x00ce), top: B:14:0x005c, inners: #12 }] */
    /* JADX WARN: Removed duplicated region for block: B:279:0x006f A[Catch: all -> 0x0288, TryCatch #3 {all -> 0x0288, blocks: (B:15:0x005c, B:18:0x0079, B:20:0x008a, B:21:0x0091, B:23:0x009b, B:26:0x00a2, B:27:0x00aa, B:33:0x00e6, B:36:0x00f1, B:39:0x010b, B:273:0x00ed, B:276:0x00dc, B:277:0x0069, B:279:0x006f, B:29:0x00c4, B:31:0x00ca, B:32:0x00ce), top: B:14:0x005c, inners: #12 }] */
    /* JADX WARN: Removed duplicated region for block: B:281:0x0077  */
    /* JADX WARN: Removed duplicated region for block: B:282:0x0074  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x00ca A[Catch: all -> 0x00db, TryCatch #12 {all -> 0x00db, blocks: (B:29:0x00c4, B:31:0x00ca, B:32:0x00ce), top: B:28:0x00c4, outer: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0109  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x026d A[Catch: all -> 0x0282, TryCatch #0 {all -> 0x0282, blocks: (B:42:0x0269, B:44:0x026d, B:45:0x0271, B:240:0x023f, B:243:0x024a), top: B:239:0x023f }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x02ae  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x02d5  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x02f4  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x02fc  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x02ff  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x02f9  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0311  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0322  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0354  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0465  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final String getCurrentModuleId$hyperkyc_release() {
        CharSequence charSequence;
        String str;
        String str2;
        String str3;
        Object m1202constructorimpl;
        String str4;
        StackTraceElement stackTraceElement;
        String str5;
        String str6;
        String str7;
        Matcher matcher;
        String str8;
        Object m1202constructorimpl2;
        String str9;
        String str10;
        String canonicalName;
        String className;
        String str11;
        String str12;
        String str13;
        Object m1202constructorimpl3;
        String str14;
        String str15;
        String str16;
        Matcher matcher2;
        Object obj;
        Object obj2;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level;
        HyperLogger companion;
        StringBuilder sb;
        StackTraceElement stackTraceElement2;
        String str17;
        String str18;
        String canonicalName2;
        Matcher matcher3;
        Throwable m1205exceptionOrNullimpl;
        String sb2;
        Object m1202constructorimpl4;
        String canonicalName3;
        Object m1202constructorimpl5;
        String className5;
        List<WorkflowUIState> list;
        List<WorkflowUIState> list2;
        String str19 = "null cannot be cast to non-null type android.app.Application";
        try {
            Result.Companion companion2 = Result.INSTANCE;
            MainVM mainVM = this;
            level = HyperLogger.Level.DEBUG;
            str2 = "N/A";
            try {
                companion = HyperLogger.INSTANCE.getInstance();
                charSequence = "co.hyperverge";
                try {
                    sb = new StringBuilder();
                    StackTraceElement[] stackTrace = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
                    stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
                } catch (Throwable th) {
                    th = th;
                    str = "packageName";
                    str3 = "Throwable().stackTrace";
                    Result.Companion companion3 = Result.INSTANCE;
                    m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                    }
                    str4 = (String) m1202constructorimpl;
                    HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                    HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb3 = new StringBuilder();
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, str3);
                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement != null) {
                    }
                    str5 = str3;
                    str6 = "workflowUIStateList";
                    Class<?> cls = getClass();
                    if (cls == null) {
                    }
                    if (r1 != null) {
                    }
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                    if (matcher.find()) {
                    }
                    Unit unit = Unit.INSTANCE;
                    if (str7.length() > 23) {
                    }
                    sb3.append(str7);
                    sb3.append(" - ");
                    str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                    if (str8 == null) {
                    }
                    sb3.append(str8);
                    sb3.append(' ');
                    sb3.append("");
                    companion4.log(level2, sb3.toString());
                    if (!CoreExtsKt.isRelease()) {
                    }
                    str9 = str;
                    str10 = str5;
                    if (str4 == null) {
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                charSequence = "co.hyperverge";
            }
        } catch (Throwable th3) {
            th = th3;
            charSequence = "co.hyperverge";
            str = "packageName";
            str2 = "N/A";
        }
        if (stackTraceElement2 != null) {
            String className6 = stackTraceElement2.getClassName();
            if (className6 != null) {
                str17 = "null cannot be cast to non-null type android.app.Application";
                str = "packageName";
                str18 = "Throwable().stackTrace";
                try {
                    canonicalName2 = StringsKt.substringAfterLast$default(className6, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                } catch (Throwable th4) {
                    th = th4;
                    str3 = str18;
                    str19 = str17;
                    Result.Companion companion32 = Result.INSTANCE;
                    m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                    }
                    str4 = (String) m1202constructorimpl;
                    HyperLogger.Level level22 = HyperLogger.Level.DEBUG;
                    HyperLogger companion42 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb32 = new StringBuilder();
                    StackTraceElement[] stackTrace22 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace22, str3);
                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace22);
                    if (stackTraceElement != null) {
                    }
                    str5 = str3;
                    str6 = "workflowUIStateList";
                    Class<?> cls2 = getClass();
                    if (cls2 == null) {
                    }
                    if (r1 != null) {
                    }
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                    if (matcher.find()) {
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (str7.length() > 23) {
                    }
                    sb32.append(str7);
                    sb32.append(" - ");
                    str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                    if (str8 == null) {
                    }
                    sb32.append(str8);
                    sb32.append(' ');
                    sb32.append("");
                    companion42.log(level22, sb32.toString());
                    if (!CoreExtsKt.isRelease()) {
                    }
                    str9 = str;
                    str10 = str5;
                    if (str4 == null) {
                    }
                }
                if (canonicalName2 != null) {
                    matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit3 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb.append(canonicalName2);
                    sb.append(" - ");
                    StringBuilder sb4 = new StringBuilder();
                    sb4.append("getCurrentModuleId ");
                    sb4.append(hashCode());
                    sb4.append(": workflowUIStateList: ");
                    Result.Companion companion5 = Result.INSTANCE;
                    list2 = this.workflowUIStateList;
                    if (list2 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list2 = null;
                    }
                    Object m1202constructorimpl6 = Result.m1202constructorimpl(Integer.valueOf(list2.size()));
                    m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl6);
                    if (m1205exceptionOrNullimpl != null) {
                        m1202constructorimpl6 = m1205exceptionOrNullimpl.getMessage();
                    }
                    sb4.append(m1202constructorimpl6);
                    sb4.append(", currentFlowPos: ");
                    sb4.append(this.currentFlowPos);
                    sb4.append(' ');
                    sb2 = sb4.toString();
                    if (sb2 == null) {
                        sb2 = "null ";
                    }
                    sb.append(sb2);
                    sb.append(' ');
                    sb.append("");
                    companion.log(level, sb.toString());
                    if (CoreExtsKt.isRelease()) {
                        str3 = str18;
                        str19 = str17;
                    } else {
                        try {
                            Result.Companion companion6 = Result.INSTANCE;
                            Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            str19 = str17;
                            try {
                                Intrinsics.checkNotNull(invoke, str19);
                                m1202constructorimpl4 = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                            } catch (Throwable th5) {
                                th = th5;
                                try {
                                    Result.Companion companion7 = Result.INSTANCE;
                                    m1202constructorimpl4 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                    if (Result.m1208isFailureimpl(m1202constructorimpl4)) {
                                    }
                                    String str20 = (String) m1202constructorimpl4;
                                    if (CoreExtsKt.isDebug()) {
                                    }
                                    str3 = str18;
                                    list = this.workflowUIStateList;
                                    if (list == null) {
                                    }
                                    m1202constructorimpl = Result.m1202constructorimpl(list.get(this.currentFlowPos).getTag());
                                } catch (Throwable th6) {
                                    th = th6;
                                    str3 = str18;
                                    Result.Companion companion322 = Result.INSTANCE;
                                    m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                    if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                                    }
                                    str4 = (String) m1202constructorimpl;
                                    HyperLogger.Level level222 = HyperLogger.Level.DEBUG;
                                    HyperLogger companion422 = HyperLogger.INSTANCE.getInstance();
                                    StringBuilder sb322 = new StringBuilder();
                                    StackTraceElement[] stackTrace222 = new Throwable().getStackTrace();
                                    Intrinsics.checkNotNullExpressionValue(stackTrace222, str3);
                                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace222);
                                    if (stackTraceElement != null) {
                                    }
                                    str5 = str3;
                                    str6 = "workflowUIStateList";
                                    Class<?> cls22 = getClass();
                                    if (cls22 == null) {
                                    }
                                    if (r1 != null) {
                                    }
                                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                    if (matcher.find()) {
                                    }
                                    Unit unit22 = Unit.INSTANCE;
                                    if (str7.length() > 23) {
                                    }
                                    sb322.append(str7);
                                    sb322.append(" - ");
                                    str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                                    if (str8 == null) {
                                    }
                                    sb322.append(str8);
                                    sb322.append(' ');
                                    sb322.append("");
                                    companion422.log(level222, sb322.toString());
                                    if (!CoreExtsKt.isRelease()) {
                                    }
                                    str9 = str;
                                    str10 = str5;
                                    if (str4 == null) {
                                    }
                                }
                                if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                                }
                                str4 = (String) m1202constructorimpl;
                                HyperLogger.Level level2222 = HyperLogger.Level.DEBUG;
                                HyperLogger companion4222 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb3222 = new StringBuilder();
                                StackTraceElement[] stackTrace2222 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace2222, str3);
                                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2222);
                                if (stackTraceElement != null) {
                                }
                                str5 = str3;
                                str6 = "workflowUIStateList";
                                Class<?> cls222 = getClass();
                                if (cls222 == null) {
                                }
                                if (r1 != null) {
                                }
                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                if (matcher.find()) {
                                }
                                Unit unit222 = Unit.INSTANCE;
                                if (str7.length() > 23) {
                                }
                                sb3222.append(str7);
                                sb3222.append(" - ");
                                str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                                if (str8 == null) {
                                }
                                sb3222.append(str8);
                                sb3222.append(' ');
                                sb3222.append("");
                                companion4222.log(level2222, sb3222.toString());
                                if (!CoreExtsKt.isRelease()) {
                                }
                                str9 = str;
                                str10 = str5;
                                if (str4 == null) {
                                }
                            }
                        } catch (Throwable th7) {
                            th = th7;
                            str19 = str17;
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl4)) {
                            m1202constructorimpl4 = "";
                        }
                        String str202 = (String) m1202constructorimpl4;
                        if (CoreExtsKt.isDebug()) {
                            String str21 = str;
                            try {
                                Intrinsics.checkNotNullExpressionValue(str202, str21);
                                if (StringsKt.contains$default((CharSequence) str202, charSequence, false, 2, (Object) null)) {
                                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                                    str3 = str18;
                                    try {
                                        Intrinsics.checkNotNullExpressionValue(stackTrace3, str3);
                                        StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                                        if (stackTraceElement3 == null || (className5 = stackTraceElement3.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className5, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                            Class<?> cls3 = getClass();
                                            canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                                            if (canonicalName3 == null) {
                                                canonicalName3 = str2;
                                            }
                                        }
                                        Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                                        if (matcher4.find()) {
                                            canonicalName3 = matcher4.replaceAll("");
                                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                                        }
                                        Unit unit4 = Unit.INSTANCE;
                                        if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                            canonicalName3 = canonicalName3.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        String str22 = canonicalName3;
                                        StringBuilder sb5 = new StringBuilder();
                                        StringBuilder sb6 = new StringBuilder();
                                        sb6.append("getCurrentModuleId ");
                                        sb6.append(hashCode());
                                        sb6.append(": workflowUIStateList: ");
                                        try {
                                            Result.Companion companion8 = Result.INSTANCE;
                                            List<WorkflowUIState> list3 = this.workflowUIStateList;
                                            if (list3 == null) {
                                                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                                                list3 = null;
                                            }
                                            m1202constructorimpl5 = Result.m1202constructorimpl(Integer.valueOf(list3.size()));
                                        } catch (Throwable th8) {
                                            Result.Companion companion9 = Result.INSTANCE;
                                            m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th8));
                                        }
                                        Throwable m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                        if (m1205exceptionOrNullimpl2 != null) {
                                            m1202constructorimpl5 = m1205exceptionOrNullimpl2.getMessage();
                                        }
                                        sb6.append(m1202constructorimpl5);
                                        sb6.append(", currentFlowPos: ");
                                        sb6.append(this.currentFlowPos);
                                        str = str21;
                                        try {
                                            sb6.append(' ');
                                            String sb7 = sb6.toString();
                                            if (sb7 == null) {
                                                sb7 = "null ";
                                            }
                                            sb5.append(sb7);
                                            sb5.append(' ');
                                            sb5.append("");
                                            Log.println(2, str22, sb5.toString());
                                        } catch (Throwable th9) {
                                            th = th9;
                                            Result.Companion companion3222 = Result.INSTANCE;
                                            m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                                            }
                                            str4 = (String) m1202constructorimpl;
                                            HyperLogger.Level level22222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion42222 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb32222 = new StringBuilder();
                                            StackTraceElement[] stackTrace22222 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace22222, str3);
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace22222);
                                            if (stackTraceElement != null) {
                                            }
                                            str5 = str3;
                                            str6 = "workflowUIStateList";
                                            Class<?> cls2222 = getClass();
                                            if (cls2222 == null) {
                                            }
                                            if (r1 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                            if (matcher.find()) {
                                            }
                                            Unit unit2222 = Unit.INSTANCE;
                                            if (str7.length() > 23) {
                                            }
                                            sb32222.append(str7);
                                            sb32222.append(" - ");
                                            str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                                            if (str8 == null) {
                                            }
                                            sb32222.append(str8);
                                            sb32222.append(' ');
                                            sb32222.append("");
                                            companion42222.log(level22222, sb32222.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            str9 = str;
                                            str10 = str5;
                                            if (str4 == null) {
                                            }
                                        }
                                    } catch (Throwable th10) {
                                        th = th10;
                                        str = str21;
                                        Result.Companion companion32222 = Result.INSTANCE;
                                        m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                        if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                                        }
                                        str4 = (String) m1202constructorimpl;
                                        HyperLogger.Level level222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion422222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb322222 = new StringBuilder();
                                        StackTraceElement[] stackTrace222222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace222222, str3);
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace222222);
                                        if (stackTraceElement != null) {
                                        }
                                        str5 = str3;
                                        str6 = "workflowUIStateList";
                                        Class<?> cls22222 = getClass();
                                        if (cls22222 == null) {
                                        }
                                        if (r1 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                        if (matcher.find()) {
                                        }
                                        Unit unit22222 = Unit.INSTANCE;
                                        if (str7.length() > 23) {
                                        }
                                        sb322222.append(str7);
                                        sb322222.append(" - ");
                                        str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                                        if (str8 == null) {
                                        }
                                        sb322222.append(str8);
                                        sb322222.append(' ');
                                        sb322222.append("");
                                        companion422222.log(level222222, sb322222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        str9 = str;
                                        str10 = str5;
                                        if (str4 == null) {
                                        }
                                    }
                                } else {
                                    str = str21;
                                }
                            } catch (Throwable th11) {
                                th = th11;
                                str = str21;
                                str3 = str18;
                                Result.Companion companion322222 = Result.INSTANCE;
                                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                                }
                                str4 = (String) m1202constructorimpl;
                                HyperLogger.Level level2222222 = HyperLogger.Level.DEBUG;
                                HyperLogger companion4222222 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb3222222 = new StringBuilder();
                                StackTraceElement[] stackTrace2222222 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace2222222, str3);
                                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2222222);
                                if (stackTraceElement != null) {
                                }
                                str5 = str3;
                                str6 = "workflowUIStateList";
                                Class<?> cls222222 = getClass();
                                if (cls222222 == null) {
                                }
                                if (r1 != null) {
                                }
                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                if (matcher.find()) {
                                }
                                Unit unit222222 = Unit.INSTANCE;
                                if (str7.length() > 23) {
                                }
                                sb3222222.append(str7);
                                sb3222222.append(" - ");
                                str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                                if (str8 == null) {
                                }
                                sb3222222.append(str8);
                                sb3222222.append(' ');
                                sb3222222.append("");
                                companion4222222.log(level2222222, sb3222222.toString());
                                if (!CoreExtsKt.isRelease()) {
                                }
                                str9 = str;
                                str10 = str5;
                                if (str4 == null) {
                                }
                            }
                        }
                        str3 = str18;
                    }
                    list = this.workflowUIStateList;
                    if (list == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list = null;
                    }
                    m1202constructorimpl = Result.m1202constructorimpl(list.get(this.currentFlowPos).getTag());
                    if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                        m1202constructorimpl = null;
                    }
                    str4 = (String) m1202constructorimpl;
                    HyperLogger.Level level22222222 = HyperLogger.Level.DEBUG;
                    HyperLogger companion42222222 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb32222222 = new StringBuilder();
                    StackTraceElement[] stackTrace22222222 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace22222222, str3);
                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace22222222);
                    if (stackTraceElement != null || (className4 = stackTraceElement.getClassName()) == null) {
                        str5 = str3;
                        str6 = "workflowUIStateList";
                    } else {
                        str5 = str3;
                        str6 = "workflowUIStateList";
                        str7 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2222222 = getClass();
                    String canonicalName4 = cls2222222 == null ? cls2222222.getCanonicalName() : null;
                    str7 = canonicalName4 != null ? str2 : canonicalName4;
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                    if (matcher.find()) {
                        str7 = matcher.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str7, "replaceAll(\"\")");
                    }
                    Unit unit2222222 = Unit.INSTANCE;
                    if (str7.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str7 = str7.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb32222222.append(str7);
                    sb32222222.append(" - ");
                    str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                    if (str8 == null) {
                        str8 = "null ";
                    }
                    sb32222222.append(str8);
                    sb32222222.append(' ');
                    sb32222222.append("");
                    companion42222222.log(level22222222, sb32222222.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion10 = Result.INSTANCE;
                            Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke2, str19);
                            m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                        } catch (Throwable th12) {
                            Result.Companion companion11 = Result.INSTANCE;
                            m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th12));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                            m1202constructorimpl2 = "";
                        }
                        String str23 = (String) m1202constructorimpl2;
                        if (CoreExtsKt.isDebug()) {
                            str9 = str;
                            Intrinsics.checkNotNullExpressionValue(str23, str9);
                            if (StringsKt.contains$default((CharSequence) str23, charSequence, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                str10 = str5;
                                Intrinsics.checkNotNullExpressionValue(stackTrace4, str10);
                                StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                if (stackTraceElement4 == null || (className = stackTraceElement4.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls4 = getClass();
                                    canonicalName = cls4 != null ? cls4.getCanonicalName() : null;
                                    if (canonicalName == null) {
                                        canonicalName = str2;
                                    }
                                }
                                Matcher matcher5 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
                                if (matcher5.find()) {
                                    canonicalName = matcher5.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
                                }
                                Unit unit5 = Unit.INSTANCE;
                                if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    canonicalName = canonicalName.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb8 = new StringBuilder();
                                String str24 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                                if (str24 == null) {
                                    str24 = "null ";
                                }
                                sb8.append(str24);
                                sb8.append(' ');
                                sb8.append("");
                                Log.println(2, canonicalName, sb8.toString());
                                if (str4 == null) {
                                    return str4;
                                }
                                HyperLogger.Level level3 = HyperLogger.Level.ERROR;
                                HyperLogger companion12 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb9 = new StringBuilder();
                                StackTraceElement[] stackTrace5 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace5, str10);
                                StackTraceElement stackTraceElement5 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5);
                                if (stackTraceElement5 == null || (className3 = stackTraceElement5.getClassName()) == null) {
                                    str11 = str9;
                                    str12 = str10;
                                } else {
                                    str11 = str9;
                                    str12 = str10;
                                    str13 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                }
                                Class<?> cls5 = getClass();
                                String canonicalName5 = cls5 != null ? cls5.getCanonicalName() : null;
                                str13 = canonicalName5 == null ? str2 : canonicalName5;
                                Matcher matcher6 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str13);
                                if (matcher6.find()) {
                                    str13 = matcher6.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(str13, "replaceAll(\"\")");
                                }
                                Unit unit6 = Unit.INSTANCE;
                                if (str13.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    str13 = str13.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str13, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                sb9.append(str13);
                                sb9.append(" - ");
                                StringBuilder sb10 = new StringBuilder();
                                sb10.append("getCurrentModuleId ");
                                sb10.append(hashCode());
                                sb10.append(" called for currentFlowPos: ");
                                sb10.append(this.currentFlowPos);
                                sb10.append(" when workflowUIStateList: ");
                                List<WorkflowUIState> list4 = this.workflowUIStateList;
                                if (list4 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException(str6);
                                    list4 = null;
                                }
                                sb10.append(list4);
                                String sb11 = sb10.toString();
                                if (sb11 == null) {
                                    sb11 = "null ";
                                }
                                sb9.append(sb11);
                                sb9.append(' ');
                                sb9.append("");
                                companion12.log(level3, sb9.toString());
                                CoreExtsKt.isRelease();
                                try {
                                    Result.Companion companion13 = Result.INSTANCE;
                                    Object invoke3 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                    Intrinsics.checkNotNull(invoke3, str19);
                                    m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke3).getPackageName());
                                } catch (Throwable th13) {
                                    Result.Companion companion14 = Result.INSTANCE;
                                    m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th13));
                                }
                                if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                                    m1202constructorimpl3 = "";
                                }
                                String str25 = (String) m1202constructorimpl3;
                                if (CoreExtsKt.isDebug()) {
                                    Intrinsics.checkNotNullExpressionValue(str25, str11);
                                    if (StringsKt.contains$default((CharSequence) str25, charSequence, false, 2, (Object) null)) {
                                        StackTraceElement[] stackTrace6 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace6, str12);
                                        StackTraceElement stackTraceElement6 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace6);
                                        if (stackTraceElement6 == null || (className2 = stackTraceElement6.getClassName()) == null) {
                                            str14 = null;
                                        } else {
                                            str14 = null;
                                            str15 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                        }
                                        Class<?> cls6 = getClass();
                                        str15 = cls6 != null ? cls6.getCanonicalName() : str14;
                                        if (str15 == null) {
                                            str16 = str2;
                                            matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str16);
                                            if (matcher2.find()) {
                                                str16 = matcher2.replaceAll("");
                                                Intrinsics.checkNotNullExpressionValue(str16, "replaceAll(\"\")");
                                            }
                                            Unit unit7 = Unit.INSTANCE;
                                            if (str16.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                str16 = str16.substring(0, 23);
                                                Intrinsics.checkNotNullExpressionValue(str16, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            StringBuilder sb12 = new StringBuilder();
                                            StringBuilder sb13 = new StringBuilder();
                                            sb13.append("getCurrentModuleId ");
                                            sb13.append(hashCode());
                                            sb13.append(" called for currentFlowPos: ");
                                            sb13.append(this.currentFlowPos);
                                            sb13.append(" when workflowUIStateList: ");
                                            obj = this.workflowUIStateList;
                                            if (obj != null) {
                                                Intrinsics.throwUninitializedPropertyAccessException(str6);
                                                obj2 = str14;
                                            } else {
                                                obj2 = obj;
                                            }
                                            sb13.append(obj2);
                                            String sb14 = sb13.toString();
                                            sb12.append(sb14 != null ? "null " : sb14);
                                            sb12.append(' ');
                                            sb12.append("");
                                            Log.println(6, str16, sb12.toString());
                                        }
                                        str16 = str15;
                                        matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str16);
                                        if (matcher2.find()) {
                                        }
                                        Unit unit72 = Unit.INSTANCE;
                                        if (str16.length() > 23) {
                                            str16 = str16.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str16, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        StringBuilder sb122 = new StringBuilder();
                                        StringBuilder sb132 = new StringBuilder();
                                        sb132.append("getCurrentModuleId ");
                                        sb132.append(hashCode());
                                        sb132.append(" called for currentFlowPos: ");
                                        sb132.append(this.currentFlowPos);
                                        sb132.append(" when workflowUIStateList: ");
                                        obj = this.workflowUIStateList;
                                        if (obj != null) {
                                        }
                                        sb132.append(obj2);
                                        String sb142 = sb132.toString();
                                        sb122.append(sb142 != null ? "null " : sb142);
                                        sb122.append(' ');
                                        sb122.append("");
                                        Log.println(6, str16, sb122.toString());
                                    }
                                }
                                throw new IllegalStateException("getCurrentModuleId cannot be null".toString());
                            }
                            str10 = str5;
                            if (str4 == null) {
                            }
                        }
                    }
                    str9 = str;
                    str10 = str5;
                    if (str4 == null) {
                    }
                }
                Class<?> cls7 = getClass();
                canonicalName2 = cls7 == null ? cls7.getCanonicalName() : null;
                if (canonicalName2 == null) {
                    canonicalName2 = str2;
                }
                matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                if (matcher3.find()) {
                }
                Unit unit32 = Unit.INSTANCE;
                if (canonicalName2.length() > 23) {
                    canonicalName2 = canonicalName2.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb.append(canonicalName2);
                sb.append(" - ");
                StringBuilder sb42 = new StringBuilder();
                sb42.append("getCurrentModuleId ");
                sb42.append(hashCode());
                sb42.append(": workflowUIStateList: ");
                Result.Companion companion52 = Result.INSTANCE;
                list2 = this.workflowUIStateList;
                if (list2 == null) {
                }
                Object m1202constructorimpl62 = Result.m1202constructorimpl(Integer.valueOf(list2.size()));
                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl62);
                if (m1205exceptionOrNullimpl != null) {
                }
                sb42.append(m1202constructorimpl62);
                sb42.append(", currentFlowPos: ");
                sb42.append(this.currentFlowPos);
                sb42.append(' ');
                sb2 = sb42.toString();
                if (sb2 == null) {
                }
                sb.append(sb2);
                sb.append(' ');
                sb.append("");
                companion.log(level, sb.toString());
                if (CoreExtsKt.isRelease()) {
                }
                list = this.workflowUIStateList;
                if (list == null) {
                }
                m1202constructorimpl = Result.m1202constructorimpl(list.get(this.currentFlowPos).getTag());
                if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                }
                str4 = (String) m1202constructorimpl;
                HyperLogger.Level level222222222 = HyperLogger.Level.DEBUG;
                HyperLogger companion422222222 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb322222222 = new StringBuilder();
                StackTraceElement[] stackTrace222222222 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace222222222, str3);
                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace222222222);
                if (stackTraceElement != null) {
                }
                str5 = str3;
                str6 = "workflowUIStateList";
                Class<?> cls22222222 = getClass();
                if (cls22222222 == null) {
                }
                if (canonicalName4 != null) {
                }
                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                if (matcher.find()) {
                }
                Unit unit22222222 = Unit.INSTANCE;
                if (str7.length() > 23) {
                    str7 = str7.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb322222222.append(str7);
                sb322222222.append(" - ");
                str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
                if (str8 == null) {
                }
                sb322222222.append(str8);
                sb322222222.append(' ');
                sb322222222.append("");
                companion422222222.log(level222222222, sb322222222.toString());
                if (!CoreExtsKt.isRelease()) {
                }
                str9 = str;
                str10 = str5;
                if (str4 == null) {
                }
            }
        }
        str17 = "null cannot be cast to non-null type android.app.Application";
        str = "packageName";
        str18 = "Throwable().stackTrace";
        Class<?> cls72 = getClass();
        if (cls72 == null) {
        }
        if (canonicalName2 == null) {
        }
        matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
        if (matcher3.find()) {
        }
        Unit unit322 = Unit.INSTANCE;
        if (canonicalName2.length() > 23) {
        }
        sb.append(canonicalName2);
        sb.append(" - ");
        StringBuilder sb422 = new StringBuilder();
        sb422.append("getCurrentModuleId ");
        sb422.append(hashCode());
        sb422.append(": workflowUIStateList: ");
        Result.Companion companion522 = Result.INSTANCE;
        list2 = this.workflowUIStateList;
        if (list2 == null) {
        }
        Object m1202constructorimpl622 = Result.m1202constructorimpl(Integer.valueOf(list2.size()));
        m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl622);
        if (m1205exceptionOrNullimpl != null) {
        }
        sb422.append(m1202constructorimpl622);
        sb422.append(", currentFlowPos: ");
        sb422.append(this.currentFlowPos);
        sb422.append(' ');
        sb2 = sb422.toString();
        if (sb2 == null) {
        }
        sb.append(sb2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
        }
        list = this.workflowUIStateList;
        if (list == null) {
        }
        m1202constructorimpl = Result.m1202constructorimpl(list.get(this.currentFlowPos).getTag());
        if (Result.m1208isFailureimpl(m1202constructorimpl)) {
        }
        str4 = (String) m1202constructorimpl;
        HyperLogger.Level level2222222222 = HyperLogger.Level.DEBUG;
        HyperLogger companion4222222222 = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb3222222222 = new StringBuilder();
        StackTraceElement[] stackTrace2222222222 = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace2222222222, str3);
        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2222222222);
        if (stackTraceElement != null) {
        }
        str5 = str3;
        str6 = "workflowUIStateList";
        Class<?> cls222222222 = getClass();
        if (cls222222222 == null) {
        }
        if (canonicalName4 != null) {
        }
        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
        if (matcher.find()) {
        }
        Unit unit222222222 = Unit.INSTANCE;
        if (str7.length() > 23) {
        }
        sb3222222222.append(str7);
        sb3222222222.append(" - ");
        str8 = "getCurrentModuleId " + hashCode() + ": returning " + str4;
        if (str8 == null) {
        }
        sb3222222222.append(str8);
        sb3222222222.append(' ');
        sb3222222222.append("");
        companion4222222222.log(level2222222222, sb3222222222.toString());
        if (!CoreExtsKt.isRelease()) {
        }
        str9 = str;
        str10 = str5;
        if (str4 == null) {
        }
    }

    private final String getLastParentModuleId() {
        Object m1202constructorimpl;
        try {
            Result.Companion companion = Result.INSTANCE;
            MainVM mainVM = this;
            List<WorkflowUIState> list = this.workflowUIStateList;
            if (list == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                list = null;
            }
            Integer num = this.lastParentModulePos;
            WorkflowUIState workflowUIState = list.get(num != null ? num.intValue() : -1);
            List<WorkflowUIState> list2 = this.workflowUIStateList;
            if (list2 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                list2 = null;
            }
            Object obj = (WorkflowUIState) list2.get(this.currentFlowPos);
            WorkflowUIState.Child child = obj instanceof WorkflowUIState.Child ? (WorkflowUIState.Child) obj : null;
            boolean z = true;
            if (child == null || !child.isChild()) {
                z = false;
            }
            m1202constructorimpl = Result.m1202constructorimpl(z ? workflowUIState.getTag() : null);
        } catch (Throwable th) {
            Result.Companion companion2 = Result.INSTANCE;
            m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
        }
        return (String) (Result.m1208isFailureimpl(m1202constructorimpl) ? null : m1202constructorimpl);
    }

    public final List<String> getWorkflowExecutionOrder$hyperkyc_release() {
        return this.workflowExecutionOrder;
    }

    public final void setWorkflowExecutionOrder$hyperkyc_release(List<String> list) {
        Intrinsics.checkNotNullParameter(list, "<set-?>");
        this.workflowExecutionOrder = list;
    }

    private final List<String> getActiveModuleIds() {
        List<WorkflowUIState> list = this.workflowUIStateList;
        if (list == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list = null;
        }
        List<WorkflowUIState> list2 = list;
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(list2, 10));
        Iterator<T> it = list2.iterator();
        while (it.hasNext()) {
            arrayList.add(((WorkflowUIState) it.next()).getTag());
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final List<String> getAllModuleIds() {
        Object m1202constructorimpl;
        ArrayList arrayList;
        try {
            Result.Companion companion = Result.INSTANCE;
            MainVM mainVM = this;
            List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
            if (modules != null) {
                List<WorkflowModule> list = modules;
                ArrayList arrayList2 = new ArrayList(CollectionsKt.collectionSizeOrDefault(list, 10));
                Iterator<T> it = list.iterator();
                while (it.hasNext()) {
                    arrayList2.add(((WorkflowModule) it.next()).getId());
                }
                arrayList = arrayList2;
            } else {
                arrayList = null;
            }
            m1202constructorimpl = Result.m1202constructorimpl(arrayList);
        } catch (Throwable th) {
            Result.Companion companion2 = Result.INSTANCE;
            m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
        }
        List<String> list2 = (List) (Result.m1208isFailureimpl(m1202constructorimpl) ? null : m1202constructorimpl);
        return list2 == null ? CollectionsKt.emptyList() : list2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final Context getContext() {
        Application application = getApplication();
        Intrinsics.checkNotNullExpressionValue(application, "getApplication()");
        return application;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final File getCacheDir() {
        return (File) this.cacheDir.getValue();
    }

    /* renamed from: getHyperKycData$hyperkyc_release, reason: from getter */
    public final HyperKycData getHyperKycData() {
        return this.hyperKycData;
    }

    public final void setHyperKycData$hyperkyc_release(HyperKycData hyperKycData) {
        Intrinsics.checkNotNullParameter(hyperKycData, "<set-?>");
        this.hyperKycData = hyperKycData;
    }

    /* renamed from: isPushingState$hyperkyc_release, reason: from getter */
    public final boolean getIsPushingState() {
        return this.isPushingState;
    }

    public final void setPushingState$hyperkyc_release(boolean z) {
        this.isPushingState = z;
    }

    public final List<String> getModuleExecutionOrder$hyperkyc_release() {
        return this.moduleExecutionOrder;
    }

    public final void setModuleExecutionOrder$hyperkyc_release(List<String> list) {
        Intrinsics.checkNotNullParameter(list, "<set-?>");
        this.moduleExecutionOrder = list;
    }

    public final MutableStateFlow<NetworkUIState<TransactionStateResponse>> getSaveStateUIStateFlow$hyperkyc_release() {
        return this.saveStateUIStateFlow;
    }

    public final void setSaveStateUIStateFlow$hyperkyc_release(MutableStateFlow<NetworkUIState<TransactionStateResponse>> mutableStateFlow) {
        Intrinsics.checkNotNullParameter(mutableStateFlow, "<set-?>");
        this.saveStateUIStateFlow = mutableStateFlow;
    }

    public final StateFlow<FinishWithResultEvent> getFinishWorkflowEventFlow$hyperkyc_release() {
        return this.finishWorkflowEventFlow;
    }

    public final HyperKycConfig getHyperKycConfig$hyperkyc_release() {
        HyperKycConfig hyperKycConfig = this.hyperKycConfig;
        if (hyperKycConfig != null) {
            return hyperKycConfig;
        }
        Intrinsics.throwUninitializedPropertyAccessException(HyperKycConfig.ARG_KEY);
        return null;
    }

    public final void setHyperKycConfig$hyperkyc_release(HyperKycConfig hyperKycConfig) {
        Intrinsics.checkNotNullParameter(hyperKycConfig, "<set-?>");
        this.hyperKycConfig = hyperKycConfig;
    }

    public final HSUIConfig getUiConfigData() {
        return this.uiConfigData;
    }

    public final void setUiConfigData(HSUIConfig hSUIConfig) {
        this.uiConfigData = hSUIConfig;
    }

    public final HSDefaultRemoteConfig getDefaultRemoteConfig$hyperkyc_release() {
        HSDefaultRemoteConfig hSDefaultRemoteConfig = this.defaultRemoteConfig;
        if (hSDefaultRemoteConfig != null) {
            return hSDefaultRemoteConfig;
        }
        Intrinsics.throwUninitializedPropertyAccessException("defaultRemoteConfig");
        return null;
    }

    public final void setDefaultRemoteConfig$hyperkyc_release(HSDefaultRemoteConfig hSDefaultRemoteConfig) {
        Intrinsics.checkNotNullParameter(hSDefaultRemoteConfig, "<set-?>");
        this.defaultRemoteConfig = hSDefaultRemoteConfig;
    }

    public final KycCountry getSelectedCountry() {
        return this.selectedCountry;
    }

    private final File getTransactionStateDir() {
        return (File) this.transactionStateDir.getValue();
    }

    private final File getTransactionStateFile() {
        return new File(getTransactionStateDir(), getHyperKycConfig$hyperkyc_release().getTransactionId$hyperkyc_release() + ".json");
    }

    /* renamed from: getHsStateHandler$hyperkyc_release, reason: from getter */
    public final HSStateHandler getHsStateHandler() {
        return this.hsStateHandler;
    }

    public final boolean isAtFirstModule$hyperkyc_release() {
        return this.currentFlowPos == 0;
    }

    public final Flow<NetworkUIState<List<KycCountry>>> fetchCountries() {
        return FlowKt.stateIn(FlowKt.flow(new MainVM$fetchCountries$1(this, null)), ViewModelKt.getViewModelScope(this), SharingStarted.INSTANCE.getLazily(), NetworkUIState.Loading.INSTANCE);
    }

    private final String getDummyWorkflowConfigJson(String workflowId) {
        String str;
        Resources resources = getApplication().getResources();
        Application application = getApplication();
        Intrinsics.checkNotNullExpressionValue(application, "getApplication<Application>()");
        InputStream openRawResource = resources.openRawResource(ContextExtsKt.getRawResId(application, workflowId));
        Intrinsics.checkNotNullExpressionValue(openRawResource, "getApplication<Applicati…w.test_workflow_config*/)");
        Reader inputStreamReader = new InputStreamReader(openRawResource, Charsets.UTF_8);
        BufferedReader bufferedReader = inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192);
        Throwable th = null;
        try {
            str = TextStreamsKt.readText(bufferedReader);
        } catch (Throwable th2) {
            str = null;
            th = th2;
        }
        try {
            bufferedReader.close();
        } catch (Throwable th3) {
            if (th == null) {
                th = th3;
            } else {
                ExceptionsKt.addSuppressed(th, th3);
            }
        }
        if (th != null) {
            throw th;
        }
        Intrinsics.checkNotNull(str);
        return str;
    }

    private final String getDummyDefaultRemoteConfigJson() {
        String str;
        Resources resources = getApplication().getResources();
        Application application = getApplication();
        Intrinsics.checkNotNullExpressionValue(application, "getApplication<Application>()");
        InputStream openRawResource = resources.openRawResource(ContextExtsKt.getRawResId(application, "default_remote_config"));
        Intrinsics.checkNotNullExpressionValue(openRawResource, "getApplication<Applicati…w.test_workflow_config*/)");
        Reader inputStreamReader = new InputStreamReader(openRawResource, Charsets.UTF_8);
        BufferedReader bufferedReader = inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192);
        Throwable th = null;
        try {
            str = TextStreamsKt.readText(bufferedReader);
        } catch (Throwable th2) {
            str = null;
            th = th2;
        }
        try {
            bufferedReader.close();
        } catch (Throwable th3) {
            if (th == null) {
                th = th3;
            } else {
                ExceptionsKt.addSuppressed(th, th3);
            }
        }
        if (th != null) {
            throw th;
        }
        Intrinsics.checkNotNull(str);
        return str;
    }

    public final Flow<NetworkUIState<Result<Response>>> performStartTransactionApiCall(StartTransaction startTransaction, Map<String, String> headers) {
        Intrinsics.checkNotNullParameter(startTransaction, "startTransaction");
        Intrinsics.checkNotNullParameter(headers, "headers");
        return FlowKt.stateIn(FlowKt.flow(new MainVM$performStartTransactionApiCall$1(startTransaction, headers, null)), ViewModelKt.getViewModelScope(this), SharingStarted.INSTANCE.getLazily(), NetworkUIState.Loading.INSTANCE);
    }

    public final Flow<NetworkUIState<WorkflowConfig>> fetchWorkflowConfig(String appId, String workflowId) {
        Intrinsics.checkNotNullParameter(appId, "appId");
        Intrinsics.checkNotNullParameter(workflowId, "workflowId");
        return FlowKt.stateIn(FlowKt.flow(new MainVM$fetchWorkflowConfig$1(appId, workflowId, this, null)), ViewModelKt.getViewModelScope(this), SharingStarted.INSTANCE.getLazily(), NetworkUIState.Loading.INSTANCE);
    }

    private final String getDummyTextConfig(String source, String languageToBeUsed) {
        InputStream openRawResource = getContext().getResources().openRawResource(ContextExtsKt.getRawResId(getContext(), source + '_' + languageToBeUsed + "_txt_cfg"));
        Intrinsics.checkNotNullExpressionValue(openRawResource, "context.resources\n      …ontext.getRawResId(file))");
        Reader inputStreamReader = new InputStreamReader(openRawResource, Charsets.UTF_8);
        return TextStreamsKt.readText(inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192));
    }

    public final Flow<NetworkUIState<Map<String, Map<String, Object>>>> fetchTextConfigs() {
        return FlowKt.flow(new MainVM$fetchTextConfigs$1(this, null));
    }

    public final Flow<NetworkUIState<HSUIConfig>> fetchUIColorConfigs(HyperKycConfig hyperKycConfig) {
        Intrinsics.checkNotNullParameter(hyperKycConfig, "hyperKycConfig");
        return FlowKt.flow(new MainVM$fetchUIColorConfigs$1(hyperKycConfig, this, null));
    }

    public final Flow<NetworkUIState<HSRemoteConfig>> fetchRemoteConfig(HyperKycConfig hyperKycConfig) {
        Intrinsics.checkNotNullParameter(hyperKycConfig, "hyperKycConfig");
        return FlowKt.flow(new MainVM$fetchRemoteConfig$1(hyperKycConfig, this, null));
    }

    public final Flow<NetworkUIState<HSDefaultRemoteConfig>> fetchDefaultRemoteConfig() {
        return FlowKt.flow(new MainVM$fetchDefaultRemoteConfig$1(this, null));
    }

    private final String getDummyUIConfig(String workflowId) {
        Application application = getApplication();
        Intrinsics.checkNotNullExpressionValue(application, "getApplication<Application>()");
        InputStream openRawResource = application.getResources().openRawResource(ContextExtsKt.getRawResId(application, workflowId + "_ui_cfg"));
        Intrinsics.checkNotNullExpressionValue(openRawResource, "application.resources\n  …cation.getRawResId(file))");
        Reader inputStreamReader = new InputStreamReader(openRawResource, Charsets.UTF_8);
        return TextStreamsKt.readText(inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192));
    }

    public final void initJourneyIdIfNotSet() {
        if (isJourneyIdSet$hyperkyc_release()) {
            return;
        }
        String uuid = UUID.randomUUID().toString();
        Intrinsics.checkNotNullExpressionValue(uuid, "randomUUID().toString()");
        setJourneyId$hyperkyc_release(uuid);
    }

    public static /* synthetic */ Object startWorkFlow$default(MainVM mainVM, HyperKycConfig hyperKycConfig, Continuation continuation, int i, Object obj) {
        if ((i & 1) != 0) {
            hyperKycConfig = mainVM.getHyperKycConfig$hyperkyc_release();
        }
        return mainVM.startWorkFlow(hyperKycConfig, continuation);
    }

    public final Object startWorkFlow(HyperKycConfig hyperKycConfig, Continuation<? super Pair<Boolean, String>> continuation) {
        return CoroutineScopeKt.coroutineScope(new MainVM$startWorkFlow$2(this, hyperKycConfig, null), continuation);
    }

    public final WorkflowModule getModuleForId$hyperkyc_release(String moduleId) {
        Intrinsics.checkNotNullParameter(moduleId, "moduleId");
        List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
        Object obj = null;
        if (modules == null) {
            return null;
        }
        Iterator<T> it = modules.iterator();
        while (true) {
            if (!it.hasNext()) {
                break;
            }
            Object next = it.next();
            if (Intrinsics.areEqual(((WorkflowModule) next).getId(), moduleId)) {
                obj = next;
                break;
            }
        }
        return (WorkflowModule) obj;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ boolean shouldShowBackButton$default(MainVM mainVM, WorkflowModule workflowModule, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            z = true;
        }
        return mainVM.shouldShowBackButton(workflowModule, z);
    }

    private final boolean shouldShowBackButton(WorkflowModule workflowModule, boolean z) {
        String previous = workflowModule.getPrevious();
        if (previous != null) {
            return previous.length() > 0;
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final Map<String, String> getDefaultHeaders() {
        Application application = getApplication();
        String str = application.getPackageManager().getPackageInfo(application.getPackageName(), 0).versionName;
        Object obj = getHyperKycConfig$hyperkyc_release().getMetadataMap().get(WorkflowAPIHeaders.SDK_TYPE);
        if (obj == null) {
            obj = "android";
        }
        String str2 = (String) obj;
        Object obj2 = getHyperKycConfig$hyperkyc_release().getMetadataMap().get(WorkflowAPIHeaders.SDK_VERSION);
        if (obj2 == null) {
            obj2 = BuildConfig.HYPERKYC_VERSION_NAME;
        }
        String sdkMode = InternalToolUtils.getSdkMode(getContext());
        Pair[] pairArr = new Pair[17];
        pairArr[0] = TuplesKt.to("workflowId", getHyperKycConfig$hyperkyc_release().getWorkflowId$hyperkyc_release());
        pairArr[1] = TuplesKt.to("transactionId", getHyperKycConfig$hyperkyc_release().getTransactionId$hyperkyc_release());
        pairArr[2] = TuplesKt.to("uniqueId", getHyperKycConfig$hyperkyc_release().getUniqueId());
        pairArr[3] = TuplesKt.to("device", Build.MODEL);
        pairArr[4] = TuplesKt.to(WorkflowAPIHeaders.DEVICE_MAKE, Build.BRAND);
        pairArr[5] = TuplesKt.to("platform", "android");
        pairArr[6] = TuplesKt.to("os", "android");
        pairArr[7] = TuplesKt.to(WorkflowAPIHeaders.SDK_VERSION, (String) obj2);
        pairArr[8] = TuplesKt.to(WorkflowAPIHeaders.SDK_TYPE, str2);
        pairArr[9] = TuplesKt.to("sdk-mode", sdkMode);
        pairArr[10] = TuplesKt.to(WorkflowAPIHeaders.APP_VERSION, str);
        pairArr[11] = TuplesKt.to(WorkflowAPIHeaders.PLATFORM_VERSION, Build.VERSION.RELEASE);
        pairArr[12] = TuplesKt.to(WorkflowAPIHeaders.WEB_CORE_MODE, "no");
        String webViewServicesVersion = ContextExtsKt.getWebViewServicesVersion(getContext());
        String str3 = AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
        if (webViewServicesVersion == null) {
            webViewServicesVersion = AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
        }
        pairArr[13] = TuplesKt.to(WorkflowAPIHeaders.WEBVIEW_VERSION, webViewServicesVersion);
        pairArr[14] = TuplesKt.to(WorkflowAPIHeaders.WEBVIEW_ENABLED, String.valueOf(ContextExtsKt.isWebViewEnabled(getContext())));
        pairArr[15] = TuplesKt.to(WorkflowAPIHeaders.PLAY_SERVICES_VERSION, String.valueOf(ContextExtsKt.getGooglePlayServicesVersion(getContext())));
        String playStoreVersion = ContextExtsKt.getPlayStoreVersion(getContext());
        if (playStoreVersion != null) {
            str3 = playStoreVersion;
        }
        pairArr[16] = TuplesKt.to(WorkflowAPIHeaders.PLAY_STORE_VERSION, str3);
        Map mapOf = MapsKt.mapOf(pairArr);
        LinkedHashMap linkedHashMap = new LinkedHashMap(MapsKt.mapCapacity(mapOf.size()));
        for (Map.Entry entry : mapOf.entrySet()) {
            Object key = entry.getKey();
            String str4 = (String) entry.getValue();
            if (str4 == null) {
                str4 = "";
            }
            linkedHashMap.put(key, str4);
        }
        return linkedHashMap;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final Map<String, String> getAuthHeaders() {
        String appId = getHyperKycConfig$hyperkyc_release().getAppId();
        Intrinsics.checkNotNull(appId);
        Map<String, String> mutableMapOf = MapsKt.mutableMapOf(TuplesKt.to("appId", appId), TuplesKt.to("Content-Type", "application/json"));
        String nullIfBlank = CoreExtsKt.nullIfBlank(getHyperKycConfig$hyperkyc_release().getAppKey());
        if (nullIfBlank != null) {
            mutableMapOf.put(HyperKycConfig.APP_KEY, nullIfBlank);
        }
        String nullIfBlank2 = CoreExtsKt.nullIfBlank(getHyperKycConfig$hyperkyc_release().getAccessToken());
        if (nullIfBlank2 != null) {
            mutableMapOf.put("Authorization", nullIfBlank2);
        }
        return mutableMapOf;
    }

    private static final List<WorkflowModule.Properties.RequestParam> createWorkflowUIState$injectFromVariablesForParamsList(List<WorkflowModule.Properties.RequestParam> list, MainVM mainVM) {
        if (list == null) {
            return null;
        }
        List<WorkflowModule.Properties.RequestParam> list2 = list;
        for (WorkflowModule.Properties.RequestParam requestParam : list2) {
            requestParam.setValue(stringInjectFromVariables$default(mainVM, requestParam.getValue(), false, 1, null));
        }
        return list2;
    }

    static /* synthetic */ Object processCondition$default(MainVM mainVM, String str, WorkflowCondition workflowCondition, boolean z, boolean z2, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        if ((i & 8) != 0) {
            z2 = false;
        }
        return mainVM.processCondition(str, workflowCondition, z, z2);
    }

    public static /* synthetic */ String stringInjectFromVariables$hyperkyc_release$default(MainVM mainVM, String str, boolean z, int i, Object obj) {
        if ((i & 2) != 0) {
            z = false;
        }
        return mainVM.stringInjectFromVariables$hyperkyc_release(str, z);
    }

    public final String stringInjectFromVariables$hyperkyc_release(String string, boolean addQuotesIfEmpty) {
        Intrinsics.checkNotNullParameter(string, "string");
        return stringInjectFromVariables(string, addQuotesIfEmpty);
    }

    public final Object anyInjectFromVariables$hyperkyc_release(String string) {
        Intrinsics.checkNotNullParameter(string, "string");
        return anyInjectFromVariables(string);
    }

    public final Sequence<MatchResult> getInjectionPaths$hyperkyc_release(String str) {
        Intrinsics.checkNotNullParameter(str, "<this>");
        return SequencesKt.filter(Regex.findAll$default(new Regex("([{]*(\\w+|sdk|inputs|outputs|conditionalVariables)\\.[.\\w]+[}]*)"), str, 0, 2, null), new Function1<MatchResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$getInjectionPaths$1
            /* JADX INFO: Access modifiers changed from: package-private */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public final Boolean invoke(MatchResult mr) {
                List allModuleIds;
                boolean z;
                Intrinsics.checkNotNullParameter(mr, "mr");
                allModuleIds = MainVM.this.getAllModuleIds();
                List list = allModuleIds;
                boolean z2 = true;
                if (!(list instanceof Collection) || !list.isEmpty()) {
                    Iterator it = list.iterator();
                    while (it.hasNext()) {
                        if (StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) it.next(), false, 2, (Object) null)) {
                            z = true;
                            break;
                        }
                    }
                }
                z = false;
                if (!z && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) "sdk", false, 2, (Object) null) && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) WorkflowModule.PREFIX_INPUTS, false, 2, (Object) null) && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) WorkflowModule.PREFIX_OUTPUTS, false, 2, (Object) null) && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) WorkflowModule.PREFIX_CONDITIONAL_VARS, false, 2, (Object) null)) {
                    z2 = false;
                }
                return Boolean.valueOf(z2);
            }
        });
    }

    public final Object injectFromVariables$hyperkyc_release(String string) {
        Intrinsics.checkNotNullParameter(string, "string");
        int count = SequencesKt.count(getInjectionPaths$hyperkyc_release(string));
        if (count == 0) {
            return string;
        }
        if (count == 1) {
            return anyInjectFromVariables(string);
        }
        return stringInjectFromVariables$default(this, string, false, 1, null);
    }

    static /* synthetic */ String stringInjectFromVariables$default(MainVM mainVM, String str, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            z = false;
        }
        return mainVM.stringInjectFromVariables(str, z);
    }

    /* JADX WARN: Code restructure failed: missing block: B:105:0x03a6, code lost:
    
        if (r0 == null) goto L151;
     */
    /* JADX WARN: Code restructure failed: missing block: B:159:0x0081, code lost:
    
        if (r0 == null) goto L16;
     */
    /* JADX WARN: Code restructure failed: missing block: B:166:0x0478, code lost:
    
        if (r9 != null) goto L182;
     */
    /* JADX WARN: Code restructure failed: missing block: B:17:0x00cb, code lost:
    
        if (r7 != null) goto L35;
     */
    /* JADX WARN: Code restructure failed: missing block: B:48:0x0284, code lost:
    
        if (r10 != null) goto L110;
     */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x0070, code lost:
    
        if (r0 == null) goto L16;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:114:0x0243  */
    /* JADX WARN: Removed duplicated region for block: B:208:0x05a2  */
    /* JADX WARN: Removed duplicated region for block: B:216:0x05e1  */
    /* JADX WARN: Removed duplicated region for block: B:218:0x05aa  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0240  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final String stringInjectFromVariables(String str, boolean z) {
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        Object m1202constructorimpl;
        String str7;
        Class<?> cls;
        Matcher matcher;
        String str8;
        String str9;
        String className;
        Class<?> cls2;
        String className2;
        T t;
        CharSequence charSequence;
        String str10;
        String str11;
        Ref.ObjectRef objectRef;
        T t2;
        String str12;
        String str13;
        String str14;
        Object m1202constructorimpl2;
        String canonicalName;
        Class<?> cls3;
        String str15;
        String className3;
        Class<?> cls4;
        String className4;
        String str16;
        String str17;
        String str18;
        Object m1202constructorimpl3;
        String canonicalName2;
        Class<?> cls5;
        String className5;
        Class<?> cls6;
        String className6;
        final MainVM mainVM = this;
        Iterator it = SequencesKt.filter(Regex.findAll$default(new Regex("([{]*(\\w+|sdk|inputs|outputs|conditionalVariables)\\.[.\\w]+[}]*)"), str, 0, 2, null), new Function1<MatchResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$stringInjectFromVariables$paths$1
            /* JADX INFO: Access modifiers changed from: package-private */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public final Boolean invoke(MatchResult mr) {
                List allModuleIds;
                boolean z2;
                Intrinsics.checkNotNullParameter(mr, "mr");
                allModuleIds = MainVM.this.getAllModuleIds();
                List list = allModuleIds;
                boolean z3 = true;
                if (!(list instanceof Collection) || !list.isEmpty()) {
                    Iterator it2 = list.iterator();
                    while (it2.hasNext()) {
                        if (StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) it2.next(), false, 2, (Object) null)) {
                            z2 = true;
                            break;
                        }
                    }
                }
                z2 = false;
                if (!z2 && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) "sdk", false, 2, (Object) null) && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) WorkflowModule.PREFIX_INPUTS, false, 2, (Object) null) && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) WorkflowModule.PREFIX_OUTPUTS, false, 2, (Object) null) && !StringsKt.contains$default((CharSequence) mr.getValue(), (CharSequence) WorkflowModule.PREFIX_CONDITIONAL_VARS, false, 2, (Object) null)) {
                    z3 = false;
                }
                return Boolean.valueOf(z3);
            }
        }).iterator();
        String str19 = str;
        while (true) {
            str2 = "N/A";
            String str20 = "Throwable().stackTrace";
            if (!it.hasNext()) {
                break;
            }
            MatchResult matchResult = (MatchResult) it.next();
            Iterator it2 = it;
            String removeCurlyBraces = CoreExtsKt.removeCurlyBraces(matchResult.getValue());
            String str21 = str19;
            Ref.ObjectRef objectRef2 = new Ref.ObjectRef();
            if (z) {
                Object anyInjectFromVariables = mainVM.anyInjectFromVariables(matchResult.getValue());
                if (anyInjectFromVariables != null) {
                    String primitiveToString = mainVM.primitiveToString(anyInjectFromVariables);
                    t = primitiveToString;
                }
                t = "";
            } else {
                Object anyInjectFromVariables2 = mainVM.anyInjectFromVariables(matchResult.getValue());
                if (anyInjectFromVariables2 != null) {
                    String obj = anyInjectFromVariables2.toString();
                    t = obj;
                }
                t = "";
            }
            objectRef2.element = t;
            String nullIfBlank = CoreExtsKt.nullIfBlank((String) objectRef2.element);
            if (nullIfBlank == null) {
                HyperLogger.Level level = HyperLogger.Level.DEBUG;
                HyperLogger companion = HyperLogger.INSTANCE.getInstance();
                str11 = " for ";
                StringBuilder sb = new StringBuilder();
                StackTraceElement[] stackTrace = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
                StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
                if (stackTraceElement == null || (className6 = stackTraceElement.getClassName()) == null) {
                    str16 = "Throwable().stackTrace";
                    charSequence = "co.hyperverge";
                    str17 = "packageName";
                } else {
                    str16 = "Throwable().stackTrace";
                    charSequence = "co.hyperverge";
                    str17 = "packageName";
                    str18 = StringsKt.substringAfterLast$default(className6, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                }
                String canonicalName3 = (str == null || (cls6 = str.getClass()) == null) ? null : cls6.getCanonicalName();
                str18 = canonicalName3 == null ? "N/A" : canonicalName3;
                Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str18);
                if (matcher2.find()) {
                    str18 = matcher2.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(str18, "replaceAll(\"\")");
                }
                Unit unit = Unit.INSTANCE;
                if (str18.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    str18 = str18.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(str18, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb.append(str18);
                sb.append(" - ");
                String str22 = removeCurlyBraces + " cannot be inferred";
                if (str22 == null) {
                    str22 = "null ";
                }
                sb.append(str22);
                sb.append(' ');
                sb.append("");
                companion.log(level, sb.toString());
                if (!CoreExtsKt.isRelease()) {
                    try {
                        Result.Companion companion2 = Result.INSTANCE;
                        Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                    } catch (Throwable th) {
                        Result.Companion companion3 = Result.INSTANCE;
                        m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                        m1202constructorimpl3 = "";
                    }
                    String str23 = (String) m1202constructorimpl3;
                    if (CoreExtsKt.isDebug()) {
                        str10 = str17;
                        Intrinsics.checkNotNullExpressionValue(str23, str10);
                        if (StringsKt.contains$default((CharSequence) str23, charSequence, false, 2, (Object) null)) {
                            StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                            str20 = str16;
                            Intrinsics.checkNotNullExpressionValue(stackTrace2, str20);
                            StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                            if (stackTraceElement2 == null || (className5 = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className5, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                canonicalName2 = (str == null || (cls5 = str.getClass()) == null) ? null : cls5.getCanonicalName();
                                if (canonicalName2 == null) {
                                    canonicalName2 = "N/A";
                                }
                            }
                            Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                            if (matcher3.find()) {
                                canonicalName2 = matcher3.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                            }
                            Unit unit2 = Unit.INSTANCE;
                            if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                canonicalName2 = canonicalName2.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            StringBuilder sb2 = new StringBuilder();
                            String str24 = removeCurlyBraces + " cannot be inferred";
                            if (str24 == null) {
                                str24 = "null ";
                            }
                            sb2.append(str24);
                            sb2.append(' ');
                            sb2.append("");
                            Log.println(2, canonicalName2, sb2.toString());
                        } else {
                            str20 = str16;
                        }
                        objectRef = objectRef2;
                        t2 = !z ? "''" : "";
                    }
                }
                str20 = str16;
                str10 = str17;
                objectRef = objectRef2;
                t2 = !z ? "''" : "";
            } else {
                charSequence = "co.hyperverge";
                str10 = "packageName";
                str11 = " for ";
                objectRef = objectRef2;
                t2 = nullIfBlank;
            }
            objectRef.element = t2;
            HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
            HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
            StringBuilder sb3 = new StringBuilder();
            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
            Intrinsics.checkNotNullExpressionValue(stackTrace3, str20);
            StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
            if (stackTraceElement3 == null || (className4 = stackTraceElement3.getClassName()) == null) {
                str12 = str10;
                str13 = str20;
            } else {
                str12 = str10;
                str13 = str20;
                str14 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
            }
            String canonicalName4 = (str == null || (cls4 = str.getClass()) == null) ? null : cls4.getCanonicalName();
            str14 = canonicalName4 == null ? "N/A" : canonicalName4;
            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str14);
            if (matcher4.find()) {
                str14 = matcher4.replaceAll("");
                Intrinsics.checkNotNullExpressionValue(str14, "replaceAll(\"\")");
            }
            Unit unit3 = Unit.INSTANCE;
            if (str14.length() > 23 && Build.VERSION.SDK_INT < 26) {
                str14 = str14.substring(0, 23);
                Intrinsics.checkNotNullExpressionValue(str14, "this as java.lang.String…ing(startIndex, endIndex)");
            }
            sb3.append(str14);
            sb3.append(" - ");
            StringBuilder sb4 = new StringBuilder();
            sb4.append("stringInjectFromVariables() replacing ");
            sb4.append(matchResult.getValue());
            sb4.append(" with ");
            sb4.append((String) objectRef.element);
            String str25 = str11;
            sb4.append(str25);
            sb4.append(str21);
            String sb5 = sb4.toString();
            if (sb5 == null) {
                sb5 = "null ";
            }
            sb3.append(sb5);
            sb3.append(' ');
            sb3.append("");
            companion4.log(level2, sb3.toString());
            if (!CoreExtsKt.isRelease()) {
                try {
                    Result.Companion companion5 = Result.INSTANCE;
                    Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                } catch (Throwable th2) {
                    Result.Companion companion6 = Result.INSTANCE;
                    m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                    m1202constructorimpl2 = "";
                }
                String str26 = (String) m1202constructorimpl2;
                if (CoreExtsKt.isDebug()) {
                    Intrinsics.checkNotNullExpressionValue(str26, str12);
                    if (StringsKt.contains$default((CharSequence) str26, charSequence, false, 2, (Object) null)) {
                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace4, str13);
                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                        if (stackTraceElement4 == null || (className3 = stackTraceElement4.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                            canonicalName = (str == null || (cls3 = str.getClass()) == null) ? null : cls3.getCanonicalName();
                        }
                        str2 = canonicalName;
                        Matcher matcher5 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str2);
                        if (matcher5.find()) {
                            str15 = matcher5.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(str15, "replaceAll(\"\")");
                        } else {
                            str15 = str2;
                        }
                        Unit unit4 = Unit.INSTANCE;
                        if (str15.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            str15 = str15.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str15, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        StringBuilder sb6 = new StringBuilder();
                        String str27 = "stringInjectFromVariables() replacing " + matchResult.getValue() + " with " + ((String) objectRef.element) + str25 + str21;
                        if (str27 == null) {
                            str27 = "null ";
                        }
                        sb6.append(str27);
                        sb6.append(' ');
                        sb6.append("");
                        Log.println(2, str15, sb6.toString());
                    }
                }
            }
            str19 = StringsKt.replace$default(str21, matchResult.getValue(), (String) objectRef.element, false, 4, (Object) null);
            mainVM = this;
            it = it2;
        }
        String str28 = str19;
        HyperLogger.Level level3 = HyperLogger.Level.DEBUG;
        HyperLogger companion7 = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb7 = new StringBuilder();
        StackTraceElement[] stackTrace5 = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace5, "Throwable().stackTrace");
        StackTraceElement stackTraceElement5 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5);
        if (stackTraceElement5 == null || (className2 = stackTraceElement5.getClassName()) == null) {
            str3 = "packageName";
            str4 = "Throwable().stackTrace";
            str5 = "null cannot be cast to non-null type android.app.Application";
        } else {
            str3 = "packageName";
            str4 = "Throwable().stackTrace";
            str5 = "null cannot be cast to non-null type android.app.Application";
            str6 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
        }
        String canonicalName5 = (str == null || (cls2 = str.getClass()) == null) ? null : cls2.getCanonicalName();
        str6 = canonicalName5 == null ? "N/A" : canonicalName5;
        Matcher matcher6 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str6);
        if (matcher6.find()) {
            str6 = matcher6.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(str6, "replaceAll(\"\")");
        }
        Unit unit5 = Unit.INSTANCE;
        if (str6.length() > 23 && Build.VERSION.SDK_INT < 26) {
            str6 = str6.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(str6, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb7.append(str6);
        sb7.append(" - ");
        String str29 = "stringInjectFromVariables() returning " + str28 + " for " + str;
        if (str29 == null) {
            str29 = "null ";
        }
        sb7.append(str29);
        sb7.append(' ');
        sb7.append("");
        companion7.log(level3, sb7.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion8 = Result.INSTANCE;
                Object invoke3 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke3, str5);
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke3).getPackageName());
            } catch (Throwable th3) {
                Result.Companion companion9 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th3));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String str30 = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(str30, str3);
                if (StringsKt.contains$default((CharSequence) str30, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace6 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace6, str4);
                    StackTraceElement stackTraceElement6 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace6);
                    if (stackTraceElement6 == null || (className = stackTraceElement6.getClassName()) == null) {
                        str7 = null;
                    } else {
                        str7 = null;
                        String substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                        if (substringAfterLast$default != null) {
                            str2 = substringAfterLast$default;
                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str2);
                            if (matcher.find()) {
                                str8 = str2;
                            } else {
                                str8 = matcher.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str8, "replaceAll(\"\")");
                            }
                            Unit unit6 = Unit.INSTANCE;
                            if (str8.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str8 = str8.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            StringBuilder sb8 = new StringBuilder();
                            str9 = "stringInjectFromVariables() returning " + str28 + " for " + str;
                            if (str9 == null) {
                                str9 = "null ";
                            }
                            sb8.append(str9);
                            sb8.append(' ');
                            sb8.append("");
                            Log.println(2, str8, sb8.toString());
                        }
                    }
                    if (str != null && (cls = str.getClass()) != null) {
                        str7 = cls.getCanonicalName();
                    }
                    if (str7 != null) {
                        str2 = str7;
                    }
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str2);
                    if (matcher.find()) {
                    }
                    Unit unit62 = Unit.INSTANCE;
                    if (str8.length() > 23) {
                        str8 = str8.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb82 = new StringBuilder();
                    str9 = "stringInjectFromVariables() returning " + str28 + " for " + str;
                    if (str9 == null) {
                    }
                    sb82.append(str9);
                    sb82.append(' ');
                    sb82.append("");
                    Log.println(2, str8, sb82.toString());
                }
            }
        }
        return str28;
    }

    private final String primitiveToString(Object obj) {
        return obj instanceof String ? true : obj instanceof Number ? true : obj instanceof Boolean ? obj.toString() : "";
    }

    /* JADX WARN: Code restructure failed: missing block: B:108:0x029f, code lost:
    
        if (r13 != null) goto L124;
     */
    /* JADX WARN: Code restructure failed: missing block: B:186:0x03a1, code lost:
    
        if (r0 != null) goto L164;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x0199, code lost:
    
        if (r0 == null) goto L74;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:111:0x02aa  */
    /* JADX WARN: Removed duplicated region for block: B:113:0x02b3  */
    /* JADX WARN: Removed duplicated region for block: B:114:0x02b0  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x02c6  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0309  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x041d  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x047b  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x0486  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x0327 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r0v122 */
    /* JADX WARN: Type inference failed for: r0v123 */
    /* JADX WARN: Type inference failed for: r0v42, types: [java.util.List] */
    /* JADX WARN: Type inference failed for: r0v54, types: [java.util.List] */
    /* JADX WARN: Type inference failed for: r0v56 */
    /* JADX WARN: Type inference failed for: r0v57 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final boolean flowBack() {
        boolean z;
        StackTraceElement stackTraceElement;
        String str;
        String str2;
        Matcher matcher;
        String str3;
        Object m1202constructorimpl;
        String str4;
        String str5;
        boolean z2;
        String className;
        String str6;
        String str7;
        boolean z3;
        boolean z4;
        String previous;
        String className2;
        String canonicalName;
        Object m1202constructorimpl2;
        String canonicalName2;
        String className3;
        String className4;
        String str8 = "N/A";
        String str9 = null;
        if (handleDocCaptureFlowBack()) {
            List<WorkflowUIState> list = this.workflowUIStateList;
            if (list == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                list = null;
            }
            if (list.get(this.currentFlowPos) instanceof WorkflowUIState.DocCapture) {
                List<WorkflowUIState> list2 = this.workflowUIStateList;
                if (list2 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                    list2 = null;
                }
                int i = this.currentFlowPos + 1;
                if (i <= CollectionsKt.getLastIndex(list2)) {
                    list2.subList(i, list2.size()).clear();
                }
            }
            List<WorkflowUIState> list3 = this.workflowUIStateList;
            if (list3 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                list3 = null;
            }
            list3.remove(this.currentFlowPos);
            HyperLogger.Level level = HyperLogger.Level.DEBUG;
            HyperLogger companion = HyperLogger.INSTANCE.getInstance();
            StringBuilder sb = new StringBuilder();
            StackTraceElement[] stackTrace = new Throwable().getStackTrace();
            Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
            StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
            if (stackTraceElement2 == null || (className4 = stackTraceElement2.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                Class<?> cls = getClass();
                canonicalName = cls != null ? cls.getCanonicalName() : null;
                if (canonicalName == null) {
                    canonicalName = "N/A";
                }
            }
            Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
            if (matcher2.find()) {
                canonicalName = matcher2.replaceAll("");
                Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
            }
            Unit unit = Unit.INSTANCE;
            if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
                canonicalName = canonicalName.substring(0, 23);
                Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
            }
            sb.append(canonicalName);
            sb.append(" - ");
            StringBuilder sb2 = new StringBuilder();
            sb2.append("flowBack: removing ");
            String str10 = this.currentFlowId;
            if (str10 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                str10 = null;
            }
            sb2.append(str10);
            sb2.append(" from moduleExecutionOrder: ");
            sb2.append(this.moduleExecutionOrder);
            String sb3 = sb2.toString();
            if (sb3 == null) {
                sb3 = "null ";
            }
            sb.append(sb3);
            sb.append(' ');
            sb.append("");
            companion.log(level, sb.toString());
            if (!CoreExtsKt.isRelease()) {
                try {
                    Result.Companion companion2 = Result.INSTANCE;
                    Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                } catch (Throwable th) {
                    Result.Companion companion3 = Result.INSTANCE;
                    m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                    m1202constructorimpl2 = "";
                }
                String packageName = (String) m1202constructorimpl2;
                if (CoreExtsKt.isDebug()) {
                    Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                    if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                        StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                        if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                            Class<?> cls2 = getClass();
                            canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        }
                        str8 = canonicalName2;
                        Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                        if (matcher3.find()) {
                            str8 = matcher3.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(str8, "replaceAll(\"\")");
                        }
                        Unit unit2 = Unit.INSTANCE;
                        if (str8.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            str8 = str8.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        StringBuilder sb4 = new StringBuilder();
                        StringBuilder sb5 = new StringBuilder();
                        sb5.append("flowBack: removing ");
                        String str11 = this.currentFlowId;
                        if (str11 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str11 = null;
                        }
                        sb5.append(str11);
                        sb5.append(" from moduleExecutionOrder: ");
                        sb5.append(this.moduleExecutionOrder);
                        String sb6 = sb5.toString();
                        if (sb6 == null) {
                            sb6 = "null ";
                        }
                        sb4.append(sb6);
                        sb4.append(' ');
                        sb4.append("");
                        Log.println(3, str8, sb4.toString());
                    }
                }
            }
            CollectionsKt.removeLast(this.moduleExecutionOrder);
            String str12 = this.currentFlowId;
            if (str12 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                str12 = null;
            }
            deleteModuleData(str12);
            HashMap<String, TransactionState.ModuleData> hashMap = this.moduleDataMap;
            String str13 = this.currentFlowId;
            if (str13 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
            } else {
                str9 = str13;
            }
            hashMap.put(str9, new TransactionState.ModuleData(TransactionState.ModuleData.DEFAULT_EXPIRY, TransactionState.ModuleData.ACTION_DELETE, null, null, null, getLastParentModuleId(), 28, null));
            int i2 = this.currentFlowPos;
            this.currentFlowPos = i2 - 1;
            this.previousFlowPos = i2;
            this.currentFlowId = getCurrentModuleId$hyperkyc_release();
            updateUiState();
            return true;
        }
        String str14 = this.currentFlowId;
        if (str14 != null) {
            if (str14 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                str14 = null;
            }
            WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(str14);
            if ((moduleForId$hyperkyc_release != null ? moduleForId$hyperkyc_release.getPrevious() : null) != null) {
                z = true;
                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb7 = new StringBuilder();
                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                if (stackTraceElement != null || (className2 = stackTraceElement.getClassName()) == null) {
                    str = "N/A";
                } else {
                    str = "N/A";
                    str2 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                }
                Class<?> cls3 = getClass();
                str2 = cls3 == null ? cls3.getCanonicalName() : null;
                if (str2 == null) {
                    str2 = str;
                }
                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str2);
                if (matcher.find()) {
                    str2 = matcher.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(str2, "replaceAll(\"\")");
                }
                Unit unit3 = Unit.INSTANCE;
                if (str2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    str2 = str2.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(str2, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb7.append(str2);
                sb7.append(" - ");
                str3 = "flowBack: currentFlowPos = " + this.currentFlowPos + ", canFlowBack: " + z;
                if (str3 == null) {
                    str3 = "null ";
                }
                sb7.append(str3);
                sb7.append(' ');
                sb7.append("");
                companion4.log(level2, sb7.toString());
                if (!CoreExtsKt.isRelease()) {
                    try {
                        Result.Companion companion5 = Result.INSTANCE;
                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                    } catch (Throwable th2) {
                        Result.Companion companion6 = Result.INSTANCE;
                        m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                        m1202constructorimpl = "";
                    }
                    String packageName2 = (String) m1202constructorimpl;
                    if (CoreExtsKt.isDebug()) {
                        Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                        if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                            if (stackTraceElement4 == null || (className = stackTraceElement4.getClassName()) == null) {
                                str4 = null;
                            } else {
                                str4 = null;
                                str5 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                            }
                            Class<?> cls4 = getClass();
                            str5 = cls4 != null ? cls4.getCanonicalName() : str4;
                            if (str5 == null) {
                                str5 = str;
                            }
                            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str5);
                            if (matcher4.find()) {
                                str5 = matcher4.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str5, "replaceAll(\"\")");
                            }
                            Unit unit4 = Unit.INSTANCE;
                            if (str5.length() <= 23 || Build.VERSION.SDK_INT >= 26) {
                                z2 = false;
                            } else {
                                z2 = false;
                                str5 = str5.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str5, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            StringBuilder sb8 = new StringBuilder();
                            String str15 = "flowBack: currentFlowPos = " + this.currentFlowPos + ", canFlowBack: " + z;
                            if (str15 == null) {
                                str15 = "null ";
                            }
                            sb8.append(str15);
                            sb8.append(' ');
                            sb8.append("");
                            Log.println(3, str5, sb8.toString());
                            if (!z && this.currentFlowPos > 0) {
                                List<WorkflowUIState> list4 = this.workflowUIStateList;
                                ?? r0 = list4;
                                if (list4 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                                    r0 = str4;
                                }
                                if (r0.get(this.currentFlowPos) instanceof WorkflowUIState.DocCapture) {
                                    List<WorkflowUIState> list5 = this.workflowUIStateList;
                                    ?? r02 = list5;
                                    if (list5 == null) {
                                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                                        r02 = str4;
                                    }
                                    int i3 = this.currentFlowPos + 1;
                                    if (i3 <= CollectionsKt.getLastIndex(r02)) {
                                        r02.subList(i3, r02.size()).clear();
                                    }
                                }
                                String str16 = this.currentFlowId;
                                if (str16 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str7 = str4;
                                } else {
                                    str7 = str16;
                                }
                                WorkflowModule moduleForId$hyperkyc_release2 = getModuleForId$hyperkyc_release(str7);
                                if (moduleForId$hyperkyc_release2 == null || (previous = moduleForId$hyperkyc_release2.getPrevious()) == null) {
                                    z3 = true;
                                } else {
                                    z3 = true;
                                    if (previous.length() == 0 ? true : z2) {
                                        z4 = true;
                                        if (!z4) {
                                            handleBackNavigation();
                                            updateUiState();
                                        }
                                        return z3;
                                    }
                                }
                                z4 = z2;
                                if (!z4) {
                                }
                                return z3;
                            }
                            if (this.currentFlowId != null) {
                                AnalyticsLogger analyticsLogger = AnalyticsLogger.INSTANCE;
                                String str17 = this.currentFlowId;
                                if (str17 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str6 = str4;
                                } else {
                                    str6 = str17;
                                }
                                Map<String, Object> analyticsForModule$hyperkyc_release = getAnalyticsForModule$hyperkyc_release(str6, AnalyticsLogger.Events.MODULE_USER_BACK_PRESS);
                                analyticsForModule$hyperkyc_release.put(AnalyticsLogger.Keys.NEXTSTEP, HyperKycStatus.USER_CANCELLED);
                                analyticsLogger.logModuleUserBackPressEvent$hyperkyc_release(analyticsForModule$hyperkyc_release);
                            }
                            boolean z5 = z2;
                            saveStateLocally$hyperkyc_release$default(this, false, null, false, 7, null);
                            return z5;
                        }
                    }
                }
                str4 = null;
                z2 = false;
                if (!z) {
                }
                if (this.currentFlowId != null) {
                }
                boolean z52 = z2;
                saveStateLocally$hyperkyc_release$default(this, false, null, false, 7, null);
                return z52;
            }
        }
        z = false;
        HyperLogger.Level level22 = HyperLogger.Level.DEBUG;
        HyperLogger companion42 = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb72 = new StringBuilder();
        StackTraceElement[] stackTrace32 = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace32, "Throwable().stackTrace");
        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32);
        if (stackTraceElement != null) {
        }
        str = "N/A";
        Class<?> cls32 = getClass();
        if (cls32 == null) {
        }
        if (str2 == null) {
        }
        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str2);
        if (matcher.find()) {
        }
        Unit unit32 = Unit.INSTANCE;
        if (str2.length() > 23) {
            str2 = str2.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(str2, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb72.append(str2);
        sb72.append(" - ");
        str3 = "flowBack: currentFlowPos = " + this.currentFlowPos + ", canFlowBack: " + z;
        if (str3 == null) {
        }
        sb72.append(str3);
        sb72.append(' ');
        sb72.append("");
        companion42.log(level22, sb72.toString());
        if (!CoreExtsKt.isRelease()) {
        }
        str4 = null;
        z2 = false;
        if (!z) {
        }
        if (this.currentFlowId != null) {
        }
        boolean z522 = z2;
        saveStateLocally$hyperkyc_release$default(this, false, null, false, 7, null);
        return z522;
    }

    /* JADX WARN: Failed to find 'out' block for switch in B:14:0x003c. Please report as an issue. */
    private final void deleteModuleData(final String moduleId) {
        Object obj;
        String type;
        List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
        if (modules != null) {
            Iterator<T> it = modules.iterator();
            while (true) {
                if (!it.hasNext()) {
                    obj = null;
                    break;
                } else {
                    obj = it.next();
                    if (Intrinsics.areEqual(((WorkflowModule) obj).getId(), moduleId)) {
                        break;
                    }
                }
            }
            WorkflowModule workflowModule = (WorkflowModule) obj;
            if (workflowModule != null && (type = workflowModule.getType()) != null) {
                switch (type.hashCode()) {
                    case -1768353996:
                        if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT)) {
                            CollectionsKt.removeAll((List) this.hyperKycData.getVideoStatementResultList(), (Function1) new Function1<HyperKycData.VideoStatementResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$8
                                /* JADX INFO: Access modifiers changed from: package-private */
                                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                {
                                    super(1);
                                }

                                @Override // kotlin.jvm.functions.Function1
                                public final Boolean invoke(HyperKycData.VideoStatementResult it2) {
                                    Intrinsics.checkNotNullParameter(it2, "it");
                                    return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                                }
                            });
                            return;
                        }
                        return;
                    case -333584256:
                        if (type.equals("barcode")) {
                            CollectionsKt.removeAll((List) this.hyperKycData.getBarcodeResultList(), (Function1) new Function1<HyperKycData.BarcodeResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$4
                                /* JADX INFO: Access modifiers changed from: package-private */
                                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                {
                                    super(1);
                                }

                                @Override // kotlin.jvm.functions.Function1
                                public final Boolean invoke(HyperKycData.BarcodeResult it2) {
                                    Intrinsics.checkNotNullParameter(it2, "it");
                                    return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                                }
                            });
                            return;
                        }
                        return;
                    case -259085917:
                        if (!type.equals(WorkflowModule.TYPE_DYNAMIC_FORM)) {
                            return;
                        }
                        CollectionsKt.removeAll((List) this.hyperKycData.getFormResultList(), (Function1) new Function1<HyperKycData.FormResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$3
                            /* JADX INFO: Access modifiers changed from: package-private */
                            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                            {
                                super(1);
                            }

                            @Override // kotlin.jvm.functions.Function1
                            public final Boolean invoke(HyperKycData.FormResult it2) {
                                Intrinsics.checkNotNullParameter(it2, "it");
                                return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                            }
                        });
                        return;
                    case 96794:
                        if (type.equals(WorkflowModule.TYPE_API)) {
                            CollectionsKt.removeAll((List) this.hyperKycData.getApiResultList(), (Function1) new Function1<HyperKycData.APIResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$2
                                /* JADX INFO: Access modifiers changed from: package-private */
                                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                {
                                    super(1);
                                }

                                @Override // kotlin.jvm.functions.Function1
                                public final Boolean invoke(HyperKycData.APIResult it2) {
                                    Intrinsics.checkNotNullParameter(it2, "it");
                                    return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                                }
                            });
                            return;
                        }
                        return;
                    case 108971:
                        if (type.equals(WorkflowModule.TYPE_NFC)) {
                            CollectionsKt.removeAll((List) this.hyperKycData.getNfcResultList(), (Function1) new Function1<HyperKycData.NFCResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$5
                                /* JADX INFO: Access modifiers changed from: package-private */
                                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                {
                                    super(1);
                                }

                                @Override // kotlin.jvm.functions.Function1
                                public final Boolean invoke(HyperKycData.NFCResult it2) {
                                    Intrinsics.checkNotNullParameter(it2, "it");
                                    return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                                }
                            });
                            return;
                        }
                        return;
                    case 3135069:
                        if (type.equals("face")) {
                            this.hyperKycData.setFaceResult$hyperkyc_release(null);
                            return;
                        }
                        return;
                    case 3148996:
                        if (!type.equals(WorkflowModule.TYPE_FORM)) {
                            return;
                        }
                        CollectionsKt.removeAll((List) this.hyperKycData.getFormResultList(), (Function1) new Function1<HyperKycData.FormResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$3
                            /* JADX INFO: Access modifiers changed from: package-private */
                            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                            {
                                super(1);
                            }

                            @Override // kotlin.jvm.functions.Function1
                            public final Boolean invoke(HyperKycData.FormResult it2) {
                                Intrinsics.checkNotNullParameter(it2, "it");
                                return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                            }
                        });
                        return;
                    case 126539647:
                        if (!type.equals(WorkflowModule.TYPE_DYNAMIC_FORM_V2)) {
                            return;
                        }
                        CollectionsKt.removeAll((List) this.hyperKycData.getFormResultList(), (Function1) new Function1<HyperKycData.FormResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$3
                            /* JADX INFO: Access modifiers changed from: package-private */
                            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                            {
                                super(1);
                            }

                            @Override // kotlin.jvm.functions.Function1
                            public final Boolean invoke(HyperKycData.FormResult it2) {
                                Intrinsics.checkNotNullParameter(it2, "it");
                                return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                            }
                        });
                        return;
                    case 700214324:
                        if (!type.equals(WorkflowModule.TYPE_STOP_SESSION_RECORDING)) {
                            return;
                        }
                        CollectionsKt.removeAll((List) this.hyperKycData.getSessionResultList(), (Function1) new Function1<HyperKycData.SessionResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$7
                            /* JADX INFO: Access modifiers changed from: package-private */
                            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                            {
                                super(1);
                            }

                            @Override // kotlin.jvm.functions.Function1
                            public final Boolean invoke(HyperKycData.SessionResult it2) {
                                Intrinsics.checkNotNullParameter(it2, "it");
                                return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                            }
                        });
                        return;
                    case 861720859:
                        if (type.equals(WorkflowModule.TYPE_DOCUMENT)) {
                            CollectionsKt.removeAll((List) this.hyperKycData.getDocResultList(), (Function1) new Function1<HyperKycData.DocResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$1
                                /* JADX INFO: Access modifiers changed from: package-private */
                                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                {
                                    super(1);
                                }

                                @Override // kotlin.jvm.functions.Function1
                                public final Boolean invoke(HyperKycData.DocResult it2) {
                                    Intrinsics.checkNotNullParameter(it2, "it");
                                    return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                                }
                            });
                            return;
                        }
                        return;
                    case 1224424441:
                        if (type.equals(WorkflowModule.TYPE_WEBVIEW)) {
                            CollectionsKt.removeAll((List) this.hyperKycData.getWebviewResultList(), (Function1) new Function1<HyperKycData.WebviewResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$6
                                /* JADX INFO: Access modifiers changed from: package-private */
                                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                {
                                    super(1);
                                }

                                @Override // kotlin.jvm.functions.Function1
                                public final Boolean invoke(HyperKycData.WebviewResult it2) {
                                    Intrinsics.checkNotNullParameter(it2, "it");
                                    return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                                }
                            });
                            return;
                        }
                        return;
                    case 1352637108:
                        if (type.equals("countries")) {
                            this.hyperKycData.setCountryResult$hyperkyc_release(null);
                            return;
                        }
                        return;
                    case 1418861776:
                        if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT_V2)) {
                            CollectionsKt.removeAll((List) this.hyperKycData.getVideoStatementV2ResultList(), (Function1) new Function1<HyperKycData.VideoStatementV2Result, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$9
                                /* JADX INFO: Access modifiers changed from: package-private */
                                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                {
                                    super(1);
                                }

                                @Override // kotlin.jvm.functions.Function1
                                public final Boolean invoke(HyperKycData.VideoStatementV2Result it2) {
                                    Intrinsics.checkNotNullParameter(it2, "it");
                                    return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                                }
                            });
                            return;
                        }
                        return;
                    case 1850541012:
                        if (!type.equals(WorkflowModule.TYPE_START_SESSION_RECORDING)) {
                            return;
                        }
                        CollectionsKt.removeAll((List) this.hyperKycData.getSessionResultList(), (Function1) new Function1<HyperKycData.SessionResult, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$deleteModuleData$7
                            /* JADX INFO: Access modifiers changed from: package-private */
                            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                            {
                                super(1);
                            }

                            @Override // kotlin.jvm.functions.Function1
                            public final Boolean invoke(HyperKycData.SessionResult it2) {
                                Intrinsics.checkNotNullParameter(it2, "it");
                                return Boolean.valueOf(Intrinsics.areEqual(it2.getTag$hyperkyc_release(), moduleId));
                            }
                        });
                        return;
                    default:
                        return;
                }
            }
        }
        throw new IllegalStateException(("module not found: " + moduleId).toString());
    }

    /* JADX WARN: Code restructure failed: missing block: B:15:0x0038, code lost:
    
        if (kotlin.jvm.internal.Intrinsics.areEqual(r0.getTag(), r5.getTag()) != false) goto L20;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void logModuleStartedEvent(WorkflowUIState uiState) {
        boolean z = false;
        if (!(uiState instanceof WorkflowUIState.End)) {
            if ((uiState instanceof WorkflowUIState.DocCapture) && this.currentFlowPos > 0) {
                List<WorkflowUIState> list = this.workflowUIStateList;
                if (list == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                    list = null;
                }
                WorkflowUIState workflowUIState = list.get(this.currentFlowPos - 1);
                if (workflowUIState instanceof WorkflowUIState.PickDocument ? true : workflowUIState instanceof WorkflowUIState.DocCapture) {
                }
            }
            z = true;
        }
        if (z) {
            this.workflowExecutionOrder.add(uiState.getTag());
            AnalyticsLogger.INSTANCE.logModuleStartedEvent$hyperkyc_release(getAnalyticsForModule$hyperkyc_release(uiState.getTag(), AnalyticsLogger.Events.MODULE_STARTED));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final ArrayList<String> getRequestIds() {
        List requestIds$hyperkyc_release;
        ArrayList<String> arrayList = new ArrayList<>();
        try {
            Result.Companion companion = Result.INSTANCE;
            Iterator<T> it = this.hyperKycData.docResultList().iterator();
            while (it.hasNext()) {
                arrayList.addAll(((HyperKycData.DocResult) it.next()).requestIds$hyperkyc_release());
            }
            HyperKycData.FaceResult faceResult = this.hyperKycData.faceResult();
            if (faceResult != null && (requestIds$hyperkyc_release = faceResult.requestIds$hyperkyc_release()) != null) {
                arrayList.addAll(requestIds$hyperkyc_release);
            }
            Iterator<T> it2 = this.hyperKycData.apiResultList().iterator();
            while (it2.hasNext()) {
                List requestIds$hyperkyc_release2 = ((HyperKycData.APIResult) it2.next()).requestIds$hyperkyc_release();
                if (requestIds$hyperkyc_release2 != null) {
                    arrayList.addAll(requestIds$hyperkyc_release2);
                }
            }
            Result.m1202constructorimpl(Unit.INSTANCE);
        } catch (Throwable th) {
            Result.Companion companion2 = Result.INSTANCE;
            Result.m1202constructorimpl(ResultKt.createFailure(th));
        }
        return arrayList;
    }

    public static /* synthetic */ void updateCountryResult$hyperkyc_release$default(MainVM mainVM, KycCountry kycCountry, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            kycCountry = null;
        }
        if ((i & 2) != 0) {
            z = false;
        }
        mainVM.updateCountryResult$hyperkyc_release(kycCountry, z);
    }

    public static /* synthetic */ void updateDocData$hyperkyc_release$default(MainVM mainVM, WorkflowUIState.DocCapture docCapture, HyperKycData.DocData docData, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            docCapture = null;
        }
        if ((i & 2) != 0) {
            docData = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateDocData$hyperkyc_release(docCapture, docData, z);
    }

    public static /* synthetic */ void updateFaceData$hyperkyc_release$default(MainVM mainVM, WorkflowUIState.FaceCapture faceCapture, HyperKycData.FaceData faceData, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            faceCapture = null;
        }
        if ((i & 2) != 0) {
            faceData = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateFaceData$hyperkyc_release(faceCapture, faceData, z);
    }

    public static /* synthetic */ void updateApiCallData$hyperkyc_release$default(MainVM mainVM, WorkflowUIState workflowUIState, HyperKycData.APIData aPIData, String str, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            workflowUIState = null;
        }
        if ((i & 2) != 0) {
            aPIData = null;
        }
        if ((i & 4) != 0) {
            str = null;
        }
        if ((i & 8) != 0) {
            z = false;
        }
        mainVM.updateApiCallData$hyperkyc_release(workflowUIState, aPIData, str, z);
    }

    public static /* synthetic */ void updateFormData$hyperkyc_release$default(MainVM mainVM, String str, Map map, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        if ((i & 2) != 0) {
            map = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateFormData$hyperkyc_release(str, map, z);
    }

    public static /* synthetic */ void updateWebviewData$hyperkyc_release$default(MainVM mainVM, String str, HyperKycData.WebviewData webviewData, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        if ((i & 2) != 0) {
            webviewData = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateWebviewData$hyperkyc_release(str, webviewData, z);
    }

    public static /* synthetic */ void updateNFCData$hyperkyc_release$default(MainVM mainVM, String str, HyperKycData.NFCResult nFCResult, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        if ((i & 2) != 0) {
            nFCResult = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateNFCData$hyperkyc_release(str, nFCResult, z);
    }

    public static /* synthetic */ void updateBarcodeData$hyperkyc_release$default(MainVM mainVM, String str, String str2, String str3, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        if ((i & 2) != 0) {
            str2 = null;
        }
        if ((i & 4) != 0) {
            str3 = null;
        }
        if ((i & 8) != 0) {
            z = false;
        }
        mainVM.updateBarcodeData$hyperkyc_release(str, str2, str3, z);
    }

    public static /* synthetic */ void updateSessionData$hyperkyc_release$default(MainVM mainVM, WorkflowUIState workflowUIState, HyperKycData.SessionData sessionData, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            workflowUIState = null;
        }
        if ((i & 2) != 0) {
            sessionData = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateSessionData$hyperkyc_release(workflowUIState, sessionData, z);
    }

    public static /* synthetic */ void updateVideoStatementData$hyperkyc_release$default(MainVM mainVM, WorkflowUIState workflowUIState, HyperKycData.VideoStatementData videoStatementData, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            workflowUIState = null;
        }
        if ((i & 2) != 0) {
            videoStatementData = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateVideoStatementData$hyperkyc_release(workflowUIState, videoStatementData, z);
    }

    public static /* synthetic */ void updateVideoStatementV2Data$hyperkyc_release$default(MainVM mainVM, WorkflowUIState workflowUIState, HyperKycData.VideoStatementV2Data videoStatementV2Data, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            workflowUIState = null;
        }
        if ((i & 2) != 0) {
            videoStatementV2Data = null;
        }
        if ((i & 4) != 0) {
            z = false;
        }
        mainVM.updateVideoStatementV2Data$hyperkyc_release(workflowUIState, videoStatementV2Data, z);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(41:1|(5:2|3|4|5|6)|(2:8|(40:10|11|12|(34:14|15|(1:17)|18|(1:23)|24|(6:197|198|199|(1:201)|202|(2:204|(33:206|207|208|209|(3:226|(1:228)(1:231)|(1:230))(1:215)|216|(1:218)|219|(1:224)|225|27|(6:168|169|(10:172|173|174|175|176|177|178|(2:180|181)(1:183)|182|170)|190|191|(8:193|80|81|(18:83|(1:154)(1:87)|89|(1:91)(1:95)|(1:93)(1:94)|96|(1:98)|99|(1:103)|104|(1:106)|107|108|109|110|(1:112)|113|(2:115|(12:117|(1:143)(2:121|(8:123|124|(1:126)|127|(1:131)|132|(1:134)|135))|136|(1:138)(1:142)|(1:140)(1:141)|124|(0)|127|(2:129|131)|132|(0)|135)))(1:155)|144|(1:146)(1:150)|147|148))(1:29)|30|(3:162|(1:164)(1:167)|(1:166))(1:36)|37|(1:39)|40|(1:45)|46|47|48|49|(1:51)|52|(2:54|(7:56|(3:73|(1:75)(1:78)|(1:77))(1:62)|63|(1:65)|66|(1:71)|72))|79|80|81|(0)(0)|144|(0)(0)|147|148)))|26|27|(0)(0)|30|(1:32)|162|(0)(0)|(0)|37|(0)|40|(2:42|45)|46|47|48|49|(0)|52|(0)|79|80|81|(0)(0)|144|(0)(0)|147|148)|236|(1:238)(1:242)|(1:240)(1:241)|15|(0)|18|(2:20|23)|24|(0)|26|27|(0)(0)|30|(0)|162|(0)(0)|(0)|37|(0)|40|(0)|46|47|48|49|(0)|52|(0)|79|80|81|(0)(0)|144|(0)(0)|147|148))|246|236|(0)(0)|(0)(0)|15|(0)|18|(0)|24|(0)|26|27|(0)(0)|30|(0)|162|(0)(0)|(0)|37|(0)|40|(0)|46|47|48|49|(0)|52|(0)|79|80|81|(0)(0)|144|(0)(0)|147|148|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:158:0x02c8, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:159:0x02c9, code lost:
    
        r2 = kotlin.Result.INSTANCE;
        r0 = kotlin.Result.m1202constructorimpl(kotlin.ResultKt.createFailure(r0));
     */
    /* JADX WARN: Code restructure failed: missing block: B:88:0x03d5, code lost:
    
        if (r14 != null) goto L181;
     */
    /* JADX WARN: Removed duplicated region for block: B:126:0x04f0  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x052b  */
    /* JADX WARN: Removed duplicated region for block: B:146:0x054c  */
    /* JADX WARN: Removed duplicated region for block: B:150:0x054e  */
    /* JADX WARN: Removed duplicated region for block: B:155:0x0540  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x024e A[Catch: all -> 0x037f, TryCatch #9 {all -> 0x037f, blocks: (B:27:0x0192, B:178:0x01ee, B:182:0x01f5, B:186:0x01e4, B:191:0x01ff, B:80:0x037a, B:30:0x0214, B:32:0x0237, B:34:0x023d, B:37:0x0258, B:39:0x0269, B:40:0x0270, B:42:0x027a, B:45:0x0281, B:46:0x0289, B:49:0x02d3, B:52:0x02da, B:54:0x02e2, B:56:0x02f4, B:58:0x030a, B:60:0x0310, B:63:0x032b, B:65:0x033c, B:66:0x0343, B:68:0x034d, B:71:0x0354, B:72:0x035c, B:73:0x031b, B:75:0x0321, B:79:0x0376, B:159:0x02c9, B:162:0x0248, B:164:0x024e, B:209:0x011b, B:211:0x0128, B:213:0x012e, B:216:0x0149, B:218:0x015a, B:219:0x0161, B:221:0x016b, B:224:0x0172, B:225:0x017a, B:226:0x0139, B:228:0x013f, B:48:0x02a6), top: B:208:0x011b, inners: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:166:0x0256  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x0253  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x01a0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0080 A[Catch: all -> 0x0381, TryCatch #0 {all -> 0x0381, blocks: (B:12:0x0052, B:15:0x006f, B:17:0x0080, B:18:0x0087, B:20:0x0091, B:23:0x0098, B:24:0x00a0, B:199:0x00ef, B:202:0x00f6, B:204:0x00fe, B:206:0x0110, B:235:0x00e5, B:236:0x005d, B:238:0x0063, B:198:0x00c2), top: B:11:0x0052, inners: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:180:0x01f4  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x01f5 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:197:0x00c2 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0091 A[Catch: all -> 0x0381, TryCatch #0 {all -> 0x0381, blocks: (B:12:0x0052, B:15:0x006f, B:17:0x0080, B:18:0x0087, B:20:0x0091, B:23:0x0098, B:24:0x00a0, B:199:0x00ef, B:202:0x00f6, B:204:0x00fe, B:206:0x0110, B:235:0x00e5, B:236:0x005d, B:238:0x0063, B:198:0x00c2), top: B:11:0x0052, inners: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:238:0x0063 A[Catch: all -> 0x0381, TryCatch #0 {all -> 0x0381, blocks: (B:12:0x0052, B:15:0x006f, B:17:0x0080, B:18:0x0087, B:20:0x0091, B:23:0x0098, B:24:0x00a0, B:199:0x00ef, B:202:0x00f6, B:204:0x00fe, B:206:0x0110, B:235:0x00e5, B:236:0x005d, B:238:0x0063, B:198:0x00c2), top: B:11:0x0052, inners: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:240:0x006b  */
    /* JADX WARN: Removed duplicated region for block: B:241:0x006e  */
    /* JADX WARN: Removed duplicated region for block: B:242:0x0068  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0212  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0237 A[Catch: all -> 0x037f, TryCatch #9 {all -> 0x037f, blocks: (B:27:0x0192, B:178:0x01ee, B:182:0x01f5, B:186:0x01e4, B:191:0x01ff, B:80:0x037a, B:30:0x0214, B:32:0x0237, B:34:0x023d, B:37:0x0258, B:39:0x0269, B:40:0x0270, B:42:0x027a, B:45:0x0281, B:46:0x0289, B:49:0x02d3, B:52:0x02da, B:54:0x02e2, B:56:0x02f4, B:58:0x030a, B:60:0x0310, B:63:0x032b, B:65:0x033c, B:66:0x0343, B:68:0x034d, B:71:0x0354, B:72:0x035c, B:73:0x031b, B:75:0x0321, B:79:0x0376, B:159:0x02c9, B:162:0x0248, B:164:0x024e, B:209:0x011b, B:211:0x0128, B:213:0x012e, B:216:0x0149, B:218:0x015a, B:219:0x0161, B:221:0x016b, B:224:0x0172, B:225:0x017a, B:226:0x0139, B:228:0x013f, B:48:0x02a6), top: B:208:0x011b, inners: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0269 A[Catch: all -> 0x037f, TryCatch #9 {all -> 0x037f, blocks: (B:27:0x0192, B:178:0x01ee, B:182:0x01f5, B:186:0x01e4, B:191:0x01ff, B:80:0x037a, B:30:0x0214, B:32:0x0237, B:34:0x023d, B:37:0x0258, B:39:0x0269, B:40:0x0270, B:42:0x027a, B:45:0x0281, B:46:0x0289, B:49:0x02d3, B:52:0x02da, B:54:0x02e2, B:56:0x02f4, B:58:0x030a, B:60:0x0310, B:63:0x032b, B:65:0x033c, B:66:0x0343, B:68:0x034d, B:71:0x0354, B:72:0x035c, B:73:0x031b, B:75:0x0321, B:79:0x0376, B:159:0x02c9, B:162:0x0248, B:164:0x024e, B:209:0x011b, B:211:0x0128, B:213:0x012e, B:216:0x0149, B:218:0x015a, B:219:0x0161, B:221:0x016b, B:224:0x0172, B:225:0x017a, B:226:0x0139, B:228:0x013f, B:48:0x02a6), top: B:208:0x011b, inners: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x027a A[Catch: all -> 0x037f, TryCatch #9 {all -> 0x037f, blocks: (B:27:0x0192, B:178:0x01ee, B:182:0x01f5, B:186:0x01e4, B:191:0x01ff, B:80:0x037a, B:30:0x0214, B:32:0x0237, B:34:0x023d, B:37:0x0258, B:39:0x0269, B:40:0x0270, B:42:0x027a, B:45:0x0281, B:46:0x0289, B:49:0x02d3, B:52:0x02da, B:54:0x02e2, B:56:0x02f4, B:58:0x030a, B:60:0x0310, B:63:0x032b, B:65:0x033c, B:66:0x0343, B:68:0x034d, B:71:0x0354, B:72:0x035c, B:73:0x031b, B:75:0x0321, B:79:0x0376, B:159:0x02c9, B:162:0x0248, B:164:0x024e, B:209:0x011b, B:211:0x0128, B:213:0x012e, B:216:0x0149, B:218:0x015a, B:219:0x0161, B:221:0x016b, B:224:0x0172, B:225:0x017a, B:226:0x0139, B:228:0x013f, B:48:0x02a6), top: B:208:0x011b, inners: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x02d9  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x02e2 A[Catch: all -> 0x037f, TryCatch #9 {all -> 0x037f, blocks: (B:27:0x0192, B:178:0x01ee, B:182:0x01f5, B:186:0x01e4, B:191:0x01ff, B:80:0x037a, B:30:0x0214, B:32:0x0237, B:34:0x023d, B:37:0x0258, B:39:0x0269, B:40:0x0270, B:42:0x027a, B:45:0x0281, B:46:0x0289, B:49:0x02d3, B:52:0x02da, B:54:0x02e2, B:56:0x02f4, B:58:0x030a, B:60:0x0310, B:63:0x032b, B:65:0x033c, B:66:0x0343, B:68:0x034d, B:71:0x0354, B:72:0x035c, B:73:0x031b, B:75:0x0321, B:79:0x0376, B:159:0x02c9, B:162:0x0248, B:164:0x024e, B:209:0x011b, B:211:0x0128, B:213:0x012e, B:216:0x0149, B:218:0x015a, B:219:0x0161, B:221:0x016b, B:224:0x0172, B:225:0x017a, B:226:0x0139, B:228:0x013f, B:48:0x02a6), top: B:208:0x011b, inners: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x03a0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ Map getResultsDetailMap$hyperkyc_release() {
        CharSequence charSequence;
        String str;
        String str2;
        Object m1202constructorimpl;
        Throwable m1205exceptionOrNullimpl;
        Object obj;
        String str3;
        String str4;
        Object m1202constructorimpl2;
        String str5;
        String str6;
        Matcher matcher;
        String className;
        String className2;
        HyperLogger.Level level;
        HyperLogger companion;
        StringBuilder sb;
        StackTraceElement stackTraceElement;
        String str7;
        String str8;
        Matcher matcher2;
        Object m1202constructorimpl3;
        String canonicalName;
        String className3;
        LinkedHashMap<String, String> sdkResponse;
        Map map;
        Iterator<Map.Entry<String, String>> it;
        Object m1202constructorimpl4;
        StackTraceElement stackTraceElement2;
        String canonicalName2;
        Matcher matcher3;
        Object m1202constructorimpl5;
        String canonicalName3;
        String className4;
        String className5;
        try {
            Result.Companion companion2 = Result.INSTANCE;
            MainVM mainVM = this;
            level = HyperLogger.Level.DEBUG;
            companion = HyperLogger.INSTANCE.getInstance();
            sb = new StringBuilder();
            str = "N/A";
            try {
                StackTraceElement[] stackTrace = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
            } catch (Throwable th) {
                th = th;
                charSequence = "co.hyperverge";
                str2 = "Throwable().stackTrace";
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                Object obj2 = m1202constructorimpl;
                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj2);
                if (m1205exceptionOrNullimpl != null) {
                }
                return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
            }
        } catch (Throwable th2) {
            th = th2;
            charSequence = "co.hyperverge";
            str = "N/A";
        }
        if (stackTraceElement != null) {
            String className6 = stackTraceElement.getClassName();
            if (className6 != null) {
                charSequence = "co.hyperverge";
                str7 = "Throwable().stackTrace";
                try {
                    str8 = StringsKt.substringAfterLast$default(className6, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                } catch (Throwable th3) {
                    th = th3;
                    str2 = str7;
                    Result.Companion companion32 = Result.INSTANCE;
                    m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    Object obj22 = m1202constructorimpl;
                    m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj22);
                    if (m1205exceptionOrNullimpl != null) {
                    }
                    return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
                }
                if (str8 != null) {
                    matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                    if (matcher2.find()) {
                        str8 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str8, "replaceAll(\"\")");
                    }
                    Unit unit = Unit.INSTANCE;
                    if (str8.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str8 = str8.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb.append(str8);
                    sb.append(" - ");
                    sb.append("getResultsDetailMap() called");
                    sb.append(' ');
                    sb.append("");
                    companion.log(level, sb.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion4 = Result.INSTANCE;
                            Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                        } catch (Throwable th4) {
                            Result.Companion companion5 = Result.INSTANCE;
                            m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th4));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                            m1202constructorimpl3 = "";
                        }
                        String packageName = (String) m1202constructorimpl3;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                            if (StringsKt.contains$default((CharSequence) packageName, charSequence, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                                str2 = str7;
                                try {
                                    Intrinsics.checkNotNullExpressionValue(stackTrace2, str2);
                                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                                    if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                        Class<?> cls = getClass();
                                        canonicalName = cls != null ? cls.getCanonicalName() : null;
                                        if (canonicalName == null) {
                                            canonicalName = str;
                                        }
                                    }
                                    Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
                                    if (matcher4.find()) {
                                        canonicalName = matcher4.replaceAll("");
                                        Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
                                    }
                                    Unit unit2 = Unit.INSTANCE;
                                    if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                        canonicalName = canonicalName.substring(0, 23);
                                        Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
                                    }
                                    Log.println(3, canonicalName, "getResultsDetailMap() called ");
                                    sdkResponse = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getSdkResponse();
                                } catch (Throwable th5) {
                                    th = th5;
                                    Result.Companion companion322 = Result.INSTANCE;
                                    m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                    Object obj222 = m1202constructorimpl;
                                    m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj222);
                                    if (m1205exceptionOrNullimpl != null) {
                                    }
                                    return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
                                }
                                if (sdkResponse == null) {
                                    try {
                                        LinkedHashMap<String, String> linkedHashMap = sdkResponse;
                                        ArrayList arrayList = new ArrayList(linkedHashMap.size());
                                        for (Iterator<Map.Entry<String, String>> it2 = linkedHashMap.entrySet().iterator(); it2.hasNext(); it2 = it) {
                                            Map.Entry<String, String> next = it2.next();
                                            String key = next.getKey();
                                            try {
                                                Result.Companion companion6 = Result.INSTANCE;
                                                it = it2;
                                                try {
                                                    m1202constructorimpl4 = Result.m1202constructorimpl(stringInjectFromVariables$default(this, next.getValue(), false, 1, null));
                                                } catch (Throwable th6) {
                                                    th = th6;
                                                    Result.Companion companion7 = Result.INSTANCE;
                                                    m1202constructorimpl4 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                    if (!Result.m1208isFailureimpl(m1202constructorimpl4)) {
                                                    }
                                                    arrayList.add(TuplesKt.to(key, m1202constructorimpl4));
                                                }
                                            } catch (Throwable th7) {
                                                th = th7;
                                                it = it2;
                                            }
                                            if (!Result.m1208isFailureimpl(m1202constructorimpl4)) {
                                                m1202constructorimpl4 = "";
                                            }
                                            arrayList.add(TuplesKt.to(key, m1202constructorimpl4));
                                        }
                                        map = MapsKt.toMap(arrayList);
                                    } catch (Throwable th8) {
                                        th = th8;
                                        Result.Companion companion3222 = Result.INSTANCE;
                                        m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                        Object obj2222 = m1202constructorimpl;
                                        m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj2222);
                                        if (m1205exceptionOrNullimpl != null) {
                                        }
                                        return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
                                    }
                                    if (map != null) {
                                        m1202constructorimpl = Result.m1202constructorimpl(map);
                                        Object obj22222 = m1202constructorimpl;
                                        m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj22222);
                                        if (m1205exceptionOrNullimpl != null) {
                                            HyperLogger.Level level2 = HyperLogger.Level.ERROR;
                                            HyperLogger companion8 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb2 = new StringBuilder();
                                            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace3, str2);
                                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                                            if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                                str3 = str2;
                                                obj = obj22222;
                                            } else {
                                                str3 = str2;
                                                obj = obj22222;
                                                str4 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                            }
                                            Class<?> cls2 = getClass();
                                            String canonicalName4 = cls2 != null ? cls2.getCanonicalName() : null;
                                            str4 = canonicalName4 == null ? str : canonicalName4;
                                            Matcher matcher5 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher5.find()) {
                                                str4 = matcher5.replaceAll("");
                                                Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                                            }
                                            Unit unit3 = Unit.INSTANCE;
                                            if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                str4 = str4.substring(0, 23);
                                                Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            sb2.append(str4);
                                            sb2.append(" - ");
                                            String str9 = "getResultsDetailMap: failed getting result detail map : " + m1205exceptionOrNullimpl.getMessage();
                                            if (str9 == null) {
                                                str9 = "null ";
                                            }
                                            sb2.append(str9);
                                            sb2.append(' ');
                                            sb2.append("");
                                            companion8.log(level2, sb2.toString());
                                            CoreExtsKt.isRelease();
                                            try {
                                                Result.Companion companion9 = Result.INSTANCE;
                                                Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                                Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                                m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                            } catch (Throwable th9) {
                                                Result.Companion companion10 = Result.INSTANCE;
                                                m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th9));
                                            }
                                            if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                                m1202constructorimpl2 = "";
                                            }
                                            String packageName2 = (String) m1202constructorimpl2;
                                            if (CoreExtsKt.isDebug()) {
                                                Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                                                if (StringsKt.contains$default((CharSequence) packageName2, charSequence, false, 2, (Object) null)) {
                                                    StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                                    Intrinsics.checkNotNullExpressionValue(stackTrace4, str3);
                                                    StackTraceElement stackTraceElement5 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                                    if (stackTraceElement5 == null || (className = stackTraceElement5.getClassName()) == null) {
                                                        str5 = null;
                                                    } else {
                                                        str5 = null;
                                                        String substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                        if (substringAfterLast$default != null) {
                                                            str6 = substringAfterLast$default;
                                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str6);
                                                            if (matcher.find()) {
                                                                str6 = matcher.replaceAll("");
                                                                Intrinsics.checkNotNullExpressionValue(str6, "replaceAll(\"\")");
                                                            }
                                                            Unit unit4 = Unit.INSTANCE;
                                                            if (str6.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                str6 = str6.substring(0, 23);
                                                                Intrinsics.checkNotNullExpressionValue(str6, "this as java.lang.String…ing(startIndex, endIndex)");
                                                            }
                                                            StringBuilder sb3 = new StringBuilder();
                                                            String str10 = "getResultsDetailMap: failed getting result detail map : " + m1205exceptionOrNullimpl.getMessage();
                                                            sb3.append(str10 != null ? str10 : "null ");
                                                            sb3.append(' ');
                                                            sb3.append("");
                                                            Log.println(6, str6, sb3.toString());
                                                        }
                                                    }
                                                    Class<?> cls3 = getClass();
                                                    String canonicalName5 = cls3 != null ? cls3.getCanonicalName() : str5;
                                                    str6 = canonicalName5 == null ? str : canonicalName5;
                                                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str6);
                                                    if (matcher.find()) {
                                                    }
                                                    Unit unit42 = Unit.INSTANCE;
                                                    if (str6.length() > 23) {
                                                        str6 = str6.substring(0, 23);
                                                        Intrinsics.checkNotNullExpressionValue(str6, "this as java.lang.String…ing(startIndex, endIndex)");
                                                    }
                                                    StringBuilder sb32 = new StringBuilder();
                                                    String str102 = "getResultsDetailMap: failed getting result detail map : " + m1205exceptionOrNullimpl.getMessage();
                                                    sb32.append(str102 != null ? str102 : "null ");
                                                    sb32.append(' ');
                                                    sb32.append("");
                                                    Log.println(6, str6, sb32.toString());
                                                }
                                            }
                                        } else {
                                            obj = obj22222;
                                        }
                                        return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
                                    }
                                }
                                HyperLogger.Level level3 = HyperLogger.Level.ERROR;
                                HyperLogger companion11 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb4 = new StringBuilder();
                                StackTraceElement[] stackTrace5 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace5, str2);
                                stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5);
                                if (stackTraceElement2 != null || (className5 = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className5, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls4 = getClass();
                                    canonicalName2 = cls4 == null ? cls4.getCanonicalName() : null;
                                    if (canonicalName2 == null) {
                                        canonicalName2 = str;
                                    }
                                }
                                matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                                if (matcher3.find()) {
                                    canonicalName2 = matcher3.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                                }
                                Unit unit5 = Unit.INSTANCE;
                                if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    canonicalName2 = canonicalName2.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                sb4.append(canonicalName2);
                                sb4.append(" - ");
                                sb4.append("skipping sdkResponse as its null in the workflow config");
                                sb4.append(' ');
                                sb4.append("");
                                companion11.log(level3, sb4.toString());
                                CoreExtsKt.isRelease();
                                Result.Companion companion12 = Result.INSTANCE;
                                Object invoke3 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                Intrinsics.checkNotNull(invoke3, "null cannot be cast to non-null type android.app.Application");
                                m1202constructorimpl5 = Result.m1202constructorimpl(((Application) invoke3).getPackageName());
                                if (Result.m1208isFailureimpl(m1202constructorimpl5)) {
                                    m1202constructorimpl5 = "";
                                }
                                String packageName3 = (String) m1202constructorimpl5;
                                if (CoreExtsKt.isDebug()) {
                                    Intrinsics.checkNotNullExpressionValue(packageName3, "packageName");
                                    if (StringsKt.contains$default((CharSequence) packageName3, charSequence, false, 2, (Object) null)) {
                                        StackTraceElement[] stackTrace6 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace6, str2);
                                        StackTraceElement stackTraceElement6 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace6);
                                        if (stackTraceElement6 == null || (className4 = stackTraceElement6.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                            Class<?> cls5 = getClass();
                                            canonicalName3 = cls5 != null ? cls5.getCanonicalName() : null;
                                            if (canonicalName3 == null) {
                                                canonicalName3 = str;
                                            }
                                        }
                                        Matcher matcher6 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                                        if (matcher6.find()) {
                                            canonicalName3 = matcher6.replaceAll("");
                                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                                        }
                                        Unit unit6 = Unit.INSTANCE;
                                        if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                            canonicalName3 = canonicalName3.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        Log.println(6, canonicalName3, "skipping sdkResponse as its null in the workflow config ");
                                    }
                                }
                                map = MapsKt.emptyMap();
                                m1202constructorimpl = Result.m1202constructorimpl(map);
                                Object obj222222 = m1202constructorimpl;
                                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj222222);
                                if (m1205exceptionOrNullimpl != null) {
                                }
                                return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
                            }
                        }
                    }
                    str2 = str7;
                    sdkResponse = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getSdkResponse();
                    if (sdkResponse == null) {
                    }
                    HyperLogger.Level level32 = HyperLogger.Level.ERROR;
                    HyperLogger companion112 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb42 = new StringBuilder();
                    StackTraceElement[] stackTrace52 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace52, str2);
                    stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace52);
                    if (stackTraceElement2 != null) {
                    }
                    Class<?> cls42 = getClass();
                    if (cls42 == null) {
                    }
                    if (canonicalName2 == null) {
                    }
                    matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                    }
                    Unit unit52 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb42.append(canonicalName2);
                    sb42.append(" - ");
                    sb42.append("skipping sdkResponse as its null in the workflow config");
                    sb42.append(' ');
                    sb42.append("");
                    companion112.log(level32, sb42.toString());
                    CoreExtsKt.isRelease();
                    Result.Companion companion122 = Result.INSTANCE;
                    Object invoke32 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke32, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl5 = Result.m1202constructorimpl(((Application) invoke32).getPackageName());
                    if (Result.m1208isFailureimpl(m1202constructorimpl5)) {
                    }
                    String packageName32 = (String) m1202constructorimpl5;
                    if (CoreExtsKt.isDebug()) {
                    }
                    map = MapsKt.emptyMap();
                    m1202constructorimpl = Result.m1202constructorimpl(map);
                    Object obj2222222 = m1202constructorimpl;
                    m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj2222222);
                    if (m1205exceptionOrNullimpl != null) {
                    }
                    return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
                }
                Class<?> cls6 = getClass();
                String canonicalName6 = cls6 == null ? cls6.getCanonicalName() : null;
                str8 = canonicalName6 != null ? str : canonicalName6;
                matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                if (matcher2.find()) {
                }
                Unit unit7 = Unit.INSTANCE;
                if (str8.length() > 23) {
                    str8 = str8.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb.append(str8);
                sb.append(" - ");
                sb.append("getResultsDetailMap() called");
                sb.append(' ');
                sb.append("");
                companion.log(level, sb.toString());
                if (!CoreExtsKt.isRelease()) {
                }
                str2 = str7;
                sdkResponse = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getSdkResponse();
                if (sdkResponse == null) {
                }
                HyperLogger.Level level322 = HyperLogger.Level.ERROR;
                HyperLogger companion1122 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb422 = new StringBuilder();
                StackTraceElement[] stackTrace522 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace522, str2);
                stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace522);
                if (stackTraceElement2 != null) {
                }
                Class<?> cls422 = getClass();
                if (cls422 == null) {
                }
                if (canonicalName2 == null) {
                }
                matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                if (matcher3.find()) {
                }
                Unit unit522 = Unit.INSTANCE;
                if (canonicalName2.length() > 23) {
                }
                sb422.append(canonicalName2);
                sb422.append(" - ");
                sb422.append("skipping sdkResponse as its null in the workflow config");
                sb422.append(' ');
                sb422.append("");
                companion1122.log(level322, sb422.toString());
                CoreExtsKt.isRelease();
                Result.Companion companion1222 = Result.INSTANCE;
                Object invoke322 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke322, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl5 = Result.m1202constructorimpl(((Application) invoke322).getPackageName());
                if (Result.m1208isFailureimpl(m1202constructorimpl5)) {
                }
                String packageName322 = (String) m1202constructorimpl5;
                if (CoreExtsKt.isDebug()) {
                }
                map = MapsKt.emptyMap();
                m1202constructorimpl = Result.m1202constructorimpl(map);
                Object obj22222222 = m1202constructorimpl;
                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj22222222);
                if (m1205exceptionOrNullimpl != null) {
                }
                return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
            }
        }
        charSequence = "co.hyperverge";
        str7 = "Throwable().stackTrace";
        Class<?> cls62 = getClass();
        if (cls62 == null) {
        }
        if (canonicalName6 != null) {
        }
        matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
        if (matcher2.find()) {
        }
        Unit unit72 = Unit.INSTANCE;
        if (str8.length() > 23) {
        }
        sb.append(str8);
        sb.append(" - ");
        sb.append("getResultsDetailMap() called");
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
        }
        str2 = str7;
        sdkResponse = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getSdkResponse();
        if (sdkResponse == null) {
        }
        HyperLogger.Level level3222 = HyperLogger.Level.ERROR;
        HyperLogger companion11222 = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb4222 = new StringBuilder();
        StackTraceElement[] stackTrace5222 = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace5222, str2);
        stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5222);
        if (stackTraceElement2 != null) {
        }
        Class<?> cls4222 = getClass();
        if (cls4222 == null) {
        }
        if (canonicalName2 == null) {
        }
        matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
        if (matcher3.find()) {
        }
        Unit unit5222 = Unit.INSTANCE;
        if (canonicalName2.length() > 23) {
        }
        sb4222.append(canonicalName2);
        sb4222.append(" - ");
        sb4222.append("skipping sdkResponse as its null in the workflow config");
        sb4222.append(' ');
        sb4222.append("");
        companion11222.log(level3222, sb4222.toString());
        CoreExtsKt.isRelease();
        Result.Companion companion12222 = Result.INSTANCE;
        Object invoke3222 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
        Intrinsics.checkNotNull(invoke3222, "null cannot be cast to non-null type android.app.Application");
        m1202constructorimpl5 = Result.m1202constructorimpl(((Application) invoke3222).getPackageName());
        if (Result.m1208isFailureimpl(m1202constructorimpl5)) {
        }
        String packageName3222 = (String) m1202constructorimpl5;
        if (CoreExtsKt.isDebug()) {
        }
        map = MapsKt.emptyMap();
        m1202constructorimpl = Result.m1202constructorimpl(map);
        Object obj222222222 = m1202constructorimpl;
        m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj222222222);
        if (m1205exceptionOrNullimpl != null) {
        }
        return (Map) (Result.m1208isFailureimpl(obj) ? MapsKt.emptyMap() : obj);
    }

    public final Object performReviewFinish(HyperKycResult hyperKycResult, Continuation<? super Flow<? extends NetworkUIState<Response>>> continuation) {
        return FlowKt.flow(new MainVM$performReviewFinish$2(this, hyperKycResult, null));
    }

    static /* synthetic */ Map getAnalyticsForCondition$default(MainVM mainVM, String str, String str2, String str3, int i, Object obj) {
        if ((i & 2) != 0) {
            str2 = null;
        }
        return mainVM.getAnalyticsForCondition(str, str2, str3);
    }

    public final boolean shouldShowBranding() {
        HSRemoteConfig hSRemoteConfig = this.remoteConfig;
        if (hSRemoteConfig == null) {
            return true;
        }
        if (hSRemoteConfig == null) {
            Intrinsics.throwUninitializedPropertyAccessException(HyperKycConfig.ARG_REMOTE_CONFIG);
            hSRemoteConfig = null;
        }
        return hSRemoteConfig.getUseBranding();
    }

    private final TransactionState.Metadata getStateMetadata() {
        String appId = getHyperKycConfig$hyperkyc_release().getAppId();
        Intrinsics.checkNotNull(appId);
        return new TransactionState.Metadata(appId, getHyperKycConfig$hyperkyc_release().getTransactionId$hyperkyc_release(), getHyperKycConfig$hyperkyc_release().getWorkflowId$hyperkyc_release(), isJourneyIdSet$hyperkyc_release() ? getJourneyId$hyperkyc_release() : "", getHyperKycConfig$hyperkyc_release().getInputs(), getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getHash());
    }

    /* JADX WARN: Failed to find 'out' block for switch in B:22:0x0085. Please report as an issue. */
    public final HyperKycData createHyperKycData$hyperkyc_release(TransactionState transactionState) {
        TransactionState.ModuleData moduleData;
        HashMap hashMap;
        HashMap hashMap2;
        Object obj;
        String obj2;
        MainVM mainVM = this;
        Intrinsics.checkNotNullParameter(transactionState, "transactionState");
        HyperKycData hyperKycData = new HyperKycData(null, null, null, null, null, null, null, null, null, null, null, 2047, null);
        for (String str : mainVM.moduleExecutionOrder) {
            WorkflowModule moduleForId$hyperkyc_release = mainVM.getModuleForId$hyperkyc_release(str);
            String type = moduleForId$hyperkyc_release != null ? moduleForId$hyperkyc_release.getType() : null;
            Map<String, TransactionState.ModuleData> moduleData2 = transactionState.getModuleData();
            if (moduleData2 != null && (moduleData = moduleData2.get(str)) != null) {
                Map<String, Object> variables = moduleData.getVariables();
                HashMap hashMap3 = variables != null ? new HashMap(variables) : new HashMap();
                Object obj3 = hashMap3.get(AppConstants.ATTEMPTS_KEY);
                int parseInt = (obj3 == null || (obj2 = obj3.toString()) == null) ? 0 : Integer.parseInt(obj2);
                List<HyperKycData.ApiFlags> flags = moduleData.getFlags();
                List<String> requestIds = moduleData.getRequestIds();
                if (type != null) {
                    switch (type.hashCode()) {
                        case -1768353996:
                            HashMap hashMap4 = hashMap3;
                            if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT)) {
                                hyperKycData.getVideoStatementResultList().add(new HyperKycData.VideoStatementResult(str, new HyperKycData.VideoStatementData(null, null, null, null, null, null, 63, null), parseInt, hashMap4, requestIds));
                                break;
                            } else {
                                break;
                            }
                        case -333584256:
                            HashMap hashMap5 = hashMap3;
                            if (type.equals("barcode")) {
                                hyperKycData.getBarcodeResultList().add(new HyperKycData.BarcodeResult(str, null, null, parseInt, hashMap5, 6, null));
                                break;
                            } else {
                                break;
                            }
                        case -259085917:
                            hashMap = hashMap3;
                            if (!type.equals(WorkflowModule.TYPE_DYNAMIC_FORM)) {
                                break;
                            }
                            ArrayList formResultList = hyperKycData.getFormResultList();
                            HashMap flattenMap = JSONExtsKt.flattenMap(hashMap);
                            Intrinsics.checkNotNull(flattenMap, "null cannot be cast to non-null type java.util.HashMap<kotlin.String, kotlin.Any?>{ kotlin.collections.TypeAliasesKt.HashMap<kotlin.String, kotlin.Any?> }");
                            formResultList.add(new HyperKycData.FormResult(str, flattenMap, parseInt));
                            break;
                        case 96794:
                            HashMap hashMap6 = hashMap3;
                            if (type.equals(WorkflowModule.TYPE_API)) {
                                hyperKycData.getApiResultList().add(new HyperKycData.APIResult(str, null, parseInt, hashMap6, requestIds, flags));
                                break;
                            } else {
                                break;
                            }
                        case 108971:
                            HashMap hashMap7 = hashMap3;
                            if (type.equals(WorkflowModule.TYPE_NFC)) {
                                hyperKycData.getNfcResultList().add(new HyperKycData.NFCResult(str, null, null, null, null, null, parseInt, hashMap7, 62, null));
                                break;
                            } else {
                                break;
                            }
                        case 3135069:
                            HashMap hashMap8 = hashMap3;
                            if (type.equals("face")) {
                                hyperKycData.setFaceResult$hyperkyc_release(new HyperKycData.FaceResult(str, new HyperKycData.FaceData(null, null, null, 0, null, null, null, null, null, null, null, null, null, 8191, null), parseInt, hashMap8, requestIds, flags));
                                break;
                            } else {
                                break;
                            }
                        case 3148996:
                            hashMap = hashMap3;
                            if (!type.equals(WorkflowModule.TYPE_FORM)) {
                                break;
                            }
                            ArrayList formResultList2 = hyperKycData.getFormResultList();
                            HashMap flattenMap2 = JSONExtsKt.flattenMap(hashMap);
                            Intrinsics.checkNotNull(flattenMap2, "null cannot be cast to non-null type java.util.HashMap<kotlin.String, kotlin.Any?>{ kotlin.collections.TypeAliasesKt.HashMap<kotlin.String, kotlin.Any?> }");
                            formResultList2.add(new HyperKycData.FormResult(str, flattenMap2, parseInt));
                            break;
                        case 126539647:
                            hashMap = hashMap3;
                            if (!type.equals(WorkflowModule.TYPE_DYNAMIC_FORM_V2)) {
                                break;
                            }
                            ArrayList formResultList22 = hyperKycData.getFormResultList();
                            HashMap flattenMap22 = JSONExtsKt.flattenMap(hashMap);
                            Intrinsics.checkNotNull(flattenMap22, "null cannot be cast to non-null type java.util.HashMap<kotlin.String, kotlin.Any?>{ kotlin.collections.TypeAliasesKt.HashMap<kotlin.String, kotlin.Any?> }");
                            formResultList22.add(new HyperKycData.FormResult(str, flattenMap22, parseInt));
                            break;
                        case 700214324:
                            hashMap2 = hashMap3;
                            if (!type.equals(WorkflowModule.TYPE_STOP_SESSION_RECORDING)) {
                                break;
                            }
                            hyperKycData.getSessionResultList().add(new HyperKycData.SessionResult(str, new HyperKycData.SessionData(null, null, null, null, null, null, 63, null), parseInt, hashMap2, requestIds));
                            break;
                        case 861720859:
                            HashMap hashMap9 = hashMap3;
                            if (type.equals(WorkflowModule.TYPE_DOCUMENT)) {
                                hyperKycData.getDocResultList().add(new HyperKycData.DocResult(str, CoreExtsKt.getStringValue(hashMap9, AnalyticsLogger.Keys.DOCUMENT_ID), new ArrayList(), parseInt, hashMap9, requestIds, flags));
                                break;
                            } else {
                                break;
                            }
                        case 1224424441:
                            HashMap hashMap10 = hashMap3;
                            if (type.equals(WorkflowModule.TYPE_WEBVIEW)) {
                                hyperKycData.getWebviewResultList().add(new HyperKycData.WebviewResult(str, new HyperKycData.WebviewData(null, 1, null), parseInt, hashMap10));
                                break;
                            } else {
                                break;
                            }
                        case 1352637108:
                            if (type.equals("countries")) {
                                HashMap hashMap11 = hashMap3;
                                hyperKycData.setCountryResult$hyperkyc_release(new HyperKycData.CountryResult(str, null, null, null, null, parseInt, hashMap3, 30, null));
                                Iterator<T> it = getCountries().iterator();
                                while (true) {
                                    if (it.hasNext()) {
                                        Object next = it.next();
                                        if (Intrinsics.areEqual(((KycCountry) next).getId(), hashMap11.get(AnalyticsLogger.Keys.COUNTRY_ID))) {
                                            obj = next;
                                        }
                                    } else {
                                        obj = null;
                                    }
                                }
                                mainVM.setSelectedCountry((KycCountry) obj);
                                break;
                            } else {
                                break;
                            }
                        case 1418861776:
                            if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT_V2)) {
                                hyperKycData.getVideoStatementV2ResultList().add(new HyperKycData.VideoStatementV2Result(str, new HyperKycData.VideoStatementV2Data(null, null, null, null, null, null, null, null, 255, null), parseInt, hashMap3, requestIds));
                                break;
                            } else {
                                break;
                            }
                        case 1850541012:
                            if (type.equals(WorkflowModule.TYPE_START_SESSION_RECORDING)) {
                                hashMap2 = hashMap3;
                                hyperKycData.getSessionResultList().add(new HyperKycData.SessionResult(str, new HyperKycData.SessionData(null, null, null, null, null, null, 63, null), parseInt, hashMap2, requestIds));
                                break;
                            } else {
                                break;
                            }
                    }
                }
            }
            mainVM = this;
        }
        return hyperKycData;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static final void pushLogsToRemote$uploadLogsIfNeeded(MainVM mainVM, String str, File file, boolean z) {
        if (z) {
            mainVM.makeAPICallToPushLogsToRemote(mainVM.getLogUploadBaseUrl(str + '/' + mainVM.getHyperKycConfig$hyperkyc_release().getAppId(), file), file);
            return;
        }
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        File filesDir = mainVM.getContext().getFilesDir();
        Intrinsics.checkNotNullExpressionValue(filesDir, "context.filesDir");
        companion.deleteLogFolder(filesDir);
    }

    static /* synthetic */ void updateModuleDataMap$default(MainVM mainVM, String str, String str2, List list, List list2, Map map, int i, Object obj) {
        if ((i & 2) != 0) {
            str2 = "put";
        }
        mainVM.updateModuleDataMap(str, str2, (i & 4) != 0 ? null : list, (i & 8) != 0 ? null : list2, map);
    }

    public static /* synthetic */ void enqueueStatePush$hyperkyc_release$default(MainVM mainVM, String str, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        mainVM.enqueueStatePush$hyperkyc_release(str);
    }

    private final List<String> getModuleExecOrder() {
        List<WorkflowUIState> list = this.workflowUIStateList;
        if (list != null) {
            if (list == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                list = null;
            }
            return SequencesKt.toMutableList(SequencesKt.filterNot(SequencesKt.map(SequencesKt.filter(CollectionsKt.asSequence(list), new Function1<WorkflowUIState, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$getModuleExecOrder$2
                @Override // kotlin.jvm.functions.Function1
                public final Boolean invoke(WorkflowUIState it) {
                    Intrinsics.checkNotNullParameter(it, "it");
                    boolean z = false;
                    if (!(it instanceof WorkflowUIState.ApiCall) ? !(it instanceof WorkflowUIState.Form) || !((WorkflowUIState.Form) it).isChild() : !((WorkflowUIState.ApiCall) it).isChild()) {
                        z = true;
                    }
                    return Boolean.valueOf(z);
                }
            }), new Function1<WorkflowUIState, String>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$getModuleExecOrder$3
                @Override // kotlin.jvm.functions.Function1
                public final String invoke(WorkflowUIState it) {
                    Intrinsics.checkNotNullParameter(it, "it");
                    return it.getTag();
                }
            }), new Function1<String, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$getModuleExecOrder$4
                @Override // kotlin.jvm.functions.Function1
                public final Boolean invoke(String it) {
                    Intrinsics.checkNotNullParameter(it, "it");
                    return Boolean.valueOf(ArraysKt.contains((String[]) ArraysKt.plus((Object[]) WorkflowModule.INSTANCE.getEND_STATES$hyperkyc_release(), (Collection) HyperKycStatus.INSTANCE.getALL_STATUSES_LIST$hyperkyc_release()), it));
                }
            }));
        }
        return new ArrayList();
    }

    static /* synthetic */ void pushTransactionState$default(MainVM mainVM, TransactionState.TransactionMetadata transactionMetadata, int i, Object obj) {
        if ((i & 1) != 0) {
            transactionMetadata = null;
        }
        mainVM.pushTransactionState(transactionMetadata);
    }

    public static /* synthetic */ void saveStateLocally$hyperkyc_release$default(MainVM mainVM, boolean z, TransactionState transactionState, boolean z2, int i, Object obj) {
        if ((i & 1) != 0) {
            z = false;
        }
        if ((i & 2) != 0) {
            transactionState = null;
        }
        if ((i & 4) != 0) {
            z2 = true;
        }
        mainVM.saveStateLocally$hyperkyc_release(z, transactionState, z2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final boolean hasValidSavedWorkflowState() {
        if (getTransactionStateFile().exists()) {
            if (getTransactionStateFile().lastModified() < new Date().getTime() + TimeUnit.HOURS.toMillis(getResumeWorkflowDurationInHours())) {
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final boolean isLocalWorkflowResumeEnabled() {
        if (this.hyperKycConfig != null) {
            Properties properties = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getProperties();
            Boolean valueOf = properties != null ? Boolean.valueOf(properties.getEnableResumeWorkflow()) : null;
            Intrinsics.checkNotNull(valueOf);
            if (valueOf.booleanValue()) {
                return true;
            }
        }
        return false;
    }

    private final long getResumeWorkflowDurationInHours() {
        if (this.hyperKycConfig == null) {
            return 48L;
        }
        Properties properties = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getProperties();
        Intrinsics.checkNotNull(properties != null ? Integer.valueOf(properties.getResumeWorkflowDurationInHours()) : null);
        return r0.intValue();
    }

    private final long getExpiryAt(String moduleId) {
        WorkflowModule workflowModule;
        WorkflowModule.Properties properties;
        String expiresAfter;
        Object obj;
        List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
        Integer num = null;
        if (modules != null) {
            Iterator<T> it = modules.iterator();
            while (true) {
                if (!it.hasNext()) {
                    obj = null;
                    break;
                }
                obj = it.next();
                if (Intrinsics.areEqual(((WorkflowModule) obj).getId(), moduleId)) {
                    break;
                }
            }
            workflowModule = (WorkflowModule) obj;
        } else {
            workflowModule = null;
        }
        if (workflowModule != null && (properties = workflowModule.getProperties()) != null && (expiresAfter = properties.getExpiresAfter()) != null) {
            num = StringsKt.toIntOrNull(expiresAfter);
        }
        return num != null ? System.currentTimeMillis() + (num.intValue() * 60 * 1000) : TransactionState.ModuleData.DEFAULT_EXPIRY;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: asBoolean, reason: merged with bridge method [inline-methods] */
    public final /* synthetic */ Boolean asBoolean$hyperkyc_release(String str, Boolean bool) {
        if (Intrinsics.areEqual(str, "yes")) {
            return true;
        }
        if (Intrinsics.areEqual(str, "no")) {
            return false;
        }
        String str2 = str;
        return str2 == null || StringsKt.isBlank(str2) ? bool : Boolean.valueOf(RuleEvaluatorKt.eval$default(stringInjectFromVariables(str, true), false, 1, null));
    }

    /* JADX WARN: Code restructure failed: missing block: B:56:0x013d, code lost:
    
        if (r0 == null) goto L55;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void setSelectedCountry(KycCountry kycCountry) {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "selectedCountry set() called with " + kycCountry;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "selectedCountry set() called with " + kycCountry;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(4, str, sb2.toString());
                }
            }
        }
        if (kycCountry == null) {
            return;
        }
        this.selectedCountry = kycCountry;
        updateCountryResult$hyperkyc_release$default(this, kycCountry, false, 2, null);
    }

    /*  JADX ERROR: JadxRuntimeException in pass: ModVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Can't remove SSA var: r2v18 co.hyperverge.hyperkyc.ui.models.WorkflowUIState$DocCapture, still in use, count: 2, list:
          (r2v18 co.hyperverge.hyperkyc.ui.models.WorkflowUIState$DocCapture) from 0x02fa: MOVE (r3v31 co.hyperverge.hyperkyc.ui.models.WorkflowUIState$DocCapture) = (r2v18 co.hyperverge.hyperkyc.ui.models.WorkflowUIState$DocCapture)
          (r2v18 co.hyperverge.hyperkyc.ui.models.WorkflowUIState$DocCapture) from 0x02f4: MOVE (r3v34 co.hyperverge.hyperkyc.ui.models.WorkflowUIState$DocCapture) = (r2v18 co.hyperverge.hyperkyc.ui.models.WorkflowUIState$DocCapture)
        	at jadx.core.utils.InsnRemover.removeSsaVar(InsnRemover.java:151)
        	at jadx.core.utils.InsnRemover.unbindResult(InsnRemover.java:116)
        	at jadx.core.utils.InsnRemover.unbindInsn(InsnRemover.java:80)
        	at jadx.core.utils.InsnRemover.addAndUnbind(InsnRemover.java:56)
        	at jadx.core.dex.visitors.ModVisitor.removeStep(ModVisitor.java:447)
        	at jadx.core.dex.visitors.ModVisitor.visit(ModVisitor.java:96)
        */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r10v4 */
    /* JADX WARN: Type inference failed for: r10v7 */
    /* JADX WARN: Type inference failed for: r10v8 */
    public final void updateDocCaptureUiStates(co.hyperverge.hyperkyc.data.models.KycDocument r66) {
        /*
            Method dump skipped, instructions count: 1341
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: co.hyperverge.hyperkyc.ui.viewmodels.MainVM.updateDocCaptureUiStates(co.hyperverge.hyperkyc.data.models.KycDocument):void");
    }

    public final String getLanguageToBeUsed$hyperkyc_release(HyperKycConfig hyperKycConfig) {
        String canonicalName;
        Object m1202constructorimpl;
        String className;
        String substringAfterLast$default;
        String language;
        HashMap<String, String> textConfigSource;
        Set<String> keySet;
        String className2;
        Intrinsics.checkNotNullParameter(hyperKycConfig, "hyperKycConfig");
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        boolean z = false;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "getLanguageToBeUsed() called with: hyperKycConfig = " + hyperKycConfig;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 != null) {
                            str = canonicalName2;
                        }
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "getLanguageToBeUsed() called with: hyperKycConfig = " + hyperKycConfig;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        language = Locale.getDefault().getLanguage();
        Intrinsics.checkNotNullExpressionValue(language, "deviceLanguage()");
        String defaultLangCode = hyperKycConfig.getDefaultLangCode();
        if (defaultLangCode != null) {
            language = defaultLangCode;
        }
        Properties properties = hyperKycConfig.getWorkflowConfig$hyperkyc_release().getProperties();
        if (properties != null && (textConfigSource = properties.getTextConfigSource()) != null && (keySet = textConfigSource.keySet()) != null && !keySet.contains(language)) {
            z = true;
        }
        return z ? "en" : language;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x0139, code lost:
    
        if (r0 == null) goto L55;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final String getLanguageSource(String languageToBeUsed) {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        HashMap<String, String> textConfigSource;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        String str2 = null;
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str3 = "getLanguageSource() called with: languageToBeUsed = " + languageToBeUsed;
        if (str3 == null) {
            str3 = "null ";
        }
        sb.append(str3);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str4 = "getLanguageSource() called with: languageToBeUsed = " + languageToBeUsed;
                    if (str4 == null) {
                        str4 = "null ";
                    }
                    sb2.append(str4);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        Properties properties = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getProperties();
        if (properties != null && (textConfigSource = properties.getTextConfigSource()) != null) {
            str2 = textConfigSource.get(languageToBeUsed);
        }
        String str5 = str2;
        return str5 == null || StringsKt.isBlank(str5) ? "default" : str2;
    }

    /* JADX WARN: Code restructure failed: missing block: B:55:0x0122, code lost:
    
        if (r0 == null) goto L52;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void refreshWorkflows() {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        List<WorkflowUIState> list = null;
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        sb.append("refreshWorkflows() called");
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    Log.println(3, str, "refreshWorkflows() called ");
                }
            }
        }
        List<WorkflowUIState> list2 = this.workflowUIStateList;
        if (list2 != null) {
            if (list2 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            } else {
                list = list2;
            }
            CollectionsKt.removeAll((List) list, (Function1) new Function1<WorkflowUIState, Boolean>() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$refreshWorkflows$3
                @Override // kotlin.jvm.functions.Function1
                public final Boolean invoke(WorkflowUIState it) {
                    Intrinsics.checkNotNullParameter(it, "it");
                    return Boolean.valueOf(!(it instanceof WorkflowUIState.PickCountry));
                }
            });
        }
    }

    public final Map<String, String> getDefaultHeaders$hyperkyc_release(String moduleId) {
        String canonicalName;
        Object m1202constructorimpl;
        String className;
        String substringAfterLast$default;
        String className2;
        Intrinsics.checkNotNullParameter(moduleId, "moduleId");
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "getDefaultHeaders() called with: moduleId = " + moduleId;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 != null) {
                            str = canonicalName2;
                        }
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "getDefaultHeaders() called with: moduleId = " + moduleId;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(moduleId);
        if (moduleForId$hyperkyc_release == null) {
            throw new IllegalStateException(("Module not found for id: " + moduleId).toString());
        }
        return MapsKt.plus(getDefaultHeaders(), TuplesKt.to("moduleSubType", moduleForId$hyperkyc_release.getSubType()));
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:286:0x08bc, code lost:
    
        if (r2 != null) goto L340;
     */
    /* JADX WARN: Code restructure failed: missing block: B:349:0x09fa, code lost:
    
        if (r5.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_DYNAMIC_FORM_V2) != false) goto L386;
     */
    /* JADX WARN: Code restructure failed: missing block: B:351:0x0f20, code lost:
    
        r4 = r0.getType();
        r5 = r0.getSubType();
        r6 = r0.getUiStyle();
        r2 = r0.getProperties();
     */
    /* JADX WARN: Code restructure failed: missing block: B:352:0x0f32, code lost:
    
        if (r2 == null) goto L548;
     */
    /* JADX WARN: Code restructure failed: missing block: B:353:0x0f34, code lost:
    
        r7 = r2.getSections();
     */
    /* JADX WARN: Code restructure failed: missing block: B:354:0x0f3b, code lost:
    
        r2 = r0.getProperties();
     */
    /* JADX WARN: Code restructure failed: missing block: B:355:0x0f3f, code lost:
    
        if (r2 == null) goto L552;
     */
    /* JADX WARN: Code restructure failed: missing block: B:356:0x0f41, code lost:
    
        r9 = r2.getUseWebForm();
     */
    /* JADX WARN: Code restructure failed: missing block: B:358:?, code lost:
    
        return new co.hyperverge.hyperkyc.ui.models.WorkflowUIState.Form(r45, r4, r5, r6, r7, r9, getModuleTextConfig$hyperkyc_release(r0.getId(), r0.getSubType()), shouldShowBackButton$default(r44, r0, false, 1, null));
     */
    /* JADX WARN: Code restructure failed: missing block: B:359:0x0f47, code lost:
    
        r9 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:360:0x0f3a, code lost:
    
        r7 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:362:0x0a04, code lost:
    
        if (r5.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_FORM) != false) goto L386;
     */
    /* JADX WARN: Code restructure failed: missing block: B:531:0x0f1e, code lost:
    
        if (r5.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_DYNAMIC_FORM) != false) goto L545;
     */
    /* JADX WARN: Code restructure failed: missing block: B:634:0x0145, code lost:
    
        if (r0 == null) goto L55;
     */
    /* JADX WARN: Failed to find 'out' block for switch in B:24:0x01ba. Please report as an issue. */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01a9  */
    /* JADX WARN: Removed duplicated region for block: B:261:0x0803  */
    /* JADX WARN: Removed duplicated region for block: B:266:0x081a  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x084c A[LOOP:8: B:268:0x0846->B:270:0x084c, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:273:0x0872  */
    /* JADX WARN: Removed duplicated region for block: B:289:0x08cd  */
    /* JADX WARN: Removed duplicated region for block: B:328:0x081f  */
    /* JADX WARN: Removed duplicated region for block: B:330:0x0815 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:601:0x114d  */
    /* JADX WARN: Type inference failed for: r18v11, types: [java.lang.Object] */
    /* JADX WARN: Type inference failed for: r18v6 */
    /* JADX WARN: Type inference failed for: r18v7 */
    /* JADX WARN: Type inference failed for: r2v137, types: [T, java.util.Map] */
    /* JADX WARN: Type inference failed for: r2v139, types: [T, java.util.Map] */
    /* JADX WARN: Type inference failed for: r2v213 */
    /* JADX WARN: Type inference failed for: r2v32 */
    /* JADX WARN: Type inference failed for: r2v33, types: [T] */
    /* JADX WARN: Type inference failed for: r2v62, types: [T, java.util.Map] */
    /* JADX WARN: Type inference failed for: r4v40, types: [T, java.util.Map] */
    /* JADX WARN: Type inference failed for: r8v63, types: [T, java.util.Map] */
    /* JADX WARN: Type inference failed for: r8v65, types: [T, java.util.Map] */
    /* JADX WARN: Type inference failed for: r9v33, types: [java.util.List, T] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final WorkflowUIState createWorkflowUIState(String moduleId) {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        int i;
        String className;
        WorkflowModule moduleForId$hyperkyc_release;
        int i2;
        int i3;
        String str;
        Map<String, String> map;
        String str2;
        String str3;
        String str4;
        String str5;
        boolean z;
        Map<String, WorkflowModule.Properties.Statement> map2;
        String str6;
        int i4;
        boolean z2;
        Map<String, WorkflowModule.Properties.Statement> map3;
        ?? r2;
        Integer barcodeSkipDelay;
        ArrayList arrayList;
        String stringInjectFromVariables$default;
        int i5;
        long j;
        boolean z3;
        boolean z4;
        LinkedHashMap emptyMap;
        boolean z5;
        boolean z6;
        boolean z7;
        List<WorkflowModule.Properties.RequestParam> requestParams;
        HashMap<String, String> headers;
        String url;
        String str7;
        boolean z8;
        String str8;
        String str9;
        boolean z9;
        boolean z10;
        boolean z11;
        String str10;
        List<Integer> list;
        boolean z12;
        int i6;
        boolean z13;
        boolean z14;
        Integer num;
        HashMap<String, LinkedHashMap<String, WorkflowModule.Properties.DocumentsOverride>> hashMap;
        boolean z15;
        boolean z16;
        List<String> list2;
        String str11;
        boolean z17;
        Iterator it;
        Object obj;
        List<KycDocument> documents;
        ArrayList arrayList2;
        HashMap<String, LinkedHashMap<String, WorkflowModule.Properties.DocumentsOverride>> hashMap2;
        HashMap<String, LinkedHashMap<String, WorkflowModule.Properties.DocumentsOverride>> hashMap3;
        Iterator<Map.Entry<String, WorkflowModule.Properties.DocumentsOverride>> it2;
        KycDocument kycDocument;
        HashMap<String, LinkedHashMap<String, WorkflowModule.Properties.DocumentsOverride>> hashMap4;
        LinkedHashMap emptyMap2;
        String stringInjectFromVariables$default2;
        List<String> countries;
        int i7;
        String str12;
        boolean z18;
        String str13;
        WorkflowModule.Properties.VideoStatementV2API videoStatementV2API;
        WorkflowModule.Properties.VideoStatementV2API videoStatementV2API2;
        WorkflowModule.Properties.VideoStatementV2API videoStatementV2API3;
        WorkflowModule.Properties.VideoStatementV2API videoStatementV2API4;
        WorkflowModule.Properties.VideoStatementV2API videoStatementV2API5;
        WorkflowModule.Properties.StatementV2 statementV2;
        ArrayList arrayList3;
        List<WorkflowModule.Properties.RequestParam> parameters;
        ArrayList arrayList4;
        List<WorkflowModule.Properties.RequestParam> parameters2;
        ArrayList arrayList5;
        List<WorkflowModule.Properties.RequestParam> parameters3;
        ArrayList arrayList6;
        List<WorkflowModule.Properties.RequestParam> parameters4;
        ArrayList arrayList7;
        List<WorkflowModule.Properties.RequestParam> parameters5;
        List<Integer> allowedStatusCodes;
        List<Integer> allowedStatusCodes2;
        List<Integer> allowedStatusCodes3;
        List<Integer> allowedStatusCodes4;
        List<Integer> allowedStatusCodes5;
        String url2;
        String stringInjectFromVariables$default3;
        String str14;
        String url3;
        String str15;
        String url4;
        String str16;
        String url5;
        String str17;
        String url6;
        boolean z19;
        String str18;
        boolean z20;
        boolean z21;
        String str19;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str20 = "N/A";
        LinkedHashMap<String, String> linkedHashMap = null;
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        String str21 = "";
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        boolean z22 = false;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str22 = "createWorkflowUIState() called with: moduleId = [" + moduleId + ']';
        if (str22 == null) {
            str22 = "null ";
        }
        sb.append(str22);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str20 = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str20);
                    if (matcher2.find()) {
                        str20 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str20, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (str20.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str20 = str20.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str20, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str23 = "createWorkflowUIState() called with: moduleId = [" + moduleId + ']';
                    if (str23 == null) {
                        str23 = "null ";
                    }
                    sb2.append(str23);
                    sb2.append(' ');
                    sb2.append("");
                    i = 3;
                    Log.println(3, str20, sb2.toString());
                    moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(moduleId);
                    if (moduleForId$hyperkyc_release != null) {
                        throw new IllegalStateException(("Module not found for id: " + moduleId).toString());
                    }
                    Map<String, String> defaultHeaders$hyperkyc_release = getDefaultHeaders$hyperkyc_release(moduleId);
                    String type = moduleForId$hyperkyc_release.getType();
                    switch (type.hashCode()) {
                        case -1768353996:
                            if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT)) {
                                Ref.ObjectRef objectRef = new Ref.ObjectRef();
                                WorkflowModule.Properties properties = moduleForId$hyperkyc_release.getProperties();
                                if (properties != null) {
                                    Map<String, WorkflowModule.Properties.Statement> statements = properties.getStatements();
                                    str2 = properties.getLivenessUrl();
                                    str3 = properties.getFaceMatchUrl();
                                    str4 = properties.getSpeechToTextMatchUrl();
                                    str5 = properties.getLogVideoStatementUrl();
                                    List<WorkflowModule.Properties.RequestParam> faceMatchParams = properties.getFaceMatchParams();
                                    if (faceMatchParams != null) {
                                        List<WorkflowModule.Properties.RequestParam> list3 = faceMatchParams;
                                        for (WorkflowModule.Properties.RequestParam requestParam : list3) {
                                            requestParam.setValue(stringInjectFromVariables$default(this, requestParam.getValue(), false, 1, null));
                                            statements = statements;
                                        }
                                        map3 = statements;
                                        r2 = list3;
                                    } else {
                                        map3 = statements;
                                        r2 = 0;
                                    }
                                    objectRef.element = r2;
                                    String start = properties.getStart();
                                    boolean showInstruction = properties.getShowInstruction();
                                    int allowedRestarts = properties.getAllowedRestarts();
                                    i3 = properties.getAllowedAttempts();
                                    map = properties.getUserData();
                                    Unit unit3 = Unit.INSTANCE;
                                    Unit unit4 = Unit.INSTANCE;
                                    z = showInstruction;
                                    i2 = allowedRestarts;
                                    str = start;
                                    map2 = map3;
                                } else {
                                    i2 = i;
                                    i3 = 2;
                                    str = "";
                                    map = null;
                                    str2 = null;
                                    str3 = null;
                                    str4 = null;
                                    str5 = null;
                                    z = true;
                                    map2 = null;
                                }
                                if (this.sessionRecordingReAttemptsLeft == -1) {
                                    this.sessionRecordingReAttemptsLeft = i3;
                                }
                                LinkedHashMap linkedHashMap2 = new LinkedHashMap();
                                if (map != null) {
                                    for (Map.Entry<String, String> entry : map.entrySet()) {
                                        linkedHashMap2.put(entry.getKey(), stringInjectFromVariables$default(this, entry.getValue(), false, 1, null));
                                    }
                                    Unit unit5 = Unit.INSTANCE;
                                }
                                if (map2 != null) {
                                    for (Map.Entry<String, WorkflowModule.Properties.Statement> entry2 : map2.entrySet()) {
                                        String enable = entry2.getValue().getEnable();
                                        if (enable != null) {
                                            stringInjectFromVariables$default(this, enable, false, 1, null);
                                        }
                                        stringInjectFromVariables$default(this, entry2.getValue().getNext(), false, 1, null);
                                    }
                                    str6 = null;
                                    i4 = 1;
                                    z2 = false;
                                    Unit unit6 = Unit.INSTANCE;
                                } else {
                                    str6 = null;
                                    i4 = 1;
                                    z2 = false;
                                }
                                return new WorkflowUIState.VideoStatement(moduleId, new VideoStatementConfig(str2 != null ? stringInjectFromVariables$default(this, str2, z2, i4, str6) : str6, str3 != null ? stringInjectFromVariables$default(this, str3, z2, i4, str6) : str6, str4 != null ? stringInjectFromVariables$default(this, str4, z2, i4, str6) : str6, str5 != null ? stringInjectFromVariables$default(this, str5, z2, i4, str6) : null, (List) objectRef.element, str, z, i2, i3, linkedHashMap2, map2), getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case -333584256:
                            if (type.equals("barcode")) {
                                HVQRConfig hVQRConfig = new HVQRConfig();
                                WorkflowModule.Properties properties2 = moduleForId$hyperkyc_release.getProperties();
                                boolean showInstruction2 = properties2 != null ? properties2.getShowInstruction() : true;
                                WorkflowModule.Properties properties3 = moduleForId$hyperkyc_release.getProperties();
                                if (properties3 != null && (barcodeSkipDelay = properties3.getBarcodeSkipDelay()) != null) {
                                    hVQRConfig.setSkipButtonDelay(barcodeSkipDelay.intValue());
                                    Unit unit7 = Unit.INSTANCE;
                                    Unit unit8 = Unit.INSTANCE;
                                }
                                hVQRConfig.setShowInstructions(showInstruction2);
                                hVQRConfig.setShowModuleBackButton(shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                                return new WorkflowUIState.BarcodeCapture(moduleId, hVQRConfig, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case -259085917:
                            break;
                        case 96794:
                            if (type.equals(WorkflowModule.TYPE_API)) {
                                WorkflowModule.Properties properties4 = moduleForId$hyperkyc_release.getProperties();
                                Intrinsics.checkNotNull(properties4);
                                boolean validateSignature = properties4.getValidateSignature();
                                if (properties4.getApiType() == null) {
                                    throw new IllegalStateException("apiType cannot be null".toString());
                                }
                                String substringAfter$default = StringsKt.substringAfter$default(properties4.getApiType(), "_", (String) null, 2, (Object) null);
                                String substringBefore$default = StringsKt.substringBefore$default(properties4.getApiType(), "_", (String) null, 2, (Object) null);
                                List<WorkflowModule.Properties.RequestParam> requestParams2 = properties4.getRequestParams();
                                if (requestParams2 != null) {
                                    List<WorkflowModule.Properties.RequestParam> list4 = requestParams2;
                                    ArrayList arrayList8 = new ArrayList(CollectionsKt.collectionSizeOrDefault(list4, 10));
                                    Iterator it3 = list4.iterator();
                                    while (it3.hasNext()) {
                                        WorkflowModule.Properties.RequestParam requestParam2 = (WorkflowModule.Properties.RequestParam) it3.next();
                                        String stringInjectFromVariables$default4 = stringInjectFromVariables$default(this, requestParam2.getName(), false, 1, null);
                                        String stringInjectFromVariables$default5 = stringInjectFromVariables$default(this, requestParam2.getValue(), false, 1, null);
                                        Iterator it4 = it3;
                                        String type2 = requestParam2.getType();
                                        arrayList8.add(requestParam2.copy(stringInjectFromVariables$default4, stringInjectFromVariables$default5, type2 != null ? stringInjectFromVariables$default(this, type2, false, 1, null) : null));
                                        it3 = it4;
                                    }
                                    arrayList = CoreExtsKt.copy(arrayList8);
                                } else {
                                    arrayList = null;
                                }
                                HashMap<String, String> headers2 = properties4.getHeaders();
                                HashMap<String, String> emptyMap3 = headers2 != null ? headers2 : MapsKt.emptyMap();
                                LinkedHashMap linkedHashMap3 = new LinkedHashMap(MapsKt.mapCapacity(emptyMap3.size()));
                                for (Map.Entry entry3 : emptyMap3.entrySet()) {
                                    linkedHashMap3.put(stringInjectFromVariables$default(this, (String) entry3.getKey(), false, 1, null), entry3.getValue());
                                }
                                LinkedHashMap linkedHashMap4 = new LinkedHashMap(MapsKt.mapCapacity(linkedHashMap3.size()));
                                for (Map.Entry entry4 : linkedHashMap3.entrySet()) {
                                    linkedHashMap4.put(entry4.getKey(), stringInjectFromVariables$default(this, (String) entry4.getValue(), false, 1, null));
                                }
                                Map mutableMap = MapsKt.toMutableMap(linkedHashMap4);
                                mutableMap.put("transactionId", getHyperKycConfig$hyperkyc_release().getTransactionId$hyperkyc_release());
                                mutableMap.put("moduleId", moduleId);
                                mutableMap.putAll(defaultHeaders$hyperkyc_release);
                                String accessToken = getHyperKycConfig$hyperkyc_release().getAccessToken();
                                if (accessToken == null || StringsKt.isBlank(accessToken)) {
                                    String appId = getHyperKycConfig$hyperkyc_release().getAppId();
                                    Intrinsics.checkNotNull(appId);
                                    mutableMap.put("appId", appId);
                                    String appKey = getHyperKycConfig$hyperkyc_release().getAppKey();
                                    Intrinsics.checkNotNull(appKey);
                                    mutableMap.put(HyperKycConfig.APP_KEY, appKey);
                                } else {
                                    String accessToken2 = getHyperKycConfig$hyperkyc_release().getAccessToken();
                                    Intrinsics.checkNotNull(accessToken2);
                                    mutableMap.put("Authorization", accessToken2);
                                }
                                String subType = moduleForId$hyperkyc_release.getSubType();
                                String uiStyle = moduleForId$hyperkyc_release.getUiStyle();
                                String url7 = properties4.getUrl();
                                if (url7 == null || (stringInjectFromVariables$default = stringInjectFromVariables$default(this, url7, false, 1, null)) == null) {
                                    throw new IllegalStateException("url cannot be null".toString());
                                }
                                return new WorkflowUIState.ApiCall(moduleId, subType, uiStyle, stringInjectFromVariables$default, substringAfter$default, substringBefore$default, properties4.allowedStatusCodes$hyperkyc_release(), getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), new HashMap(mutableMap), arrayList, properties4.getRequestBody(), validateSignature, properties4.getShowEndState(), properties4.isSuccess());
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 108971:
                            if (type.equals(WorkflowModule.TYPE_NFC)) {
                                Ref.ObjectRef objectRef2 = new Ref.ObjectRef();
                                objectRef2.element = MapsKt.emptyMap();
                                long j2 = 5000;
                                WorkflowModule.Properties properties5 = moduleForId$hyperkyc_release.getProperties();
                                if (properties5 != null) {
                                    HashMap<String, String> nfcAuthentication = properties5.getNfcAuthentication();
                                    HashMap<String, String> emptyMap4 = nfcAuthentication != null ? nfcAuthentication : MapsKt.emptyMap();
                                    LinkedHashMap linkedHashMap5 = new LinkedHashMap(MapsKt.mapCapacity(emptyMap4.size()));
                                    for (Map.Entry entry5 : emptyMap4.entrySet()) {
                                        linkedHashMap5.put(entry5.getKey(), stringInjectFromVariables$default(this, (String) entry5.getValue(), false, 1, null));
                                    }
                                    objectRef2.element = MapsKt.toMutableMap(linkedHashMap5);
                                    Long nfcSkipDelay = properties5.getNfcSkipDelay();
                                    if (nfcSkipDelay != null) {
                                        j2 = nfcSkipDelay.longValue();
                                        Unit unit9 = Unit.INSTANCE;
                                        Unit unit10 = Unit.INSTANCE;
                                    }
                                    boolean showInstruction3 = properties5.getShowInstruction();
                                    z4 = properties5.getNfcShowSkipButton();
                                    int allowedAttempts = properties5.getAllowedAttempts();
                                    Unit unit11 = Unit.INSTANCE;
                                    Unit unit12 = Unit.INSTANCE;
                                    Unit unit13 = Unit.INSTANCE;
                                    i5 = allowedAttempts;
                                    j = j2;
                                    z3 = showInstruction3;
                                } else {
                                    i5 = i;
                                    j = 5000;
                                    z3 = true;
                                    z4 = true;
                                }
                                return new WorkflowUIState.NFCReader(moduleId, z3, z4, shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null), (Map) objectRef2.element, Long.valueOf(j), i5, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 3135069:
                            if (type.equals("face")) {
                                WorkflowModule.Properties properties6 = moduleForId$hyperkyc_release.getProperties();
                                String stringInjectFromVariables$default6 = (properties6 == null || (url = properties6.getUrl()) == null) ? null : stringInjectFromVariables$default(this, url, false, 1, null);
                                WorkflowModule.Properties properties7 = moduleForId$hyperkyc_release.getProperties();
                                HashMap<String, String> emptyMap5 = (properties7 == null || (headers = properties7.getHeaders()) == null) ? MapsKt.emptyMap() : headers;
                                LinkedHashMap linkedHashMap6 = new LinkedHashMap(MapsKt.mapCapacity(emptyMap5.size()));
                                for (Map.Entry entry6 : emptyMap5.entrySet()) {
                                    linkedHashMap6.put(stringInjectFromVariables$default(this, (String) entry6.getKey(), false, 1, null), entry6.getValue());
                                }
                                LinkedHashMap linkedHashMap7 = new LinkedHashMap(MapsKt.mapCapacity(linkedHashMap6.size()));
                                for (Map.Entry entry7 : linkedHashMap6.entrySet()) {
                                    linkedHashMap7.put(entry7.getKey(), stringInjectFromVariables$default(this, (String) entry7.getValue(), false, 1, null));
                                }
                                Map mutableMap2 = MapsKt.toMutableMap(linkedHashMap7);
                                WorkflowModule.Properties properties8 = moduleForId$hyperkyc_release.getProperties();
                                if (properties8 == null || (requestParams = properties8.getRequestParams()) == null) {
                                    emptyMap = MapsKt.emptyMap();
                                } else {
                                    List<WorkflowModule.Properties.RequestParam> list5 = requestParams;
                                    emptyMap = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(list5, 10)), 16));
                                    for (WorkflowModule.Properties.RequestParam requestParam3 : list5) {
                                        Pair pair = TuplesKt.to(stringInjectFromVariables$default(this, requestParam3.getName(), false, 1, null), stringInjectFromVariables$default(this, requestParam3.getValue(), false, 1, null));
                                        emptyMap.put(pair.getFirst(), pair.getSecond());
                                    }
                                }
                                Map mutableMap3 = MapsKt.toMutableMap(emptyMap);
                                mutableMap3.put("moduleSubType", moduleForId$hyperkyc_release.getSubType());
                                mutableMap2.putAll(defaultHeaders$hyperkyc_release);
                                WorkflowModule.Properties properties9 = moduleForId$hyperkyc_release.getProperties();
                                boolean disableLiveness = properties9 != null ? properties9.getDisableLiveness() : false;
                                WorkflowModule.Properties properties10 = moduleForId$hyperkyc_release.getProperties();
                                List<Integer> allowedStatusCodes$hyperkyc_release = properties10 != null ? properties10.allowedStatusCodes$hyperkyc_release() : null;
                                WorkflowModule.Properties properties11 = moduleForId$hyperkyc_release.getProperties();
                                String defaultCamera = properties11 != null ? properties11.getDefaultCamera() : null;
                                WorkflowModule.Properties properties12 = moduleForId$hyperkyc_release.getProperties();
                                boolean enableOverlay = properties12 != null ? properties12.getEnableOverlay() : true;
                                WorkflowModule.Properties properties13 = moduleForId$hyperkyc_release.getProperties();
                                boolean enableLookStraight = properties13 != null ? properties13.getEnableLookStraight() : false;
                                WorkflowModule.Properties properties14 = moduleForId$hyperkyc_release.getProperties();
                                Long faceDetectorTimeout = properties14 != null ? properties14.getFaceDetectorTimeout() : null;
                                WorkflowModule.Properties properties15 = moduleForId$hyperkyc_release.getProperties();
                                Long captureTimeout = properties15 != null ? properties15.getCaptureTimeout() : null;
                                WorkflowModule.Properties properties16 = moduleForId$hyperkyc_release.getProperties();
                                String showEndState = properties16 != null ? properties16.getShowEndState() : null;
                                WorkflowModule.Properties properties17 = moduleForId$hyperkyc_release.getProperties();
                                String isSuccess = properties17 != null ? properties17.isSuccess() : null;
                                WorkflowModule.Properties properties18 = moduleForId$hyperkyc_release.getProperties();
                                boolean zoomByDefault = properties18 != null ? properties18.getZoomByDefault() : false;
                                HVFaceConfig hVFaceConfig = new HVFaceConfig();
                                WorkflowModule.Properties properties19 = moduleForId$hyperkyc_release.getProperties();
                                if (properties19 != null) {
                                    hVFaceConfig.setShouldShowInstructionPage(properties19.getShowInstruction());
                                    hVFaceConfig.setShouldAutoCapture(properties19.getAutoCapture());
                                    Integer autoCaptureDuration = properties19.getAutoCaptureDuration();
                                    if (autoCaptureDuration != null) {
                                        hVFaceConfig.setAutoCaptureDuration(autoCaptureDuration.intValue());
                                        Unit unit14 = Unit.INSTANCE;
                                        Unit unit15 = Unit.INSTANCE;
                                    }
                                    hVFaceConfig.setShouldRecordVideo(properties19.getVideoRecording());
                                    Integer videoRecordingDuration = properties19.getVideoRecordingDuration();
                                    if (videoRecordingDuration != null) {
                                        int intValue = videoRecordingDuration.intValue();
                                        hVFaceConfig.setFps(30);
                                        hVFaceConfig.setNumberOfFrames((intValue / 1000) * hVFaceConfig.getFps());
                                        Unit unit16 = Unit.INSTANCE;
                                        Unit unit17 = Unit.INSTANCE;
                                    }
                                    if (captureTimeout != null) {
                                        z5 = enableOverlay;
                                        z6 = enableLookStraight;
                                        hVFaceConfig.setCaptureTimeout(captureTimeout.longValue());
                                        Unit unit18 = Unit.INSTANCE;
                                        Unit unit19 = Unit.INSTANCE;
                                    } else {
                                        z5 = enableOverlay;
                                        z6 = enableLookStraight;
                                    }
                                    if (faceDetectorTimeout != null) {
                                        hVFaceConfig.setFaceDetectorTimeout(faceDetectorTimeout.longValue());
                                        Unit unit20 = Unit.INSTANCE;
                                        Unit unit21 = Unit.INSTANCE;
                                    }
                                    hVFaceConfig.showRetryIfFaceNotPresent(properties19.getRetryIfFaceNotPresent());
                                    hVFaceConfig.setMaxAttemptsForFaceNotPresent(properties19.getMaxAttemptsForFaceNotPresent());
                                    hVFaceConfig.setShowAlertTextBox(properties19.getAlertTextBox());
                                    Unit unit22 = Unit.INSTANCE;
                                    Unit unit23 = Unit.INSTANCE;
                                } else {
                                    z5 = enableOverlay;
                                    z6 = enableLookStraight;
                                }
                                hVFaceConfig.setShowModuleBackButton(shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                                WorkflowModule.Properties properties20 = moduleForId$hyperkyc_release.getProperties();
                                if (properties20 != null) {
                                    boolean validateSignature2 = properties20.getValidateSignature();
                                    Unit unit24 = Unit.INSTANCE;
                                    Unit unit25 = Unit.INSTANCE;
                                    z7 = validateSignature2;
                                } else {
                                    z7 = false;
                                }
                                String subType2 = moduleForId$hyperkyc_release.getSubType();
                                Intrinsics.checkNotNull(allowedStatusCodes$hyperkyc_release);
                                return new WorkflowUIState.FaceCapture(moduleId, subType2, hVFaceConfig, stringInjectFromVariables$default6, disableLiveness, defaultCamera, allowedStatusCodes$hyperkyc_release, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), mutableMap3, mutableMap2, z5, z7, z6, showEndState, isSuccess, zoomByDefault);
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 3148996:
                            str7 = moduleId;
                            break;
                        case 126539647:
                            str7 = moduleId;
                            break;
                        case 700214324:
                            if (type.equals(WorkflowModule.TYPE_STOP_SESSION_RECORDING)) {
                                WorkflowModule.Properties properties21 = moduleForId$hyperkyc_release.getProperties();
                                if (properties21 != null) {
                                    z8 = properties21.getShowReview();
                                    Unit unit26 = Unit.INSTANCE;
                                    Unit unit27 = Unit.INSTANCE;
                                } else {
                                    z8 = false;
                                }
                                return new WorkflowUIState.StopSessionRecording(moduleId, z8, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 861720859:
                            if (type.equals(WorkflowModule.TYPE_DOCUMENT)) {
                                Ref.ObjectRef objectRef3 = new Ref.ObjectRef();
                                objectRef3.element = new LinkedHashMap();
                                Ref.ObjectRef objectRef4 = new Ref.ObjectRef();
                                objectRef4.element = new LinkedHashMap();
                                Ref.ObjectRef objectRef5 = new Ref.ObjectRef();
                                WorkflowModule.Properties properties22 = moduleForId$hyperkyc_release.getProperties();
                                if (properties22 != null) {
                                    boolean allowUpload = properties22.getAllowUpload();
                                    List<String> supportedUploadFileTypes = properties22.getSupportedUploadFileTypes();
                                    boolean disableOCR = properties22.getDisableOCR();
                                    boolean disableBarcodeSkip = properties22.getDisableBarcodeSkip();
                                    Integer barcodeSkipDelay2 = properties22.getBarcodeSkipDelay();
                                    boolean showInstruction4 = properties22.getShowInstruction();
                                    boolean showReview = properties22.getShowReview();
                                    boolean autoCapture = properties22.getAutoCapture();
                                    Integer autoCaptureDuration2 = properties22.getAutoCaptureDuration();
                                    int intValue2 = autoCaptureDuration2 != null ? autoCaptureDuration2.intValue() : 0;
                                    hashMap = properties22.getDocumentsOverride();
                                    str10 = stringInjectFromVariables$default(this, properties22.getCountryId(), false, 1, null);
                                    String url8 = properties22.getUrl();
                                    String stringInjectFromVariables$default7 = url8 != null ? stringInjectFromVariables$default(this, url8, false, 1, null) : null;
                                    List<Integer> allowedStatusCodes$hyperkyc_release2 = properties22.allowedStatusCodes$hyperkyc_release();
                                    z16 = properties22.getEnableOverlay();
                                    HashMap<String, String> headers3 = properties22.getHeaders();
                                    HashMap<String, String> emptyMap6 = headers3 != null ? headers3 : MapsKt.emptyMap();
                                    LinkedHashMap linkedHashMap8 = new LinkedHashMap(MapsKt.mapCapacity(emptyMap6.size()));
                                    for (Iterator it5 = emptyMap6.entrySet().iterator(); it5.hasNext(); it5 = it5) {
                                        Map.Entry entry8 = (Map.Entry) it5.next();
                                        linkedHashMap8.put(stringInjectFromVariables$default(this, (String) entry8.getKey(), false, 1, null), entry8.getValue());
                                        supportedUploadFileTypes = supportedUploadFileTypes;
                                        stringInjectFromVariables$default7 = stringInjectFromVariables$default7;
                                        allowedStatusCodes$hyperkyc_release2 = allowedStatusCodes$hyperkyc_release2;
                                    }
                                    String str24 = stringInjectFromVariables$default7;
                                    list2 = supportedUploadFileTypes;
                                    List<Integer> list6 = allowedStatusCodes$hyperkyc_release2;
                                    LinkedHashMap linkedHashMap9 = new LinkedHashMap(MapsKt.mapCapacity(linkedHashMap8.size()));
                                    Iterator it6 = linkedHashMap8.entrySet().iterator();
                                    while (it6.hasNext()) {
                                        Map.Entry entry9 = (Map.Entry) it6.next();
                                        linkedHashMap9.put(entry9.getKey(), stringInjectFromVariables$default(this, (String) entry9.getValue(), false, 1, null));
                                        it6 = it6;
                                        disableOCR = disableOCR;
                                    }
                                    boolean z23 = disableOCR;
                                    objectRef4.element = MapsKt.toMutableMap(linkedHashMap9);
                                    List<WorkflowModule.Properties.RequestParam> requestParams3 = properties22.getRequestParams();
                                    if (requestParams3 != null) {
                                        List<WorkflowModule.Properties.RequestParam> list7 = requestParams3;
                                        emptyMap2 = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(list7, 10)), 16));
                                        Iterator it7 = list7.iterator();
                                        while (it7.hasNext()) {
                                            WorkflowModule.Properties.RequestParam requestParam4 = (WorkflowModule.Properties.RequestParam) it7.next();
                                            Iterator it8 = it7;
                                            Pair pair2 = TuplesKt.to(stringInjectFromVariables$default(this, requestParam4.getName(), false, 1, null), stringInjectFromVariables$default(this, requestParam4.getValue(), false, 1, null));
                                            emptyMap2.put(pair2.getFirst(), pair2.getSecond());
                                            it7 = it8;
                                        }
                                    } else {
                                        emptyMap2 = MapsKt.emptyMap();
                                    }
                                    objectRef3.element = MapsKt.toMutableMap(emptyMap2);
                                    LinkedHashMap<String, List<String>> documents2 = properties22.getDocuments();
                                    if (documents2 != null) {
                                        Intrinsics.checkNotNull(str10);
                                        List<String> list8 = documents2.get(str10);
                                        if (list8 == null) {
                                            list8 = null;
                                        }
                                        List<String> list9 = list8;
                                        if (list9 != null) {
                                            List<String> list10 = list9;
                                            ArrayList arrayList9 = new ArrayList(CollectionsKt.collectionSizeOrDefault(list10, 10));
                                            Iterator it9 = list10.iterator();
                                            while (it9.hasNext()) {
                                                arrayList9.add(stringInjectFromVariables$default(this, (String) it9.next(), false, 1, null));
                                            }
                                            objectRef5.element = arrayList9;
                                            boolean validateSignature3 = properties22.getValidateSignature();
                                            String showEndState2 = properties22.getShowEndState();
                                            String isSuccess2 = properties22.isSuccess();
                                            Unit unit28 = Unit.INSTANCE;
                                            Unit unit29 = Unit.INSTANCE;
                                            z11 = showReview;
                                            z12 = autoCapture;
                                            i6 = intValue2;
                                            list = list6;
                                            str11 = isSuccess2;
                                            str9 = str24;
                                            str8 = showEndState2;
                                            z10 = showInstruction4;
                                            num = barcodeSkipDelay2;
                                            z14 = disableBarcodeSkip;
                                            z13 = z23;
                                            z15 = validateSignature3;
                                            z9 = allowUpload;
                                        }
                                    }
                                    throw new IllegalStateException(("no documents found for " + str10).toString());
                                }
                                str8 = "no";
                                str9 = null;
                                z9 = false;
                                z10 = true;
                                z11 = false;
                                str10 = null;
                                list = null;
                                z12 = false;
                                i6 = 0;
                                z13 = false;
                                z14 = false;
                                num = null;
                                hashMap = null;
                                z15 = false;
                                z16 = true;
                                list2 = null;
                                str11 = null;
                                String selectedCountryName = this.hyperKycData.selectedCountryName();
                                if (selectedCountryName == null) {
                                    KycCountry kycCountry = this.selectedCountry;
                                    if (kycCountry == null) {
                                        z17 = z13;
                                        selectedCountryName = null;
                                        Map map4 = (Map) objectRef3.element;
                                        Intrinsics.checkNotNull(selectedCountryName);
                                        int i8 = i6;
                                        map4.put(WorkflowAPIParams.COUNTRY_NAME, selectedCountryName);
                                        boolean z24 = z12;
                                        ((Map) objectRef3.element).put("moduleSubType", moduleForId$hyperkyc_release.getSubType());
                                        ((Map) objectRef4.element).put(WorkflowAPIHeaders.COUNTRY_NAME, selectedCountryName);
                                        ((Map) objectRef4.element).putAll(defaultHeaders$hyperkyc_release);
                                        it = getCountries().iterator();
                                        while (true) {
                                            if (it.hasNext()) {
                                                obj = null;
                                            } else {
                                                obj = it.next();
                                                if (Intrinsics.areEqual(((KycCountry) obj).getId(), str10)) {
                                                }
                                            }
                                        }
                                        KycCountry kycCountry2 = (KycCountry) obj;
                                        documents = kycCountry2 == null ? kycCountry2.getDocuments() : null;
                                        Object obj2 = objectRef5.element;
                                        Intrinsics.checkNotNull(obj2);
                                        Iterable<IndexedValue> withIndex = CollectionsKt.withIndex((Iterable) obj2);
                                        final LinkedHashMap linkedHashMap10 = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(withIndex, 10)), 16));
                                        for (IndexedValue indexedValue : withIndex) {
                                            Pair pair3 = TuplesKt.to((String) indexedValue.component2(), Integer.valueOf(indexedValue.getIndex()));
                                            linkedHashMap10.put(pair3.getFirst(), pair3.getSecond());
                                        }
                                        if (documents != null) {
                                            ArrayList arrayList10 = new ArrayList();
                                            Iterator it10 = documents.iterator();
                                            while (it10.hasNext()) {
                                                Object next = it10.next();
                                                Iterator it11 = it10;
                                                Object obj3 = objectRef5.element;
                                                Intrinsics.checkNotNull(obj3);
                                                if (((List) obj3).contains(((KycDocument) next).getId())) {
                                                    arrayList10.add(next);
                                                }
                                                it10 = it11;
                                            }
                                            List sortedWith = CollectionsKt.sortedWith(arrayList10, new Comparator() { // from class: co.hyperverge.hyperkyc.ui.viewmodels.MainVM$createWorkflowUIState$$inlined$sortedBy$1
                                                /* JADX WARN: Multi-variable type inference failed */
                                                @Override // java.util.Comparator
                                                public final int compare(T t, T t2) {
                                                    return ComparisonsKt.compareValues((Integer) linkedHashMap10.get(((KycDocument) t).getId()), (Integer) linkedHashMap10.get(((KycDocument) t2).getId()));
                                                }
                                            });
                                            if (sortedWith != null) {
                                                arrayList2 = CollectionsKt.toMutableList((Collection) sortedWith);
                                                break;
                                            }
                                        }
                                        arrayList2 = new ArrayList();
                                        List list11 = arrayList2;
                                        hashMap2 = hashMap;
                                        if (hashMap2 != null) {
                                            Intrinsics.checkNotNull(str10);
                                            LinkedHashMap<String, WorkflowModule.Properties.DocumentsOverride> linkedHashMap11 = hashMap2.get(str10);
                                            if (linkedHashMap11 == null) {
                                                linkedHashMap11 = null;
                                            }
                                            LinkedHashMap<String, WorkflowModule.Properties.DocumentsOverride> linkedHashMap12 = linkedHashMap11;
                                            if (linkedHashMap12 != null) {
                                                Iterator<Map.Entry<String, WorkflowModule.Properties.DocumentsOverride>> it12 = linkedHashMap12.entrySet().iterator();
                                                while (it12.hasNext()) {
                                                    Map.Entry<String, WorkflowModule.Properties.DocumentsOverride> next2 = it12.next();
                                                    String key = next2.getKey();
                                                    WorkflowModule.Properties.DocumentsOverride value = next2.getValue();
                                                    Iterator it13 = list11.iterator();
                                                    while (true) {
                                                        if (it13.hasNext()) {
                                                            kycDocument = it13.next();
                                                            it2 = it12;
                                                            if (!Intrinsics.areEqual(key, ((KycDocument) kycDocument).getId())) {
                                                                it12 = it2;
                                                            }
                                                        } else {
                                                            it2 = it12;
                                                            kycDocument = 0;
                                                        }
                                                    }
                                                    KycDocument kycDocument2 = kycDocument;
                                                    KycDocument kycDocument$hyperkyc_release = value.toKycDocument$hyperkyc_release(key, kycDocument2);
                                                    if (kycDocument2 == null) {
                                                        list11.add(kycDocument$hyperkyc_release);
                                                        hashMap4 = hashMap2;
                                                    } else {
                                                        Iterator it14 = list11.iterator();
                                                        int i9 = 0;
                                                        while (true) {
                                                            if (it14.hasNext()) {
                                                                Iterator it15 = it14;
                                                                hashMap4 = hashMap2;
                                                                if (!Intrinsics.areEqual(((KycDocument) it14.next()).getId(), kycDocument2.getId())) {
                                                                    i9++;
                                                                    it14 = it15;
                                                                    hashMap2 = hashMap4;
                                                                }
                                                            } else {
                                                                hashMap4 = hashMap2;
                                                                i9 = -1;
                                                            }
                                                        }
                                                        list11.set(i9, kycDocument$hyperkyc_release);
                                                    }
                                                    it12 = it2;
                                                    hashMap2 = hashMap4;
                                                }
                                                hashMap3 = hashMap2;
                                                Unit unit30 = Unit.INSTANCE;
                                                String subType3 = moduleForId$hyperkyc_release.getSubType();
                                                Intrinsics.checkNotNull(str10);
                                                Intrinsics.checkNotNull(list);
                                                return new WorkflowUIState.PickDocument(moduleId, subType3, list11, str10, str9, z9, z10, z11, list2, list, z24, i8, z17, z14, num, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), (Map) objectRef3.element, (Map) objectRef4.element, hashMap3, z16, z15, str8, str11, shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                                            }
                                        }
                                        hashMap3 = hashMap2;
                                        String subType32 = moduleForId$hyperkyc_release.getSubType();
                                        Intrinsics.checkNotNull(str10);
                                        Intrinsics.checkNotNull(list);
                                        return new WorkflowUIState.PickDocument(moduleId, subType32, list11, str10, str9, z9, z10, z11, list2, list, z24, i8, z17, z14, num, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), (Map) objectRef3.element, (Map) objectRef4.element, hashMap3, z16, z15, str8, str11, shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                                    }
                                    selectedCountryName = kycCountry.getName();
                                }
                                z17 = z13;
                                Map map42 = (Map) objectRef3.element;
                                Intrinsics.checkNotNull(selectedCountryName);
                                int i82 = i6;
                                map42.put(WorkflowAPIParams.COUNTRY_NAME, selectedCountryName);
                                boolean z242 = z12;
                                ((Map) objectRef3.element).put("moduleSubType", moduleForId$hyperkyc_release.getSubType());
                                ((Map) objectRef4.element).put(WorkflowAPIHeaders.COUNTRY_NAME, selectedCountryName);
                                ((Map) objectRef4.element).putAll(defaultHeaders$hyperkyc_release);
                                it = getCountries().iterator();
                                while (true) {
                                    if (it.hasNext()) {
                                    }
                                }
                                KycCountry kycCountry22 = (KycCountry) obj;
                                if (kycCountry22 == null) {
                                }
                                Object obj22 = objectRef5.element;
                                Intrinsics.checkNotNull(obj22);
                                Iterable<IndexedValue> withIndex2 = CollectionsKt.withIndex((Iterable) obj22);
                                final Map linkedHashMap102 = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(withIndex2, 10)), 16));
                                while (r4.hasNext()) {
                                }
                                if (documents != null) {
                                }
                                arrayList2 = new ArrayList();
                                List list112 = arrayList2;
                                hashMap2 = hashMap;
                                if (hashMap2 != null) {
                                }
                                hashMap3 = hashMap2;
                                String subType322 = moduleForId$hyperkyc_release.getSubType();
                                Intrinsics.checkNotNull(str10);
                                Intrinsics.checkNotNull(list);
                                return new WorkflowUIState.PickDocument(moduleId, subType322, list112, str10, str9, z9, z10, z11, list2, list, z242, i82, z17, z14, num, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), (Map) objectRef3.element, (Map) objectRef4.element, hashMap3, z16, z15, str8, str11, shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 1224424441:
                            if (type.equals(WorkflowModule.TYPE_WEBVIEW)) {
                                WorkflowModule.Properties properties23 = moduleForId$hyperkyc_release.getProperties();
                                Intrinsics.checkNotNull(properties23);
                                String url9 = properties23.getUrl();
                                if (url9 == null || (stringInjectFromVariables$default2 = stringInjectFromVariables$default(this, url9, false, 1, null)) == null) {
                                    throw new IllegalStateException("url cannot be null".toString());
                                }
                                WorkflowModule.Properties.Data data = moduleForId$hyperkyc_release.getProperties().getData();
                                WorkflowModule.Properties.Data copy$default = data != null ? WorkflowModule.Properties.Data.copy$default(data, null, 1, null) : null;
                                if (copy$default != null) {
                                    LinkedHashMap<String, String> queryParams = copy$default.getQueryParams();
                                    if (queryParams != null) {
                                        LinkedHashMap<String, String> linkedHashMap13 = queryParams;
                                        ArrayList arrayList11 = new ArrayList(linkedHashMap13.size());
                                        for (Map.Entry<String, String> entry10 : linkedHashMap13.entrySet()) {
                                            arrayList11.add(TuplesKt.to(stringInjectFromVariables$default(this, entry10.getKey(), false, 1, null), stringInjectFromVariables$default(this, entry10.getValue(), false, 1, null)));
                                        }
                                        linkedHashMap = new LinkedHashMap<>((Map<? extends String, ? extends String>) MapsKt.toMap(arrayList11));
                                    }
                                    copy$default.setQueryParams(linkedHashMap);
                                }
                                return new WorkflowUIState.WebView(moduleId, moduleForId$hyperkyc_release.getSubType(), stringInjectFromVariables$default2, copy$default, moduleForId$hyperkyc_release.getProperties().getShowBackButton() || shouldShowBackButton(moduleForId$hyperkyc_release, false), moduleForId$hyperkyc_release.getProperties().getReloadOnRedirectFailure(), moduleForId$hyperkyc_release.getProperties().getOpenInAppBrowser(), getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 1352637108:
                            if (type.equals("countries")) {
                                WorkflowModule.Properties properties24 = moduleForId$hyperkyc_release.getProperties();
                                if (properties24 != null && (countries = properties24.getCountries()) != null) {
                                    List<String> list12 = countries;
                                    if (list12.isEmpty()) {
                                        list12 = null;
                                    }
                                    List<String> list13 = list12;
                                    if (list13 != null) {
                                        List<KycCountry> countries2 = getCountries();
                                        ArrayList arrayList12 = new ArrayList();
                                        for (Object obj4 : countries2) {
                                            if (list13.contains(((KycCountry) obj4).getId())) {
                                                arrayList12.add(obj4);
                                            }
                                        }
                                        return new WorkflowUIState.PickCountry(moduleId, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), arrayList12, shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                                    }
                                }
                                throw new IllegalStateException("countries cannot be null".toString());
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 1418861776:
                            if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT_V2)) {
                                Map<String, String> emptyMap7 = MapsKt.emptyMap();
                                WorkflowModule.Properties properties25 = moduleForId$hyperkyc_release.getProperties();
                                if (properties25 != null) {
                                    int allowedAttempts2 = properties25.getAllowedAttempts();
                                    emptyMap7 = properties25.getUserData();
                                    boolean validateSignature4 = properties25.getValidateSignature();
                                    videoStatementV2API = properties25.getLiveness();
                                    videoStatementV2API2 = properties25.getFaceMatch();
                                    videoStatementV2API3 = properties25.getSpeechToTextMatch();
                                    videoStatementV2API4 = properties25.getLogVideoStatement();
                                    videoStatementV2API5 = properties25.getVideoUpload();
                                    WorkflowModule.Properties.StatementV2 statement = properties25.getStatement();
                                    String showEndState3 = properties25.getShowEndState();
                                    String isSuccess3 = properties25.isSuccess();
                                    Unit unit31 = Unit.INSTANCE;
                                    Unit unit32 = Unit.INSTANCE;
                                    i7 = allowedAttempts2;
                                    z18 = validateSignature4;
                                    statementV2 = statement;
                                    str13 = isSuccess3;
                                    str12 = showEndState3;
                                } else {
                                    i7 = i;
                                    str12 = "no";
                                    z18 = false;
                                    str13 = null;
                                    videoStatementV2API = null;
                                    videoStatementV2API2 = null;
                                    videoStatementV2API3 = null;
                                    videoStatementV2API4 = null;
                                    videoStatementV2API5 = null;
                                    statementV2 = null;
                                }
                                LinkedHashMap linkedHashMap14 = new LinkedHashMap();
                                for (Iterator<Map.Entry<String, String>> it16 = emptyMap7.entrySet().iterator(); it16.hasNext(); it16 = it16) {
                                    Map.Entry<String, String> next3 = it16.next();
                                    linkedHashMap14.put(next3.getKey(), stringInjectFromVariables$default(this, next3.getValue(), false, 1, null));
                                    z22 = false;
                                    str21 = str21;
                                }
                                String str25 = str21;
                                boolean z25 = z22;
                                if (videoStatementV2API != null) {
                                    if (videoStatementV2API == null || (url6 = videoStatementV2API.getUrl()) == null || (str17 = stringInjectFromVariables$default(this, url6, z25, 1, null)) == null) {
                                        str17 = str25;
                                    }
                                    videoStatementV2API.setUrl(str17);
                                }
                                if (videoStatementV2API2 != null) {
                                    if (videoStatementV2API2 == null || (url5 = videoStatementV2API2.getUrl()) == null || (str16 = stringInjectFromVariables$default(this, url5, false, 1, null)) == null) {
                                        str16 = str25;
                                    }
                                    videoStatementV2API2.setUrl(str16);
                                }
                                if (videoStatementV2API3 != null) {
                                    if (videoStatementV2API3 == null || (url4 = videoStatementV2API3.getUrl()) == null || (str15 = stringInjectFromVariables$default(this, url4, false, 1, null)) == null) {
                                        str15 = str25;
                                    }
                                    videoStatementV2API3.setUrl(str15);
                                }
                                if (videoStatementV2API4 != null) {
                                    if (videoStatementV2API4 == null || (url3 = videoStatementV2API4.getUrl()) == null || (str14 = stringInjectFromVariables$default(this, url3, false, 1, null)) == null) {
                                        str14 = str25;
                                    }
                                    videoStatementV2API4.setUrl(str14);
                                }
                                if (videoStatementV2API5 != null) {
                                    videoStatementV2API5.setUrl((videoStatementV2API5 == null || (url2 = videoStatementV2API5.getUrl()) == null || (stringInjectFromVariables$default3 = stringInjectFromVariables$default(this, url2, false, 1, null)) == null) ? str25 : stringInjectFromVariables$default3);
                                }
                                if (videoStatementV2API != null && (allowedStatusCodes5 = videoStatementV2API.getAllowedStatusCodes()) != null) {
                                    Boolean.valueOf(allowedStatusCodes5.addAll(ResponsesKt.getALLOWED_SUCCESS_STATUS_CODES()));
                                }
                                if (videoStatementV2API2 != null && (allowedStatusCodes4 = videoStatementV2API2.getAllowedStatusCodes()) != null) {
                                    Boolean.valueOf(allowedStatusCodes4.addAll(ResponsesKt.getALLOWED_SUCCESS_STATUS_CODES()));
                                }
                                if (videoStatementV2API3 != null && (allowedStatusCodes3 = videoStatementV2API3.getAllowedStatusCodes()) != null) {
                                    Boolean.valueOf(allowedStatusCodes3.addAll(ResponsesKt.getALLOWED_SUCCESS_STATUS_CODES()));
                                }
                                if (videoStatementV2API4 != null && (allowedStatusCodes2 = videoStatementV2API4.getAllowedStatusCodes()) != null) {
                                    Boolean.valueOf(allowedStatusCodes2.addAll(ResponsesKt.getALLOWED_SUCCESS_STATUS_CODES()));
                                }
                                if (videoStatementV2API5 != null && (allowedStatusCodes = videoStatementV2API5.getAllowedStatusCodes()) != null) {
                                    Boolean.valueOf(allowedStatusCodes.addAll(ResponsesKt.getALLOWED_SUCCESS_STATUS_CODES()));
                                }
                                if (videoStatementV2API != null) {
                                    if (videoStatementV2API == null || (parameters5 = videoStatementV2API.getParameters()) == null || (arrayList7 = createWorkflowUIState$injectFromVariablesForParamsList(parameters5, this)) == null) {
                                        arrayList7 = new ArrayList();
                                    }
                                    videoStatementV2API.setParameters(arrayList7);
                                }
                                if (videoStatementV2API2 != null) {
                                    if (videoStatementV2API2 == null || (parameters4 = videoStatementV2API2.getParameters()) == null || (arrayList6 = createWorkflowUIState$injectFromVariablesForParamsList(parameters4, this)) == null) {
                                        arrayList6 = new ArrayList();
                                    }
                                    videoStatementV2API2.setParameters(arrayList6);
                                }
                                if (videoStatementV2API3 != null) {
                                    if (videoStatementV2API3 == null || (parameters3 = videoStatementV2API3.getParameters()) == null || (arrayList5 = createWorkflowUIState$injectFromVariablesForParamsList(parameters3, this)) == null) {
                                        arrayList5 = new ArrayList();
                                    }
                                    videoStatementV2API3.setParameters(arrayList5);
                                }
                                if (videoStatementV2API4 != null) {
                                    if (videoStatementV2API4 == null || (parameters2 = videoStatementV2API4.getParameters()) == null || (arrayList4 = createWorkflowUIState$injectFromVariablesForParamsList(parameters2, this)) == null) {
                                        arrayList4 = new ArrayList();
                                    }
                                    videoStatementV2API4.setParameters(arrayList4);
                                }
                                if (videoStatementV2API5 != null) {
                                    if (videoStatementV2API5 == null || (parameters = videoStatementV2API5.getParameters()) == null || (arrayList3 = createWorkflowUIState$injectFromVariablesForParamsList(parameters, this)) == null) {
                                        arrayList3 = new ArrayList();
                                    }
                                    videoStatementV2API5.setParameters(arrayList3);
                                }
                                return new WorkflowUIState.VideoStatementV2(moduleId, new VideoStatementV2Config(i7, linkedHashMap14, z18, videoStatementV2API, videoStatementV2API2, videoStatementV2API3, videoStatementV2API4, videoStatementV2API5, statementV2, str12, str13), str12, str13, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        case 1850541012:
                            if (type.equals(WorkflowModule.TYPE_START_SESSION_RECORDING)) {
                                WorkflowModule.Properties properties26 = moduleForId$hyperkyc_release.getProperties();
                                if (properties26 != null) {
                                    z20 = properties26.getCaptureAudio();
                                    z21 = properties26.getShowInstruction();
                                    z19 = properties26.getUploadSession();
                                    String url10 = properties26.getUrl();
                                    str18 = url10 != null ? stringInjectFromVariables$default(this, url10, false, 1, null) : null;
                                    String stopModuleId = properties26.getStopModuleId();
                                    Unit unit33 = Unit.INSTANCE;
                                    Unit unit34 = Unit.INSTANCE;
                                    str19 = stopModuleId;
                                } else {
                                    z19 = false;
                                    str18 = null;
                                    z20 = true;
                                    z21 = true;
                                    str19 = "";
                                }
                                return new WorkflowUIState.StartSessionRecording(moduleId, z20, z21, z19, str18, str19, getModuleTextConfig$hyperkyc_release(moduleForId$hyperkyc_release.getId(), moduleForId$hyperkyc_release.getSubType()), shouldShowBackButton$default(this, moduleForId$hyperkyc_release, false, 1, null));
                            }
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                        default:
                            throw new NotImplementedError("An operation is not implemented: " + ("invalid module type " + moduleForId$hyperkyc_release.getType()));
                    }
                }
            }
        }
        i = 3;
        moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(moduleId);
        if (moduleForId$hyperkyc_release != null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:115:0x013d, code lost:
    
        if (r0 == null) goto L55;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r9v4 */
    /* JADX WARN: Type inference failed for: r9v5, types: [int] */
    /* JADX WARN: Type inference failed for: r9v7 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final boolean generateWorkflowUIState(String moduleId) {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        List<WorkflowUIState> list = null;
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        boolean z = false;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "generateWorkflowUIState() called with: moduleId = " + moduleId;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "generateWorkflowUIState() called with: moduleId = " + moduleId;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(moduleId);
        if (moduleForId$hyperkyc_release == null) {
            throw new IllegalStateException(("Module not found for id: " + moduleId).toString());
        }
        WorkflowUIState createWorkflowUIState = createWorkflowUIState(moduleId);
        String type = moduleForId$hyperkyc_release.getType();
        ?? r9 = 1;
        if (Intrinsics.areEqual(type, "countries")) {
            WorkflowUIState.PickCountry pickCountry = createWorkflowUIState instanceof WorkflowUIState.PickCountry ? (WorkflowUIState.PickCountry) createWorkflowUIState : null;
            List<KycCountry> countries = pickCountry != null ? pickCountry.getCountries() : null;
            Integer valueOf = countries != null ? Integer.valueOf(countries.size()) : null;
            if (valueOf != null && valueOf.intValue() == 0) {
                throw new IllegalStateException("countries cannot be empty".toString());
            }
            if (valueOf != null && valueOf.intValue() == 1) {
                this.workflowExecutionOrder.add(moduleForId$hyperkyc_release.getId());
                AnalyticsLogger.INSTANCE.logModuleStartedEvent$hyperkyc_release(getAnalyticsForModule$hyperkyc_release(moduleForId$hyperkyc_release.getId(), AnalyticsLogger.Events.MODULE_STARTED));
                setSelectedCountry((KycCountry) CollectionsKt.first((List) countries));
                return true;
            }
        } else if (Intrinsics.areEqual(type, WorkflowModule.TYPE_DOCUMENT)) {
            Intrinsics.checkNotNull(createWorkflowUIState, "null cannot be cast to non-null type co.hyperverge.hyperkyc.ui.models.WorkflowUIState.PickDocument");
            WorkflowUIState.PickDocument pickDocument = (WorkflowUIState.PickDocument) createWorkflowUIState;
            int size = pickDocument.getDocuments().size();
            if (size == 0) {
                throw new IllegalStateException("documents cannot be empty".toString());
            }
            if (size == 1) {
                KycDocument kycDocument = (KycDocument) CollectionsKt.first((List) pickDocument.getDocuments());
                int i = 0;
                for (Object obj : kycDocument.getSides()) {
                    int i2 = i + 1;
                    if (i < 0) {
                        CollectionsKt.throwIndexOverflow();
                    }
                    String str4 = (String) obj;
                    HVDocConfig sideToDocConfig = HyperSnapBridgeKt.sideToDocConfig(str4, pickDocument.getAllowUpload(), pickDocument.getSupportedUploadFileTypes(), pickDocument.getShowInstruction(), pickDocument.getShowReview(), kycDocument.readBarcode(str4), pickDocument.getDisableBarcodeSkip(), pickDocument.getBarcodeSkipDelay(), pickDocument.getShouldAutoCapture(), pickDocument.getAutoCaptureDuration());
                    if (i == 0) {
                        sideToDocConfig.setShowModuleBackButton(shouldShowBackButton$default(this, moduleForId$hyperkyc_release, z, r9, list));
                    }
                    Map mutableMap = MapsKt.toMutableMap(pickDocument.getOcrParams());
                    Map mutableMap2 = MapsKt.toMutableMap(pickDocument.getOcrHeaders());
                    mutableMap.put("expectedDocumentSide", str4);
                    mutableMap2.put("expectedDocumentSide", str4);
                    KycDocument kycDocument2 = kycDocument;
                    boolean z2 = z;
                    boolean z3 = r9;
                    List<WorkflowUIState> list2 = list;
                    WorkflowUIState.DocCapture docCapture = new WorkflowUIState.DocCapture(moduleId, moduleForId$hyperkyc_release.getSubType(), kycDocument, sideToDocConfig, str4, pickDocument.getCountryId(), pickDocument.getUrl(), pickDocument.getAllowedStatusCodes(), (pickDocument.getDisableOCR() || kycDocument.disableOCR(str4)) ? r9 : z, this.textConfigData.get(moduleForId$hyperkyc_release.getSubType()), pickDocument.getOcrParams(), pickDocument.getOcrHeaders(), pickDocument.getEnableOverlay(), pickDocument.getValidateSignature(), pickDocument.getShowEndState(), pickDocument.isSuccess());
                    List<WorkflowUIState> list3 = this.workflowUIStateList;
                    if (list3 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list3 = list2;
                    }
                    list3.add(docCapture);
                    i = i2;
                    r9 = z3;
                    list = list2;
                    kycDocument = kycDocument2;
                    z = z2;
                }
                return z;
            }
        }
        if (createWorkflowUIState != null) {
            List<WorkflowUIState> list4 = this.workflowUIStateList;
            if (list4 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                list4 = null;
            }
            list4.add(createWorkflowUIState);
        }
        return false;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(21:160|(1:200)(1:164)|166|(1:168)(1:198)|(16:170|171|(1:173)|174|(1:178)|179|180|181|(1:183)|184|185|(1:187)(1:194)|188|(1:190)(1:193)|191|192)|199|171|(0)|174|(2:176|178)|179|180|181|(0)|184|185|(0)(0)|188|(0)(0)|191|192) */
    /* JADX WARN: Code restructure failed: missing block: B:121:0x0689, code lost:
    
        if (r0 != null) goto L315;
     */
    /* JADX WARN: Code restructure failed: missing block: B:165:0x079f, code lost:
    
        if (r0 != null) goto L366;
     */
    /* JADX WARN: Code restructure failed: missing block: B:196:0x0807, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:197:0x0808, code lost:
    
        r2 = kotlin.Result.INSTANCE;
        r0 = kotlin.Result.m1202constructorimpl(kotlin.ResultKt.createFailure(r0));
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x04d1, code lost:
    
        if (r10 != null) goto L242;
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x0315, code lost:
    
        if (r7 != null) goto L165;
     */
    /* JADX WARN: Removed duplicated region for block: B:114:0x048f  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x07c6  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x07fe A[Catch: all -> 0x0807, TryCatch #3 {all -> 0x0807, blocks: (B:181:0x07f5, B:183:0x07fe, B:184:0x0802), top: B:180:0x07f5 }] */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0818  */
    /* JADX WARN: Removed duplicated region for block: B:190:0x0826  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0829  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x081a  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x026c  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x01ff  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0226  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x028f  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x02d0 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x02d2  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final boolean flowForward() {
        String canonicalName;
        Object m1202constructorimpl;
        Object m1202constructorimpl2;
        String str;
        String str2;
        String canonicalName2;
        Object m1202constructorimpl3;
        String className;
        int i;
        String id2;
        WorkflowModule workflowModule;
        String str3;
        String evaluateNextStep;
        CharSequence charSequence;
        String str4;
        String str5;
        Object m1202constructorimpl4;
        String str6;
        String canonicalName3;
        String className2;
        String className3;
        String str7;
        String str8;
        Object m1202constructorimpl5;
        Object m1202constructorimpl6;
        String str9;
        String str10;
        String str11;
        Matcher matcher;
        String str12;
        String className4;
        String className5;
        String str13;
        String str14;
        Object m1202constructorimpl7;
        String canonicalName4;
        String className6;
        String str15;
        String className7;
        String str16;
        String className8;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className8 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className8, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        StringBuilder sb2 = new StringBuilder();
        sb2.append("flowForward() called, currentFlowId: ");
        try {
            Result.Companion companion2 = Result.INSTANCE;
            MainVM mainVM = this;
            String str17 = this.currentFlowId;
            if (str17 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                str17 = null;
            }
            m1202constructorimpl = Result.m1202constructorimpl(str17);
        } catch (Throwable th) {
            Result.Companion companion3 = Result.INSTANCE;
            m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
        }
        if (Result.m1208isFailureimpl(m1202constructorimpl)) {
            m1202constructorimpl = null;
        }
        sb2.append((String) m1202constructorimpl);
        String sb3 = sb2.toString();
        if (sb3 == null) {
            sb3 = "null ";
        }
        sb.append(sb3);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion4 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th2) {
                Result.Companion companion5 = Result.INSTANCE;
                m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                m1202constructorimpl2 = "";
            }
            String packageName = (String) m1202constructorimpl2;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "N/A";
                str2 = "null ";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = str;
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    String str18 = canonicalName2;
                    StringBuilder sb4 = new StringBuilder();
                    StringBuilder sb5 = new StringBuilder();
                    sb5.append("flowForward() called, currentFlowId: ");
                    try {
                        Result.Companion companion6 = Result.INSTANCE;
                        MainVM mainVM2 = this;
                        String str19 = this.currentFlowId;
                        if (str19 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str19 = null;
                        }
                        m1202constructorimpl3 = Result.m1202constructorimpl(str19);
                    } catch (Throwable th3) {
                        Result.Companion companion7 = Result.INSTANCE;
                        m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                        m1202constructorimpl3 = null;
                    }
                    sb5.append((String) m1202constructorimpl3);
                    String sb6 = sb5.toString();
                    if (sb6 == null) {
                        sb6 = str2;
                    }
                    sb4.append(sb6);
                    sb4.append(' ');
                    sb4.append("");
                    Log.println(4, str18, sb4.toString());
                }
                i = this.currentFlowPos;
                if (i >= 0) {
                    List<WorkflowUIState> list = this.workflowUIStateList;
                    if (list == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list = null;
                    }
                    if (i < list.size() - 1) {
                        int i2 = this.currentFlowPos;
                        this.currentFlowPos = i2 + 1;
                        this.previousFlowPos = i2;
                        this.currentFlowId = getCurrentModuleId$hyperkyc_release();
                        updateUiState();
                        return true;
                    }
                }
                if (this.currentFlowId == null) {
                    List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
                    if (modules != null) {
                        for (WorkflowModule workflowModule2 : modules) {
                            String id3 = workflowModule2.getId();
                            String str20 = this.currentFlowId;
                            if (str20 == null) {
                                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                str20 = null;
                            }
                            if (Intrinsics.areEqual(id3, str20)) {
                                if (workflowModule2 != null) {
                                    id2 = workflowModule2.getNext();
                                    Intrinsics.checkNotNull(id2);
                                }
                            }
                        }
                        throw new NoSuchElementException("Collection contains no element matching the predicate.");
                    }
                    id2 = null;
                    Intrinsics.checkNotNull(id2);
                } else {
                    List<WorkflowModule> modules2 = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
                    id2 = (modules2 == null || (workflowModule = (WorkflowModule) CollectionsKt.first((List) modules2)) == null) ? null : workflowModule.getId();
                    Intrinsics.checkNotNull(id2);
                }
                str3 = this.currentFlowId;
                if (str3 != null) {
                    if (str3 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str3 = null;
                    }
                    updateModulesAttempts(str3, id2);
                    if (Intrinsics.areEqual(id2, WorkflowModule.DISMISS_TO_PARENT)) {
                        Set<String> set = this.waitingForParentSet;
                        String str21 = this.currentFlowId;
                        if (str21 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str21 = null;
                        }
                        set.add(str21);
                        Map<String, Function0<Unit>> map = this.childModuleDataCallbacks;
                        String str22 = this.currentFlowId;
                        if (str22 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str16 = null;
                        } else {
                            str16 = str22;
                        }
                        Function0<Unit> function0 = map.get(str16);
                        if (function0 != null) {
                            function0.invoke();
                            Unit unit3 = Unit.INSTANCE;
                        }
                        resetToLastParentModule();
                        return true;
                    }
                }
                evaluateNextStep = evaluateNextStep(id2);
                if (evaluateNextStep != null) {
                    return false;
                }
                this.currentFlowId = evaluateNextStep;
                if (evaluateNextStep == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    evaluateNextStep = null;
                }
                if (generateWorkflowUIState(evaluateNextStep)) {
                    HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                    HyperLogger companion8 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb7 = new StringBuilder();
                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                    if (stackTraceElement3 == null || (className7 = stackTraceElement3.getClassName()) == null) {
                        charSequence = "co.hyperverge";
                        str13 = "Throwable().stackTrace";
                    } else {
                        charSequence = "co.hyperverge";
                        str13 = "Throwable().stackTrace";
                        str14 = StringsKt.substringAfterLast$default(className7, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls3 = getClass();
                    String canonicalName5 = cls3 != null ? cls3.getCanonicalName() : null;
                    str14 = canonicalName5 == null ? str : canonicalName5;
                    Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str14);
                    if (matcher4.find()) {
                        str14 = matcher4.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str14, "replaceAll(\"\")");
                    }
                    Unit unit4 = Unit.INSTANCE;
                    if (str14.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str14 = str14.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str14, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb7.append(str14);
                    sb7.append(" - ");
                    StringBuilder sb8 = new StringBuilder();
                    sb8.append("flowForward: flowing forward from ");
                    String str23 = this.currentFlowId;
                    if (str23 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str23 = null;
                    }
                    sb8.append(str23);
                    String sb9 = sb8.toString();
                    if (sb9 == null) {
                        sb9 = str2;
                    }
                    sb7.append(sb9);
                    sb7.append(' ');
                    sb7.append("");
                    companion8.log(level2, sb7.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion9 = Result.INSTANCE;
                            Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl7 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                        } catch (Throwable th4) {
                            Result.Companion companion10 = Result.INSTANCE;
                            m1202constructorimpl7 = Result.m1202constructorimpl(ResultKt.createFailure(th4));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl7)) {
                            m1202constructorimpl7 = "";
                        }
                        String packageName2 = (String) m1202constructorimpl7;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                            if (StringsKt.contains$default((CharSequence) packageName2, charSequence, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                str6 = str13;
                                Intrinsics.checkNotNullExpressionValue(stackTrace4, str6);
                                StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                if (stackTraceElement4 == null || (className6 = stackTraceElement4.getClassName()) == null || (canonicalName4 = StringsKt.substringAfterLast$default(className6, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls4 = getClass();
                                    canonicalName4 = cls4 != null ? cls4.getCanonicalName() : null;
                                    if (canonicalName4 == null) {
                                        canonicalName4 = str;
                                    }
                                }
                                Matcher matcher5 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName4);
                                if (matcher5.find()) {
                                    canonicalName4 = matcher5.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(canonicalName4, "replaceAll(\"\")");
                                }
                                Unit unit5 = Unit.INSTANCE;
                                if (canonicalName4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    canonicalName4 = canonicalName4.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(canonicalName4, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb10 = new StringBuilder();
                                StringBuilder sb11 = new StringBuilder();
                                sb11.append("flowForward: flowing forward from ");
                                String str24 = this.currentFlowId;
                                if (str24 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str24 = null;
                                }
                                sb11.append(str24);
                                String sb12 = sb11.toString();
                                if (sb12 == null) {
                                    sb12 = str2;
                                }
                                sb10.append(sb12);
                                sb10.append(' ');
                                sb10.append("");
                                Log.println(3, canonicalName4, sb10.toString());
                                str15 = this.currentFlowId;
                                if (str15 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str15 = null;
                                }
                                addToModuleExecutionOrder(str15);
                                flowForward();
                            }
                        }
                    }
                    str6 = str13;
                    str15 = this.currentFlowId;
                    if (str15 == null) {
                    }
                    addToModuleExecutionOrder(str15);
                    flowForward();
                } else {
                    charSequence = "co.hyperverge";
                    HyperLogger.Level level3 = HyperLogger.Level.DEBUG;
                    HyperLogger companion11 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb13 = new StringBuilder();
                    StackTraceElement[] stackTrace5 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace5, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement5 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5);
                    if (stackTraceElement5 == null || (className3 = stackTraceElement5.getClassName()) == null) {
                        str4 = "Throwable().stackTrace";
                    } else {
                        str4 = "Throwable().stackTrace";
                        str5 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls5 = getClass();
                    String canonicalName6 = cls5 != null ? cls5.getCanonicalName() : null;
                    str5 = canonicalName6 == null ? str : canonicalName6;
                    Matcher matcher6 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str5);
                    if (matcher6.find()) {
                        str5 = matcher6.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str5, "replaceAll(\"\")");
                    }
                    Unit unit6 = Unit.INSTANCE;
                    if (str5.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str5 = str5.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str5, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb13.append(str5);
                    sb13.append(" - ");
                    StringBuilder sb14 = new StringBuilder();
                    sb14.append("flowForward: updating UIState for ");
                    String str25 = this.currentFlowId;
                    if (str25 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str25 = null;
                    }
                    sb14.append(str25);
                    String sb15 = sb14.toString();
                    if (sb15 == null) {
                        sb15 = str2;
                    }
                    sb13.append(sb15);
                    sb13.append(' ');
                    sb13.append("");
                    companion11.log(level3, sb13.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion12 = Result.INSTANCE;
                            Object invoke3 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke3, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl4 = Result.m1202constructorimpl(((Application) invoke3).getPackageName());
                        } catch (Throwable th5) {
                            Result.Companion companion13 = Result.INSTANCE;
                            m1202constructorimpl4 = Result.m1202constructorimpl(ResultKt.createFailure(th5));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl4)) {
                            m1202constructorimpl4 = "";
                        }
                        String packageName3 = (String) m1202constructorimpl4;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(packageName3, "packageName");
                            if (StringsKt.contains$default((CharSequence) packageName3, charSequence, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace6 = new Throwable().getStackTrace();
                                str6 = str4;
                                Intrinsics.checkNotNullExpressionValue(stackTrace6, str6);
                                StackTraceElement stackTraceElement6 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace6);
                                if (stackTraceElement6 == null || (className2 = stackTraceElement6.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls6 = getClass();
                                    canonicalName3 = cls6 != null ? cls6.getCanonicalName() : null;
                                    if (canonicalName3 == null) {
                                        canonicalName3 = str;
                                    }
                                }
                                Matcher matcher7 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                                if (matcher7.find()) {
                                    canonicalName3 = matcher7.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                                }
                                Unit unit7 = Unit.INSTANCE;
                                if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    canonicalName3 = canonicalName3.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb16 = new StringBuilder();
                                StringBuilder sb17 = new StringBuilder();
                                sb17.append("flowForward: updating UIState for ");
                                String str26 = this.currentFlowId;
                                if (str26 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str26 = null;
                                }
                                sb17.append(str26);
                                String sb18 = sb17.toString();
                                if (sb18 == null) {
                                    sb18 = str2;
                                }
                                sb16.append(sb18);
                                sb16.append(' ');
                                sb16.append("");
                                Log.println(3, canonicalName3, sb16.toString());
                                int i3 = this.currentFlowPos;
                                this.currentFlowPos = i3 + 1;
                                this.previousFlowPos = i3;
                                this.currentFlowId = getCurrentModuleId$hyperkyc_release();
                                updateUiState();
                            }
                        }
                    }
                    str6 = str4;
                    int i32 = this.currentFlowPos;
                    this.currentFlowPos = i32 + 1;
                    this.previousFlowPos = i32;
                    this.currentFlowId = getCurrentModuleId$hyperkyc_release();
                    updateUiState();
                }
                HyperLogger.Level level4 = HyperLogger.Level.DEBUG;
                HyperLogger companion14 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb19 = new StringBuilder();
                StackTraceElement[] stackTrace7 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace7, str6);
                StackTraceElement stackTraceElement7 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace7);
                if (stackTraceElement7 == null || (className5 = stackTraceElement7.getClassName()) == null) {
                    str7 = str6;
                } else {
                    str7 = str6;
                    str8 = StringsKt.substringAfterLast$default(className5, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                }
                Class<?> cls7 = getClass();
                str8 = cls7 != null ? cls7.getCanonicalName() : null;
                if (str8 == null) {
                    str8 = str;
                }
                Matcher matcher8 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                if (matcher8.find()) {
                    str8 = matcher8.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(str8, "replaceAll(\"\")");
                }
                Unit unit8 = Unit.INSTANCE;
                if (str8.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    str8 = str8.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb19.append(str8);
                sb19.append(" - ");
                StringBuilder sb20 = new StringBuilder();
                sb20.append("flowForward() finished, currentFlowId: ");
                try {
                    Result.Companion companion15 = Result.INSTANCE;
                    MainVM mainVM3 = this;
                    String str27 = this.currentFlowId;
                    if (str27 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str27 = null;
                    }
                    m1202constructorimpl5 = Result.m1202constructorimpl(str27);
                } catch (Throwable th6) {
                    Result.Companion companion16 = Result.INSTANCE;
                    m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th6));
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl5)) {
                    m1202constructorimpl5 = null;
                }
                sb20.append((String) m1202constructorimpl5);
                String sb21 = sb20.toString();
                if (sb21 == null) {
                    sb21 = str2;
                }
                sb19.append(sb21);
                sb19.append(' ');
                sb19.append("");
                companion14.log(level4, sb19.toString());
                if (CoreExtsKt.isRelease()) {
                    return true;
                }
                try {
                    Result.Companion companion17 = Result.INSTANCE;
                    Object invoke4 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke4, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl6 = Result.m1202constructorimpl(((Application) invoke4).getPackageName());
                } catch (Throwable th7) {
                    Result.Companion companion18 = Result.INSTANCE;
                    m1202constructorimpl6 = Result.m1202constructorimpl(ResultKt.createFailure(th7));
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl6)) {
                    m1202constructorimpl6 = "";
                }
                String packageName4 = (String) m1202constructorimpl6;
                if (!CoreExtsKt.isDebug()) {
                    return true;
                }
                Intrinsics.checkNotNullExpressionValue(packageName4, "packageName");
                if (!StringsKt.contains$default((CharSequence) packageName4, charSequence, false, 2, (Object) null)) {
                    return true;
                }
                StackTraceElement[] stackTrace8 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace8, str7);
                StackTraceElement stackTraceElement8 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace8);
                if (stackTraceElement8 == null || (className4 = stackTraceElement8.getClassName()) == null) {
                    str9 = null;
                } else {
                    str9 = null;
                    str10 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                }
                Class<?> cls8 = getClass();
                str10 = cls8 != null ? cls8.getCanonicalName() : str9;
                if (str10 == null) {
                    str11 = str;
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                    if (matcher.find()) {
                        str11 = matcher.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str11, "replaceAll(\"\")");
                    }
                    Unit unit9 = Unit.INSTANCE;
                    if (str11.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str11 = str11.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb22 = new StringBuilder();
                    StringBuilder sb23 = new StringBuilder();
                    sb23.append("flowForward() finished, currentFlowId: ");
                    Result.Companion companion19 = Result.INSTANCE;
                    MainVM mainVM4 = this;
                    str12 = this.currentFlowId;
                    if (str12 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str12 = str9;
                    }
                    Object obj = Result.m1202constructorimpl(str12);
                    sb23.append((String) (!Result.m1208isFailureimpl(obj) ? str9 : obj));
                    String sb24 = sb23.toString();
                    sb22.append(sb24 != null ? str2 : sb24);
                    sb22.append(' ');
                    sb22.append("");
                    Log.println(4, str11, sb22.toString());
                    return true;
                }
                str11 = str10;
                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                if (matcher.find()) {
                }
                Unit unit92 = Unit.INSTANCE;
                if (str11.length() > 23) {
                    str11 = str11.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                StringBuilder sb222 = new StringBuilder();
                StringBuilder sb232 = new StringBuilder();
                sb232.append("flowForward() finished, currentFlowId: ");
                Result.Companion companion192 = Result.INSTANCE;
                MainVM mainVM42 = this;
                str12 = this.currentFlowId;
                if (str12 == null) {
                }
                Object obj2 = Result.m1202constructorimpl(str12);
                sb232.append((String) (!Result.m1208isFailureimpl(obj2) ? str9 : obj2));
                String sb242 = sb232.toString();
                sb222.append(sb242 != null ? str2 : sb242);
                sb222.append(' ');
                sb222.append("");
                Log.println(4, str11, sb222.toString());
                return true;
            }
        }
        str = "N/A";
        str2 = "null ";
        i = this.currentFlowPos;
        if (i >= 0) {
        }
        if (this.currentFlowId == null) {
        }
        str3 = this.currentFlowId;
        if (str3 != null) {
        }
        evaluateNextStep = evaluateNextStep(id2);
        if (evaluateNextStep != null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:168:0x03d6, code lost:
    
        if (r15 != null) goto L160;
     */
    /* JADX WARN: Code restructure failed: missing block: B:35:0x0220, code lost:
    
        if (r9 != null) goto L92;
     */
    /* JADX WARN: Code restructure failed: missing block: B:91:0x0684, code lost:
    
        if (r0 != null) goto L268;
     */
    /* JADX WARN: Removed duplicated region for block: B:119:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x059e  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x05a6  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x05a3  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x03e3  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x03eb  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x03ee  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x03e8  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x0400  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x0449  */
    /* JADX WARN: Removed duplicated region for block: B:190:0x0465 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x05b9  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x05f6  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x0612 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void addToModuleExecutionOrder(String moduleId) {
        String canonicalName;
        Object m1202constructorimpl;
        CharSequence charSequence;
        String str;
        String canonicalName2;
        String className;
        boolean z;
        boolean contains;
        boolean areEqual;
        StackTraceElement stackTraceElement;
        String str2;
        String str3;
        String str4;
        Matcher matcher;
        String str5;
        Object m1202constructorimpl2;
        String str6;
        String str7;
        String canonicalName3;
        String className2;
        String className3;
        StackTraceElement stackTraceElement2;
        String canonicalName4;
        Matcher matcher2;
        String str8;
        Object m1202constructorimpl3;
        String str9;
        String str10;
        String className4;
        String className5;
        String str11;
        String str12;
        Object m1202constructorimpl4;
        String str13;
        String canonicalName5;
        String className6;
        String className7;
        String className8;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement3 == null || (className8 = stackTraceElement3.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className8, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher3.find()) {
            canonicalName = matcher3.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str14 = "addToModuleExecutionOrder() called with: moduleId = [" + moduleId + ']';
        if (str14 == null) {
            str14 = "null ";
        }
        sb.append(str14);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                charSequence = "co.hyperverge";
                str = "N/A";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement4 == null || (className = stackTraceElement4.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = str;
                        }
                    }
                    Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher4.find()) {
                        canonicalName2 = matcher4.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str15 = "addToModuleExecutionOrder() called with: moduleId = [" + moduleId + ']';
                    if (str15 == null) {
                        str15 = "null ";
                    }
                    sb2.append(str15);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
                WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(moduleId);
                z = moduleForId$hyperkyc_release == null && moduleForId$hyperkyc_release.isChild$hyperkyc_release();
                contains = ArraysKt.contains((String[]) ArraysKt.plus((Object[]) WorkflowModule.INSTANCE.getEND_STATES$hyperkyc_release(), (Collection) HyperKycStatus.INSTANCE.getALL_STATUSES_LIST$hyperkyc_release()), moduleId);
                areEqual = Intrinsics.areEqual(CollectionsKt.lastOrNull((List) this.moduleExecutionOrder), moduleId);
                if (z && !contains && !areEqual) {
                    HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                    HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb3 = new StringBuilder();
                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement5 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                    if (stackTraceElement5 == null || (className7 = stackTraceElement5.getClassName()) == null) {
                        str11 = "Throwable().stackTrace";
                    } else {
                        str11 = "Throwable().stackTrace";
                        str12 = StringsKt.substringAfterLast$default(className7, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls3 = getClass();
                    String canonicalName6 = cls3 != null ? cls3.getCanonicalName() : null;
                    str12 = canonicalName6 == null ? str : canonicalName6;
                    Matcher matcher5 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str12);
                    if (matcher5.find()) {
                        str12 = matcher5.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str12, "replaceAll(\"\")");
                    }
                    Unit unit3 = Unit.INSTANCE;
                    if (str12.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str12 = str12.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str12, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb3.append(str12);
                    sb3.append(" - ");
                    String str16 = "addToModuleExecutionOrder() called: adding moduleId = [" + moduleId + "], to moduleExecutionOrder: " + this.moduleExecutionOrder;
                    if (str16 == null) {
                        str16 = "null ";
                    }
                    sb3.append(str16);
                    sb3.append(' ');
                    sb3.append("");
                    companion4.log(level2, sb3.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion5 = Result.INSTANCE;
                            Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl4 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                        } catch (Throwable th2) {
                            Result.Companion companion6 = Result.INSTANCE;
                            m1202constructorimpl4 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl4)) {
                            m1202constructorimpl4 = "";
                        }
                        String packageName2 = (String) m1202constructorimpl4;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                            if (StringsKt.contains$default((CharSequence) packageName2, charSequence, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                str13 = str11;
                                Intrinsics.checkNotNullExpressionValue(stackTrace4, str13);
                                StackTraceElement stackTraceElement6 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                if (stackTraceElement6 == null || (className6 = stackTraceElement6.getClassName()) == null || (canonicalName5 = StringsKt.substringAfterLast$default(className6, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls4 = getClass();
                                    canonicalName5 = cls4 != null ? cls4.getCanonicalName() : null;
                                    if (canonicalName5 == null) {
                                        canonicalName5 = str;
                                    }
                                }
                                Matcher matcher6 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName5);
                                if (matcher6.find()) {
                                    canonicalName5 = matcher6.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(canonicalName5, "replaceAll(\"\")");
                                }
                                Unit unit4 = Unit.INSTANCE;
                                if (canonicalName5.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    canonicalName5 = canonicalName5.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(canonicalName5, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb4 = new StringBuilder();
                                String str17 = "addToModuleExecutionOrder() called: adding moduleId = [" + moduleId + "], to moduleExecutionOrder: " + this.moduleExecutionOrder;
                                if (str17 == null) {
                                    str17 = "null ";
                                }
                                sb4.append(str17);
                                sb4.append(' ');
                                sb4.append("");
                                Log.println(3, canonicalName5, sb4.toString());
                                this.moduleExecutionOrder.add(moduleId);
                                str7 = str13;
                                str6 = "packageName";
                            }
                        }
                    }
                    str13 = str11;
                    this.moduleExecutionOrder.add(moduleId);
                    str7 = str13;
                    str6 = "packageName";
                } else {
                    HyperLogger.Level level3 = HyperLogger.Level.DEBUG;
                    HyperLogger companion7 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb5 = new StringBuilder();
                    StackTraceElement[] stackTrace5 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace5, "Throwable().stackTrace");
                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5);
                    if (stackTraceElement != null || (className3 = stackTraceElement.getClassName()) == null) {
                        str2 = "Throwable().stackTrace";
                        str3 = "packageName";
                    } else {
                        str2 = "Throwable().stackTrace";
                        str3 = "packageName";
                        str4 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls5 = getClass();
                    String canonicalName7 = cls5 == null ? cls5.getCanonicalName() : null;
                    str4 = canonicalName7 != null ? str : canonicalName7;
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                    if (matcher.find()) {
                        str4 = matcher.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                    }
                    Unit unit5 = Unit.INSTANCE;
                    if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str4 = str4.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb5.append(str4);
                    sb5.append(" - ");
                    str5 = "addToModuleExecutionOrder: isChildModule: " + z + ", isEndState:" + contains + ", isDuplicate: " + areEqual;
                    if (str5 == null) {
                        str5 = "null ";
                    }
                    sb5.append(str5);
                    sb5.append(' ');
                    sb5.append("");
                    companion7.log(level3, sb5.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion8 = Result.INSTANCE;
                            Object invoke3 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke3, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke3).getPackageName());
                        } catch (Throwable th3) {
                            Result.Companion companion9 = Result.INSTANCE;
                            m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                            m1202constructorimpl2 = "";
                        }
                        String str18 = (String) m1202constructorimpl2;
                        if (CoreExtsKt.isDebug()) {
                            str6 = str3;
                            Intrinsics.checkNotNullExpressionValue(str18, str6);
                            if (StringsKt.contains$default((CharSequence) str18, charSequence, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace6 = new Throwable().getStackTrace();
                                str7 = str2;
                                Intrinsics.checkNotNullExpressionValue(stackTrace6, str7);
                                StackTraceElement stackTraceElement7 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace6);
                                if (stackTraceElement7 == null || (className2 = stackTraceElement7.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls6 = getClass();
                                    canonicalName3 = cls6 != null ? cls6.getCanonicalName() : null;
                                    if (canonicalName3 == null) {
                                        canonicalName3 = str;
                                    }
                                }
                                Matcher matcher7 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                                if (matcher7.find()) {
                                    canonicalName3 = matcher7.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                                }
                                Unit unit6 = Unit.INSTANCE;
                                if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    canonicalName3 = canonicalName3.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb6 = new StringBuilder();
                                String str19 = "addToModuleExecutionOrder: isChildModule: " + z + ", isEndState:" + contains + ", isDuplicate: " + areEqual;
                                if (str19 == null) {
                                    str19 = "null ";
                                }
                                sb6.append(str19);
                                sb6.append(' ');
                                sb6.append("");
                                Log.println(3, canonicalName3, sb6.toString());
                            } else {
                                str7 = str2;
                            }
                        }
                    }
                    str7 = str2;
                    str6 = str3;
                }
                HyperLogger.Level level4 = HyperLogger.Level.DEBUG;
                HyperLogger companion10 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb7 = new StringBuilder();
                StackTraceElement[] stackTrace7 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace7, str7);
                stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace7);
                if (stackTraceElement2 != null || (className5 = stackTraceElement2.getClassName()) == null || (canonicalName4 = StringsKt.substringAfterLast$default(className5, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                    Class<?> cls7 = getClass();
                    canonicalName4 = cls7 == null ? cls7.getCanonicalName() : null;
                    if (canonicalName4 == null) {
                        canonicalName4 = str;
                    }
                }
                matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName4);
                if (matcher2.find()) {
                    canonicalName4 = matcher2.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(canonicalName4, "replaceAll(\"\")");
                }
                Unit unit7 = Unit.INSTANCE;
                if (canonicalName4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    canonicalName4 = canonicalName4.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(canonicalName4, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb7.append(canonicalName4);
                sb7.append(" - ");
                str8 = "addToModuleExecutionOrder: updated moduleExecutionOrder: " + this.moduleExecutionOrder;
                if (str8 == null) {
                    str8 = "null ";
                }
                sb7.append(str8);
                sb7.append(' ');
                sb7.append("");
                companion10.log(level4, sb7.toString());
                if (CoreExtsKt.isRelease()) {
                    try {
                        Result.Companion companion11 = Result.INSTANCE;
                        Object invoke4 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke4, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke4).getPackageName());
                    } catch (Throwable th4) {
                        Result.Companion companion12 = Result.INSTANCE;
                        m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th4));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                        m1202constructorimpl3 = "";
                    }
                    String str20 = (String) m1202constructorimpl3;
                    if (CoreExtsKt.isDebug()) {
                        Intrinsics.checkNotNullExpressionValue(str20, str6);
                        if (StringsKt.contains$default((CharSequence) str20, charSequence, false, 2, (Object) null)) {
                            StackTraceElement[] stackTrace8 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace8, str7);
                            StackTraceElement stackTraceElement8 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace8);
                            if (stackTraceElement8 == null || (className4 = stackTraceElement8.getClassName()) == null) {
                                str9 = null;
                            } else {
                                str9 = null;
                                str10 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                            }
                            Class<?> cls8 = getClass();
                            String canonicalName8 = cls8 != null ? cls8.getCanonicalName() : str9;
                            str10 = canonicalName8 == null ? str : canonicalName8;
                            Matcher matcher8 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str10);
                            if (matcher8.find()) {
                                str10 = matcher8.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str10, "replaceAll(\"\")");
                            }
                            Unit unit8 = Unit.INSTANCE;
                            if (str10.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str10 = str10.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str10, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            StringBuilder sb8 = new StringBuilder();
                            String str21 = "addToModuleExecutionOrder: updated moduleExecutionOrder: " + this.moduleExecutionOrder;
                            if (str21 == null) {
                                str21 = "null ";
                            }
                            sb8.append(str21);
                            sb8.append(' ');
                            sb8.append("");
                            Log.println(3, str10, sb8.toString());
                            return;
                        }
                        return;
                    }
                    return;
                }
                return;
            }
        }
        charSequence = "co.hyperverge";
        str = "N/A";
        WorkflowModule moduleForId$hyperkyc_release2 = getModuleForId$hyperkyc_release(moduleId);
        if (moduleForId$hyperkyc_release2 == null) {
        }
        contains = ArraysKt.contains((String[]) ArraysKt.plus((Object[]) WorkflowModule.INSTANCE.getEND_STATES$hyperkyc_release(), (Collection) HyperKycStatus.INSTANCE.getALL_STATUSES_LIST$hyperkyc_release()), moduleId);
        areEqual = Intrinsics.areEqual(CollectionsKt.lastOrNull((List) this.moduleExecutionOrder), moduleId);
        if (z) {
        }
        HyperLogger.Level level32 = HyperLogger.Level.DEBUG;
        HyperLogger companion72 = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb52 = new StringBuilder();
        StackTraceElement[] stackTrace52 = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace52, "Throwable().stackTrace");
        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace52);
        if (stackTraceElement != null) {
        }
        str2 = "Throwable().stackTrace";
        str3 = "packageName";
        Class<?> cls52 = getClass();
        if (cls52 == null) {
        }
        if (canonicalName7 != null) {
        }
        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
        if (matcher.find()) {
        }
        Unit unit52 = Unit.INSTANCE;
        if (str4.length() > 23) {
            str4 = str4.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb52.append(str4);
        sb52.append(" - ");
        str5 = "addToModuleExecutionOrder: isChildModule: " + z + ", isEndState:" + contains + ", isDuplicate: " + areEqual;
        if (str5 == null) {
        }
        sb52.append(str5);
        sb52.append(' ');
        sb52.append("");
        companion72.log(level32, sb52.toString());
        if (!CoreExtsKt.isRelease()) {
        }
        str7 = str2;
        str6 = str3;
        HyperLogger.Level level42 = HyperLogger.Level.DEBUG;
        HyperLogger companion102 = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb72 = new StringBuilder();
        StackTraceElement[] stackTrace72 = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace72, str7);
        stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace72);
        if (stackTraceElement2 != null) {
        }
        Class<?> cls72 = getClass();
        if (cls72 == null) {
        }
        if (canonicalName4 == null) {
        }
        matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName4);
        if (matcher2.find()) {
        }
        Unit unit72 = Unit.INSTANCE;
        if (canonicalName4.length() > 23) {
            canonicalName4 = canonicalName4.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName4, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb72.append(canonicalName4);
        sb72.append(" - ");
        str8 = "addToModuleExecutionOrder: updated moduleExecutionOrder: " + this.moduleExecutionOrder;
        if (str8 == null) {
        }
        sb72.append(str8);
        sb72.append(' ');
        sb72.append("");
        companion102.log(level42, sb72.toString());
        if (CoreExtsKt.isRelease()) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:46:0x0240, code lost:
    
        if (r0.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_DYNAMIC_FORM_V2) == false) goto L131;
     */
    /* JADX WARN: Code restructure failed: missing block: B:47:0x0296, code lost:
    
        updateFormData$hyperkyc_release$default(r17, null, null, true, 3, null);
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x024a, code lost:
    
        if (r0.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_FORM) == false) goto L131;
     */
    /* JADX WARN: Code restructure failed: missing block: B:60:0x0293, code lost:
    
        if (r0.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_DYNAMIC_FORM) == false) goto L131;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void updateModulesAttempts(String currentFlowId, String nextStep) {
        String canonicalName;
        Object m1202constructorimpl;
        String className;
        String substringAfterLast$default;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "updateModulesAttempts() called with: currentFlowId = " + currentFlowId + ", nextStep = " + nextStep;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 != null) {
                            str = canonicalName2;
                        }
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "updateModulesAttempts() called with: currentFlowId = " + currentFlowId + ", nextStep = " + nextStep;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(currentFlowId);
        if (moduleForId$hyperkyc_release == null) {
            throw new IllegalStateException(("Module not found for id: " + currentFlowId).toString());
        }
        if ((moduleForId$hyperkyc_release.getUiStyle() == null && isChildModule(nextStep)) ? false : true) {
            String type = moduleForId$hyperkyc_release.getType();
            switch (type.hashCode()) {
                case -1768353996:
                    if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT)) {
                        updateVideoStatementData$hyperkyc_release$default(this, null, null, true, 3, null);
                        break;
                    }
                    break;
                case -333584256:
                    if (type.equals("barcode")) {
                        updateBarcodeData$hyperkyc_release$default(this, null, null, null, true, 7, null);
                        break;
                    }
                    break;
                case -259085917:
                    break;
                case 96794:
                    if (type.equals(WorkflowModule.TYPE_API)) {
                        updateApiCallData$hyperkyc_release$default(this, null, null, null, true, 7, null);
                        break;
                    }
                    break;
                case 108971:
                    if (type.equals(WorkflowModule.TYPE_NFC)) {
                        updateNFCData$hyperkyc_release$default(this, null, null, true, 3, null);
                        break;
                    }
                    break;
                case 3135069:
                    if (type.equals("face")) {
                        updateFaceData$hyperkyc_release$default(this, null, null, true, 3, null);
                        break;
                    }
                    break;
                case 3148996:
                    break;
                case 126539647:
                    break;
                case 700214324:
                    if (type.equals(WorkflowModule.TYPE_STOP_SESSION_RECORDING)) {
                        updateSessionData$hyperkyc_release$default(this, null, null, true, 3, null);
                        break;
                    }
                    break;
                case 861720859:
                    if (type.equals(WorkflowModule.TYPE_DOCUMENT)) {
                        updateDocData$hyperkyc_release$default(this, null, null, true, 3, null);
                        break;
                    }
                    break;
                case 1224424441:
                    if (type.equals(WorkflowModule.TYPE_WEBVIEW)) {
                        updateWebviewData$hyperkyc_release$default(this, null, null, true, 3, null);
                        break;
                    }
                    break;
                case 1352637108:
                    if (type.equals("countries")) {
                        updateCountryResult$hyperkyc_release$default(this, null, true, 1, null);
                        break;
                    }
                    break;
                case 1418861776:
                    if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT_V2)) {
                        updateVideoStatementV2Data$hyperkyc_release$default(this, null, null, true, 3, null);
                        break;
                    }
                    break;
            }
            AnalyticsLogger.INSTANCE.logModuleEndedEvent$hyperkyc_release(getAnalyticsForModule$hyperkyc_release(currentFlowId, AnalyticsLogger.Events.MODULE_ENDED));
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:28:0x01d7, code lost:
    
        if (isChildModule(r0) == false) goto L92;
     */
    /* JADX WARN: Code restructure failed: missing block: B:43:0x020c, code lost:
    
        if (r0.getUiStyle() != null) goto L79;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final boolean isChildModule(String id2) {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        boolean z;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str = "isChildModule() called with: id = " + id2;
        if (str == null) {
            str = "null ";
        }
        sb.append(str);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher2.find()) {
                        canonicalName2 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str2 = "isChildModule() called with: id = " + id2;
                    if (str2 == null) {
                        str2 = "null ";
                    }
                    sb2.append(str2);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
            }
        }
        if (StringsKt.startsWith$default(id2, WorkflowModule.PREFIX_CONDITION, false, 2, (Object) null)) {
            LinkedHashMap<String, WorkflowCondition> conditions = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getConditions();
            WorkflowCondition workflowCondition = conditions != null ? conditions.get(id2) : null;
            Intrinsics.checkNotNull(workflowCondition);
            z = false;
            Object processCondition$default = processCondition$default(this, id2, workflowCondition, false, false, 12, null);
            Intrinsics.checkNotNull(processCondition$default, "null cannot be cast to non-null type kotlin.String");
            String str3 = (String) processCondition$default;
            if (Intrinsics.areEqual(str3, WorkflowModule.DISMISS_TO_PARENT)) {
            }
            return true;
        }
        z = false;
        if (!CollectionsKt.listOf((Object[]) new String[]{HyperKycStatus.AUTO_APPROVED, HyperKycStatus.AUTO_DECLINED, HyperKycStatus.NEEDS_REVIEW}).contains(id2) && !ArraysKt.contains(WorkflowModule.INSTANCE.getEND_STATES$hyperkyc_release(), id2)) {
            WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(id2);
            if (moduleForId$hyperkyc_release == null) {
                throw new IllegalStateException(("Module not found for id: " + id2).toString());
            }
        }
        return z;
    }

    /* JADX WARN: Code restructure failed: missing block: B:53:0x016e, code lost:
    
        if (r0 != null) goto L62;
     */
    /* JADX WARN: Code restructure failed: missing block: B:57:0x017e, code lost:
    
        if (r0 == null) goto L63;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x0182, code lost:
    
        r0 = co.hyperverge.hyperkyc.utils.extensions.LogExtsKt.ANON_CLASS_PATTERN.matcher(r6);
     */
    /* JADX WARN: Code restructure failed: missing block: B:59:0x0191, code lost:
    
        if (r0.find() == false) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:60:0x0193, code lost:
    
        r6 = r0.replaceAll("");
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r6, "replaceAll(\"\")");
     */
    /* JADX WARN: Code restructure failed: missing block: B:62:0x01a0, code lost:
    
        if (r6.length() <= 23) goto L72;
     */
    /* JADX WARN: Code restructure failed: missing block: B:64:0x01a6, code lost:
    
        if (android.os.Build.VERSION.SDK_INT < 26) goto L71;
     */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x01a9, code lost:
    
        r6 = r6.substring(0, 23);
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r6, "this as java.lang.String…ing(startIndex, endIndex)");
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x01b1, code lost:
    
        r0 = new java.lang.StringBuilder();
        r2 = new java.lang.StringBuilder();
        r2.append("resetToLastParentModule() called for lastParentModulePos: ");
        r2.append(r17.lastParentModulePos);
        r2.append(" when workflowUIStateList: ");
        r5 = r17.workflowUIStateList;
     */
    /* JADX WARN: Code restructure failed: missing block: B:67:0x01c8, code lost:
    
        if (r5 != null) goto L75;
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x01ca, code lost:
    
        kotlin.jvm.internal.Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
        r5 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:69:0x01ce, code lost:
    
        r5 = (java.lang.Iterable) r5;
        r8 = new java.util.ArrayList(kotlin.collections.CollectionsKt.collectionSizeOrDefault(r5, 10));
        r5 = r5.iterator();
     */
    /* JADX WARN: Code restructure failed: missing block: B:71:0x01e3, code lost:
    
        if (r5.hasNext() == false) goto L96;
     */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x01e5, code lost:
    
        r8.add(((co.hyperverge.hyperkyc.ui.models.WorkflowUIState) r5.next()).getTag());
     */
    /* JADX WARN: Code restructure failed: missing block: B:74:0x01f3, code lost:
    
        r2.append(r8);
        r2 = r2.toString();
     */
    /* JADX WARN: Code restructure failed: missing block: B:75:0x01fc, code lost:
    
        if (r2 != null) goto L82;
     */
    /* JADX WARN: Code restructure failed: missing block: B:76:0x01ff, code lost:
    
        r7 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:77:0x0200, code lost:
    
        r0.append(r7);
        r0.append(' ');
        r0.append("");
        android.util.Log.println(3, r6, r0.toString());
     */
    /* JADX WARN: Code restructure failed: missing block: B:79:0x0181, code lost:
    
        r6 = r0;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r9v7 */
    /* JADX WARN: Type inference failed for: r9v8, types: [java.util.List] */
    /* JADX WARN: Type inference failed for: r9v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void resetToLastParentModule() {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String className;
        ?? r9;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str3 = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        StringBuilder sb2 = new StringBuilder();
        sb2.append("resetToLastParentModule() called for lastParentModulePos: ");
        sb2.append(this.lastParentModulePos);
        sb2.append(" when workflowUIStateList: ");
        List<WorkflowUIState> list = this.workflowUIStateList;
        if (list == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list = null;
        }
        List<WorkflowUIState> list2 = list;
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(list2, 10));
        Iterator it = list2.iterator();
        while (it.hasNext()) {
            arrayList.add(((WorkflowUIState) it.next()).getTag());
        }
        sb2.append(arrayList);
        String sb3 = sb2.toString();
        String str4 = "null ";
        if (sb3 == null) {
            sb3 = "null ";
        }
        sb.append(sb3);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str = null;
                    } else {
                        str = null;
                        str2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str2 = cls2 != null ? cls2.getCanonicalName() : str;
                }
            }
        }
        str = null;
        Integer num = this.lastParentModulePos;
        if (num == null) {
            return;
        }
        Intrinsics.checkNotNull(num);
        this.currentFlowPos = num.intValue();
        this.currentFlowId = getCurrentModuleId$hyperkyc_release();
        List<WorkflowUIState> list3 = this.workflowUIStateList;
        if (list3 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            r9 = str;
        } else {
            r9 = list3;
        }
        Integer num2 = this.lastParentModulePos;
        Intrinsics.checkNotNull(num2);
        this.workflowUIStateList = new ArrayList(r9.subList(0, num2.intValue() + 1));
    }

    private final Object processCondition(String id2, WorkflowCondition condition, boolean injectFromVariablesForResult, boolean updateResumeFrom) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String className;
        String substringAfterLast$default;
        WorkflowCondition.EvalResultConfigs ifFalseConfigs;
        String str2;
        String resumeFrom;
        String text;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        String str3 = "";
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str4 = "processCondition() called with: condition = [" + condition + "], injectFromVariablesForResult = [" + injectFromVariablesForResult + "], updateResumeFrom = [" + updateResumeFrom + ']';
        if (str4 == null) {
            str4 = "null ";
        }
        sb.append(str4);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        str = canonicalName2 == null ? "N/A" : canonicalName2;
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str5 = "processCondition() called with: condition = [" + condition + "], injectFromVariablesForResult = [" + injectFromVariablesForResult + "], updateResumeFrom = [" + updateResumeFrom + ']';
                    if (str5 == null) {
                        str5 = "null ";
                    }
                    sb2.append(str5);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        String stringInjectFromVariables = stringInjectFromVariables(condition.getRule(), true);
        if (!injectFromVariablesForResult) {
            this.latestRule = stringInjectFromVariables;
        }
        boolean eval$default = RuleEvaluatorKt.eval$default(stringInjectFromVariables, false, 1, null);
        String ifTrue = eval$default ? condition.getIfTrue() : condition.getIfFalse();
        String reason = (!eval$default ? (ifFalseConfigs = condition.getIfFalseConfigs()) != null : (ifFalseConfigs = condition.getIfTrueConfigs()) != null) ? null : ifFalseConfigs.getReason();
        if (reason != null) {
            this.failureReason = new FailureReason(id2 + '_' + ifTrue, reason);
        }
        HashMap<String, String> hashMap = this.outputs;
        FailureReason failureReason = this.failureReason;
        if (failureReason == null || (str2 = failureReason.getId()) == null) {
            str2 = "";
        }
        hashMap.put("failureReason.id", str2);
        HashMap<String, String> hashMap2 = this.outputs;
        FailureReason failureReason2 = this.failureReason;
        if (failureReason2 != null && (text = failureReason2.getText()) != null) {
            str3 = text;
        }
        hashMap2.put("failureReason.text", str3);
        if (updateResumeFrom) {
            if (eval$default) {
                WorkflowCondition.EvalResultConfigs ifTrueConfigs = condition.getIfTrueConfigs();
                if (ifTrueConfigs != null) {
                    resumeFrom = ifTrueConfigs.getResumeFrom();
                    this.resumeFrom = resumeFrom;
                }
                resumeFrom = null;
                this.resumeFrom = resumeFrom;
            } else {
                WorkflowCondition.EvalResultConfigs ifFalseConfigs2 = condition.getIfFalseConfigs();
                if (ifFalseConfigs2 != null) {
                    resumeFrom = ifFalseConfigs2.getResumeFrom();
                    this.resumeFrom = resumeFrom;
                }
                resumeFrom = null;
                this.resumeFrom = resumeFrom;
            }
        }
        return injectFromVariablesForResult ? anyInjectFromVariables(ifTrue) : ifTrue;
    }

    /* JADX WARN: Code restructure failed: missing block: B:54:0x013e, code lost:
    
        if (r0 == null) goto L55;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final boolean processCheckRule$hyperkyc_release(String rule) {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        String className2;
        Intrinsics.checkNotNullParameter(rule, "rule");
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "processCheckRule() called with: rule = " + rule;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "processCheckRule() called with: rule = " + rule;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        return RuleEvaluatorKt.eval$default(stringInjectFromVariables(rule, true), false, 1, null);
    }

    /* JADX WARN: Code restructure failed: missing block: B:80:0x013d, code lost:
    
        if (r0 == null) goto L55;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final String evaluateNextStep(String id2) {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "evaluateNextStep() called with: id = " + id2;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "evaluateNextStep() called with: id = " + id2;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        if (StringsKt.startsWith$default(id2, WorkflowModule.PREFIX_CONDITION, false, 2, (Object) null)) {
            LinkedHashMap<String, WorkflowCondition> conditions = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getConditions();
            WorkflowCondition workflowCondition = conditions != null ? conditions.get(id2) : null;
            Intrinsics.checkNotNull(workflowCondition);
            this.latestCondition = id2;
            this.latestRuleRaw = workflowCondition.getRule();
            this.workflowExecutionOrder.add(id2);
            AnalyticsLogger.INSTANCE.logConditionStartedEvent$hyperkyc_release(getAnalyticsForCondition$default(this, id2, null, AnalyticsLogger.Events.CONDITION_STARTED, 2, null));
            Object processCondition$default = processCondition$default(this, id2, workflowCondition, false, true, 4, null);
            Intrinsics.checkNotNull(processCondition$default, "null cannot be cast to non-null type kotlin.String");
            String str4 = (String) processCondition$default;
            AnalyticsLogger.INSTANCE.logConditionEndedEvent$hyperkyc_release(getAnalyticsForCondition(id2, str4, AnalyticsLogger.Events.CONDITION_ENDED));
            if (Intrinsics.areEqual(str4, WorkflowModule.DISMISS_TO_PARENT)) {
                this.waitingForParentSet.add(id2);
                resetToLastParentModule();
            }
            return evaluateNextStep(str4);
        }
        if (!CollectionsKt.listOf((Object[]) new String[]{HyperKycStatus.AUTO_APPROVED, HyperKycStatus.AUTO_DECLINED, HyperKycStatus.NEEDS_REVIEW}).contains(id2) && !ArraysKt.contains(WorkflowModule.INSTANCE.getEND_STATES$hyperkyc_release(), id2)) {
            return id2;
        }
        String fromLegacyStatus$hyperkyc_release = ArraysKt.contains(WorkflowModule.INSTANCE.getEND_STATES$hyperkyc_release(), id2) ? HyperKycStatus.INSTANCE.fromLegacyStatus$hyperkyc_release(id2) : id2;
        List<WorkflowUIState> list = this.workflowUIStateList;
        if (list == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list = null;
        }
        list.add(new WorkflowUIState.End(fromLegacyStatus$hyperkyc_release));
        this.previousFlowPos = this.currentFlowPos;
        List<WorkflowUIState> list2 = this.workflowUIStateList;
        if (list2 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list2 = null;
        }
        this.currentFlowPos = list2.size() - 1;
        updateUiState();
        return null;
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:110:0x022f, code lost:
    
        if (r0 != null) goto L81;
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x0485, code lost:
    
        if (r1.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_DYNAMIC_FORM_V2) == false) goto L382;
     */
    /* JADX WARN: Code restructure failed: missing block: B:241:0x0533, code lost:
    
        r1 = r28.hyperKycData.formResultList().iterator();
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x0543, code lost:
    
        if (r1.hasNext() == false) goto L405;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x0545, code lost:
    
        r2 = r1.next();
     */
    /* JADX WARN: Code restructure failed: missing block: B:245:0x0554, code lost:
    
        if (kotlin.jvm.internal.Intrinsics.areEqual(((co.hyperverge.hyperkyc.data.models.result.HyperKycData.FormResult) r2).getTag$hyperkyc_release(), r0) == false) goto L407;
     */
    /* JADX WARN: Code restructure failed: missing block: B:247:0x0558, code lost:
    
        r2 = (co.hyperverge.hyperkyc.data.models.result.HyperKycData.FormResult) r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:248:0x055a, code lost:
    
        if (r2 == null) goto L274;
     */
    /* JADX WARN: Code restructure failed: missing block: B:249:0x055c, code lost:
    
        r0 = r2.getVariables();
     */
    /* JADX WARN: Code restructure failed: missing block: B:250:0x0562, code lost:
    
        r0 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:251:0x0561, code lost:
    
        r0 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:254:0x0557, code lost:
    
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:256:0x048f, code lost:
    
        if (r1.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_FORM) == false) goto L382;
     */
    /* JADX WARN: Code restructure failed: missing block: B:297:0x052f, code lost:
    
        if (r1.equals(co.hyperverge.hyperkyc.data.models.WorkflowModule.TYPE_DYNAMIC_FORM) == false) goto L382;
     */
    /* JADX WARN: Failed to find 'out' block for switch in B:144:0x032d. Please report as an issue. */
    /* JADX WARN: Removed duplicated region for block: B:143:0x0329  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x05df  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x01c9 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x01ca  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0649  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x068f  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x06ab A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0637  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final Object anyInjectFromVariables(String str) {
        String canonicalName;
        Class<?> cls;
        Object m1202constructorimpl;
        String str2;
        String canonicalName2;
        Class<?> cls2;
        int i;
        String className;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        int i2;
        String str9;
        Object obj;
        HashMap variables;
        Object obj2;
        Object obj3;
        Object obj4;
        Object obj5;
        Object obj6;
        Object obj7;
        Object obj8;
        String str10;
        Map nestedMap;
        JSONObject jSONObject;
        Object obj9;
        Object obj10;
        WorkflowCondition workflowCondition;
        StackTraceElement stackTraceElement;
        String canonicalName3;
        Class<?> cls3;
        Matcher matcher;
        String str11;
        String str12;
        Object obj11;
        Class<?> cls4;
        String className2;
        String substringAfterLast$default;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str13 = "N/A";
        String str14 = null;
        if (stackTraceElement2 == null || (className4 = stackTraceElement2.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            canonicalName = (str == null || (cls = str.getClass()) == null) ? null : cls.getCanonicalName();
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str15 = "anyInjectFromVariables() called for " + str;
        if (str15 == null) {
            str15 = "null ";
        }
        sb.append(str15);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            str2 = "getInitialApplication";
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement3 == null || (className = stackTraceElement3.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        canonicalName2 = (str == null || (cls2 = str.getClass()) == null) ? null : cls2.getCanonicalName();
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23) {
                        str2 = "getInitialApplication";
                        if (Build.VERSION.SDK_INT < 26) {
                            canonicalName2 = canonicalName2.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                    } else {
                        str2 = "getInitialApplication";
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str16 = "anyInjectFromVariables() called for " + str;
                    if (str16 == null) {
                        str16 = "null ";
                    }
                    sb2.append(str16);
                    sb2.append(' ');
                    sb2.append("");
                    i = 2;
                    Log.println(2, canonicalName2, sb2.toString());
                    if (StringsKt.contains$default((CharSequence) str, (CharSequence) ".", false, i, (Object) null)) {
                        return str;
                    }
                    String removeCurlyBraces = CoreExtsKt.removeCurlyBraces(str);
                    String substringAfter$default = StringsKt.substringAfter$default(removeCurlyBraces, ".", (String) null, i, (Object) null);
                    if (StringsKt.startsWith$default(removeCurlyBraces, "sdk", false, i, (Object) null)) {
                        str10 = Intrinsics.areEqual(substringAfter$default, "platform") ? "android" : "";
                    } else {
                        if (StringsKt.startsWith$default(removeCurlyBraces, WorkflowModule.PREFIX_INPUTS, false, i, (Object) null)) {
                            str10 = getHyperKycConfig$hyperkyc_release().getInputs().get(substringAfter$default);
                            if (str10 == null) {
                                str10 = null;
                            }
                            if (str10 != null) {
                                if ((str10 instanceof String) && StringsKt.contains$default((CharSequence) str10, (CharSequence) HyperKyc.INPUTS_CACHE_DIR, false, 2, (Object) null)) {
                                    str10 = FilesKt.readText$default(new File((String) str10), null, 1, null);
                                }
                            }
                            throw new IllegalStateException((substringAfter$default + " not found in inputs").toString());
                        }
                        if (!StringsKt.startsWith$default(removeCurlyBraces, WorkflowModule.PREFIX_OUTPUTS, false, 2, (Object) null)) {
                            if (!StringsKt.startsWith$default(removeCurlyBraces, WorkflowModule.PREFIX_CONDITIONAL_VARS, false, 2, (Object) null)) {
                                str3 = "packageName";
                                str4 = "null cannot be cast to non-null type android.app.Application";
                                str5 = "this as java.lang.String…ing(startIndex, endIndex)";
                                str6 = "";
                                str7 = " - ";
                                str8 = str2;
                                i2 = 26;
                                String substringBefore$default = StringsKt.substringBefore$default(removeCurlyBraces, ".", (String) null, 2, (Object) null);
                                List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
                                if (modules != null) {
                                    Iterator<T> it = modules.iterator();
                                    while (true) {
                                        if (!it.hasNext()) {
                                            obj10 = null;
                                            break;
                                        }
                                        obj10 = it.next();
                                        if (Intrinsics.areEqual(((WorkflowModule) obj10).getId(), substringBefore$default)) {
                                            break;
                                        }
                                    }
                                    WorkflowModule workflowModule = (WorkflowModule) obj10;
                                    if (workflowModule != null) {
                                        str9 = workflowModule.getType();
                                        if (str9 != null) {
                                            switch (str9.hashCode()) {
                                                case -1768353996:
                                                    if (str9.equals(WorkflowModule.TYPE_VIDEO_STATEMENT)) {
                                                        Iterator it2 = this.hyperKycData.getVideoStatementResultList().iterator();
                                                        while (true) {
                                                            if (it2.hasNext()) {
                                                                obj = it2.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.VideoStatementResult) obj).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj = null;
                                                            }
                                                        }
                                                        HyperKycData.VideoStatementResult videoStatementResult = (HyperKycData.VideoStatementResult) obj;
                                                        variables = videoStatementResult != null ? videoStatementResult.getVariables() : null;
                                                        if (variables == null && (nestedMap = JSONExtsKt.toNestedMap(variables)) != null && (jSONObject = JSONExtsKt.toJSONObject(nestedMap)) != null) {
                                                            str10 = JSONExtsKt.recursiveGet(jSONObject, substringAfter$default);
                                                            break;
                                                        } else {
                                                            str10 = null;
                                                            break;
                                                        }
                                                    }
                                                    break;
                                                case -333584256:
                                                    if (str9.equals("barcode")) {
                                                        Iterator it3 = this.hyperKycData.getBarcodeResultList().iterator();
                                                        while (true) {
                                                            if (it3.hasNext()) {
                                                                obj2 = it3.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.BarcodeResult) obj2).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj2 = null;
                                                            }
                                                        }
                                                        HyperKycData.BarcodeResult barcodeResult = (HyperKycData.BarcodeResult) obj2;
                                                        variables = barcodeResult != null ? barcodeResult.getVariables() : null;
                                                        if (variables == null) {
                                                            break;
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case -259085917:
                                                    break;
                                                case 96794:
                                                    if (str9.equals(WorkflowModule.TYPE_API)) {
                                                        Iterator<T> it4 = this.hyperKycData.apiResultList().iterator();
                                                        while (true) {
                                                            if (it4.hasNext()) {
                                                                obj3 = it4.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.APIResult) obj3).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj3 = null;
                                                            }
                                                        }
                                                        HyperKycData.APIResult aPIResult = (HyperKycData.APIResult) obj3;
                                                        variables = aPIResult != null ? aPIResult.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 108971:
                                                    if (str9.equals(WorkflowModule.TYPE_NFC)) {
                                                        Iterator it5 = this.hyperKycData.getNfcResultList().iterator();
                                                        while (true) {
                                                            if (it5.hasNext()) {
                                                                obj4 = it5.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.NFCResult) obj4).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj4 = null;
                                                            }
                                                        }
                                                        HyperKycData.NFCResult nFCResult = (HyperKycData.NFCResult) obj4;
                                                        variables = nFCResult != null ? nFCResult.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 3135069:
                                                    if (str9.equals("face")) {
                                                        HyperKycData.FaceResult faceResult = this.hyperKycData.faceResult();
                                                        variables = faceResult != null ? faceResult.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 3148996:
                                                    break;
                                                case 126539647:
                                                    break;
                                                case 700214324:
                                                    if (str9.equals(WorkflowModule.TYPE_STOP_SESSION_RECORDING)) {
                                                        Iterator it6 = this.hyperKycData.getSessionResultList().iterator();
                                                        while (true) {
                                                            if (it6.hasNext()) {
                                                                obj5 = it6.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.SessionResult) obj5).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj5 = null;
                                                            }
                                                        }
                                                        HyperKycData.SessionResult sessionResult = (HyperKycData.SessionResult) obj5;
                                                        variables = sessionResult != null ? sessionResult.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 861720859:
                                                    if (str9.equals(WorkflowModule.TYPE_DOCUMENT)) {
                                                        Iterator<T> it7 = this.hyperKycData.docResultList().iterator();
                                                        while (true) {
                                                            if (it7.hasNext()) {
                                                                obj6 = it7.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.DocResult) obj6).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj6 = null;
                                                            }
                                                        }
                                                        HyperKycData.DocResult docResult = (HyperKycData.DocResult) obj6;
                                                        variables = docResult != null ? docResult.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 1224424441:
                                                    if (str9.equals(WorkflowModule.TYPE_WEBVIEW)) {
                                                        Iterator<T> it8 = this.hyperKycData.webviewResultList().iterator();
                                                        while (true) {
                                                            if (it8.hasNext()) {
                                                                obj7 = it8.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.WebviewResult) obj7).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj7 = null;
                                                            }
                                                        }
                                                        HyperKycData.WebviewResult webviewResult = (HyperKycData.WebviewResult) obj7;
                                                        variables = webviewResult != null ? webviewResult.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 1352637108:
                                                    if (str9.equals("countries")) {
                                                        HyperKycData.CountryResult countryResult = this.hyperKycData.countryResult();
                                                        variables = countryResult != null ? countryResult.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 1418861776:
                                                    if (str9.equals(WorkflowModule.TYPE_VIDEO_STATEMENT_V2)) {
                                                        Iterator it9 = this.hyperKycData.getVideoStatementV2ResultList().iterator();
                                                        while (true) {
                                                            if (it9.hasNext()) {
                                                                obj8 = it9.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.VideoStatementV2Result) obj8).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj8 = null;
                                                            }
                                                        }
                                                        HyperKycData.VideoStatementV2Result videoStatementV2Result = (HyperKycData.VideoStatementV2Result) obj8;
                                                        variables = videoStatementV2Result != null ? videoStatementV2Result.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                                case 1850541012:
                                                    if (str9.equals(WorkflowModule.TYPE_START_SESSION_RECORDING)) {
                                                        Iterator it10 = this.hyperKycData.getSessionResultList().iterator();
                                                        while (true) {
                                                            if (it10.hasNext()) {
                                                                obj9 = it10.next();
                                                                if (Intrinsics.areEqual(((HyperKycData.SessionResult) obj9).getTag$hyperkyc_release(), substringBefore$default)) {
                                                                }
                                                            } else {
                                                                obj9 = null;
                                                            }
                                                        }
                                                        HyperKycData.SessionResult sessionResult2 = (HyperKycData.SessionResult) obj9;
                                                        variables = sessionResult2 != null ? sessionResult2.getVariables() : null;
                                                        if (variables == null) {
                                                        }
                                                        str10 = null;
                                                        break;
                                                    }
                                                    break;
                                            }
                                        }
                                        return str;
                                    }
                                }
                                str9 = null;
                                if (str9 != null) {
                                }
                                return str;
                            }
                            LinkedHashMap<String, WorkflowCondition> conditionalVariables = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getConditionalVariables();
                            if (conditionalVariables == null || (workflowCondition = conditionalVariables.get(substringAfter$default)) == null) {
                                throw new IllegalStateException((substringAfter$default + " not found in conditionalVariables").toString());
                            }
                            str3 = "packageName";
                            str4 = "null cannot be cast to non-null type android.app.Application";
                            str7 = " - ";
                            str8 = str2;
                            i2 = 26;
                            str5 = "this as java.lang.String…ing(startIndex, endIndex)";
                            str6 = "";
                            str10 = processCondition$default(this, null, workflowCondition, true, false, 9, null);
                            Object obj12 = str10;
                            HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                            HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                            StringBuilder sb3 = new StringBuilder();
                            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                            if (stackTraceElement != null || (className3 = stackTraceElement.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                canonicalName3 = (str != null || (cls3 = str.getClass()) == null) ? null : cls3.getCanonicalName();
                                if (canonicalName3 == null) {
                                    canonicalName3 = "N/A";
                                }
                            }
                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                            if (matcher.find()) {
                                canonicalName3 = matcher.replaceAll(str6);
                                Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                            }
                            Unit unit3 = Unit.INSTANCE;
                            if (canonicalName3.length() > 23 || Build.VERSION.SDK_INT >= i2) {
                                str11 = str5;
                            } else {
                                canonicalName3 = canonicalName3.substring(0, 23);
                                str11 = str5;
                                Intrinsics.checkNotNullExpressionValue(canonicalName3, str11);
                            }
                            sb3.append(canonicalName3);
                            sb3.append(str7);
                            str12 = "anyInjectFromVariables() returning " + obj12 + " for " + str;
                            if (str12 == null) {
                                str12 = "null ";
                            }
                            sb3.append(str12);
                            sb3.append(' ');
                            sb3.append(str6);
                            companion4.log(level2, sb3.toString());
                            if (!CoreExtsKt.isRelease()) {
                                try {
                                    Result.Companion companion5 = Result.INSTANCE;
                                    Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str8, new Class[0]).invoke(null, new Object[0]);
                                    Intrinsics.checkNotNull(invoke2, str4);
                                    obj11 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                } catch (Throwable th2) {
                                    Result.Companion companion6 = Result.INSTANCE;
                                    obj11 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                }
                                Object obj13 = obj11;
                                if (Result.m1208isFailureimpl(obj13)) {
                                    obj13 = str6;
                                }
                                String str17 = (String) obj13;
                                if (CoreExtsKt.isDebug()) {
                                    Intrinsics.checkNotNullExpressionValue(str17, str3);
                                    if (StringsKt.contains$default((CharSequence) str17, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                        if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                            if (str != null && (cls4 = str.getClass()) != null) {
                                                str14 = cls4.getCanonicalName();
                                            }
                                            if (str14 != null) {
                                                str13 = str14;
                                            }
                                        } else {
                                            str13 = substringAfterLast$default;
                                        }
                                        Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str13);
                                        if (matcher4.find()) {
                                            str13 = matcher4.replaceAll(str6);
                                            Intrinsics.checkNotNullExpressionValue(str13, "replaceAll(\"\")");
                                        }
                                        Unit unit4 = Unit.INSTANCE;
                                        if (str13.length() > 23 && Build.VERSION.SDK_INT < i2) {
                                            str13 = str13.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str13, str11);
                                        }
                                        StringBuilder sb4 = new StringBuilder();
                                        String str18 = "anyInjectFromVariables() returning " + obj12 + " for " + str;
                                        if (str18 == null) {
                                            str18 = "null ";
                                        }
                                        sb4.append(str18);
                                        sb4.append(' ');
                                        sb4.append(str6);
                                        Log.println(2, str13, sb4.toString());
                                    }
                                }
                            }
                            return obj12;
                        }
                        String str19 = this.outputs.get(substringAfter$default);
                        if (str19 == null) {
                            str19 = null;
                        }
                        str10 = str19;
                        if (str10 == null) {
                            throw new IllegalStateException((substringAfter$default + " not found in outputs").toString());
                        }
                    }
                    str3 = "packageName";
                    str4 = "null cannot be cast to non-null type android.app.Application";
                    str5 = "this as java.lang.String…ing(startIndex, endIndex)";
                    str6 = "";
                    str7 = " - ";
                    str8 = str2;
                    i2 = 26;
                    Object obj122 = str10;
                    HyperLogger.Level level22 = HyperLogger.Level.DEBUG;
                    HyperLogger companion42 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb32 = new StringBuilder();
                    StackTraceElement[] stackTrace32 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace32, "Throwable().stackTrace");
                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32);
                    if (stackTraceElement != null) {
                    }
                    if (str != null) {
                    }
                    if (canonicalName3 == null) {
                    }
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                    if (matcher.find()) {
                    }
                    Unit unit32 = Unit.INSTANCE;
                    if (canonicalName3.length() > 23) {
                    }
                    str11 = str5;
                    sb32.append(canonicalName3);
                    sb32.append(str7);
                    str12 = "anyInjectFromVariables() returning " + obj122 + " for " + str;
                    if (str12 == null) {
                    }
                    sb32.append(str12);
                    sb32.append(' ');
                    sb32.append(str6);
                    companion42.log(level22, sb32.toString());
                    if (!CoreExtsKt.isRelease()) {
                    }
                    return obj122;
                }
            }
            str2 = "getInitialApplication";
        }
        i = 2;
        if (StringsKt.contains$default((CharSequence) str, (CharSequence) ".", false, i, (Object) null)) {
        }
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x04c6, code lost:
    
        if (r10 != null) goto L248;
     */
    /* JADX WARN: Failed to find 'out' block for switch in B:34:0x01f2. Please report as an issue. */
    /* JADX WARN: Removed duplicated region for block: B:106:0x062b  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01ca  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x04b6  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x04cd  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x04db  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x04de  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x04f0  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0501  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0531  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x054d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:98:0x05eb  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final Object injectFromResponse(String str) {
        String canonicalName;
        Class<?> cls;
        Object m1202constructorimpl;
        CharSequence charSequence;
        String str2;
        String canonicalName2;
        Class<?> cls2;
        String className;
        List<WorkflowModule> modules;
        String type;
        Object obj;
        HyperKycData.VideoStatementData videoStatementData$hyperkyc_release;
        String responseBodyRaw$hyperkyc_release;
        String jSONString;
        Object obj2;
        String barcodeData$hyperkyc_release;
        Object obj3;
        HyperKycData.APIData apiData$hyperkyc_release;
        Object obj4;
        HyperKycData.FaceData faceData;
        Object obj5;
        HyperKycData.SessionData sessionData$hyperkyc_release;
        Object obj6;
        List<HyperKycData.DocData> docDataList;
        Object obj7;
        Object obj8;
        HyperKycData.WebviewData webviewData$hyperkyc_release;
        StackTraceElement stackTraceElement;
        String str3;
        String str4;
        Matcher matcher;
        String str5;
        Object m1202constructorimpl2;
        String str6;
        String str7;
        Class<?> cls3;
        Matcher matcher2;
        String str8;
        String className2;
        Class<?> cls4;
        String className3;
        Object obj9;
        HyperKycData.VideoStatementV2Data videoStatementV2Data$hyperkyc_release;
        String className4;
        MainVM mainVM = this;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement2 == null || (className4 = stackTraceElement2.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            canonicalName = (str == null || (cls = str.getClass()) == null) ? null : cls.getCanonicalName();
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher3.find()) {
            canonicalName = matcher3.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str9 = str + ".injectFromResponse() called";
        if (str9 == null) {
            str9 = "null ";
        }
        sb.append(str9);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                charSequence = "co.hyperverge";
                str2 = "N/A";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement3 == null || (className = stackTraceElement3.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        canonicalName2 = (str == null || (cls2 = str.getClass()) == null) ? null : cls2.getCanonicalName();
                        if (canonicalName2 == null) {
                            canonicalName2 = str2;
                        }
                    }
                    Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher4.find()) {
                        canonicalName2 = matcher4.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str10 = str + ".injectFromResponse() called";
                    if (str10 == null) {
                        str10 = "null ";
                    }
                    sb2.append(str10);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
                String substringAfter$default = StringsKt.substringAfter$default(str, ".", (String) null, 2, (Object) null);
                String substringBefore$default = StringsKt.substringBefore$default(str, ".", (String) null, 2, (Object) null);
                modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
                if (modules != null) {
                    for (WorkflowModule workflowModule : modules) {
                        if (!Intrinsics.areEqual(workflowModule.getId(), substringBefore$default)) {
                            mainVM = this;
                        } else if (workflowModule != null && (type = workflowModule.getType()) != null) {
                            switch (type.hashCode()) {
                                case -1768353996:
                                    if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT)) {
                                        Iterator<T> it = mainVM.hyperKycData.videoStatementResultList().iterator();
                                        while (true) {
                                            if (it.hasNext()) {
                                                obj = it.next();
                                                if (Intrinsics.areEqual(((HyperKycData.VideoStatementResult) obj).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj = null;
                                            }
                                        }
                                        HyperKycData.VideoStatementResult videoStatementResult = (HyperKycData.VideoStatementResult) obj;
                                        if (videoStatementResult != null && (videoStatementData$hyperkyc_release = videoStatementResult.getVideoStatementData$hyperkyc_release()) != null) {
                                            responseBodyRaw$hyperkyc_release = videoStatementData$hyperkyc_release.getResponseBodyRaw$hyperkyc_release();
                                            Map responseHeaders = videoStatementData$hyperkyc_release.getResponseHeaders();
                                            jSONString = responseHeaders != null ? JSONExtsKt.toJSONString(responseHeaders) : null;
                                            Unit unit3 = Unit.INSTANCE;
                                            Unit unit4 = Unit.INSTANCE;
                                            Object responseValue$hyperkyc_release = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb3 = new StringBuilder();
                                            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                                            if (stackTraceElement == null && (className3 = stackTraceElement.getClassName()) != null) {
                                                str3 = "Throwable().stackTrace";
                                                str4 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                break;
                                            } else {
                                                str3 = "Throwable().stackTrace";
                                            }
                                            String canonicalName3 = (str != null || (cls4 = str.getClass()) == null) ? null : cls4.getCanonicalName();
                                            str4 = canonicalName3 != null ? str2 : canonicalName3;
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                                str4 = matcher.replaceAll("");
                                                Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                                            }
                                            Unit unit5 = Unit.INSTANCE;
                                            if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                str4 = str4.substring(0, 23);
                                                Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            sb3.append(str4);
                                            sb3.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release;
                                            if (str5 == null) {
                                                str5 = "null ";
                                            }
                                            sb3.append(str5);
                                            sb3.append(' ');
                                            sb3.append("");
                                            companion4.log(level2, sb3.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                                try {
                                                    Result.Companion companion5 = Result.INSTANCE;
                                                    Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                                    Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                                    m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                                } catch (Throwable th2) {
                                                    Result.Companion companion6 = Result.INSTANCE;
                                                    m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                                }
                                                if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                                    m1202constructorimpl2 = "";
                                                }
                                                String packageName2 = (String) m1202constructorimpl2;
                                                if (CoreExtsKt.isDebug()) {
                                                    Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                                                    if (StringsKt.contains$default((CharSequence) packageName2, charSequence, false, 2, (Object) null)) {
                                                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                                        Intrinsics.checkNotNullExpressionValue(stackTrace4, str3);
                                                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                                        if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                                            str6 = null;
                                                        } else {
                                                            str6 = null;
                                                            String substringAfterLast$default = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                            if (substringAfterLast$default != null) {
                                                                str7 = substringAfterLast$default;
                                                                matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                                                if (matcher2.find()) {
                                                                    str7 = matcher2.replaceAll("");
                                                                    Intrinsics.checkNotNullExpressionValue(str7, "replaceAll(\"\")");
                                                                }
                                                                Unit unit6 = Unit.INSTANCE;
                                                                if (str7.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                    str7 = str7.substring(0, 23);
                                                                    Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                }
                                                                StringBuilder sb4 = new StringBuilder();
                                                                str8 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release;
                                                                if (str8 == null) {
                                                                    str8 = "null ";
                                                                }
                                                                sb4.append(str8);
                                                                sb4.append(' ');
                                                                sb4.append("");
                                                                Log.println(3, str7, sb4.toString());
                                                            }
                                                        }
                                                        String canonicalName4 = (str == null || (cls3 = str.getClass()) == null) ? str6 : cls3.getCanonicalName();
                                                        str7 = canonicalName4 == null ? str2 : canonicalName4;
                                                        matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                                        if (matcher2.find()) {
                                                        }
                                                        Unit unit62 = Unit.INSTANCE;
                                                        if (str7.length() > 23) {
                                                            str7 = str7.substring(0, 23);
                                                            Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                                                        }
                                                        StringBuilder sb42 = new StringBuilder();
                                                        str8 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release;
                                                        if (str8 == null) {
                                                        }
                                                        sb42.append(str8);
                                                        sb42.append(' ');
                                                        sb42.append("");
                                                        Log.println(3, str7, sb42.toString());
                                                    }
                                                }
                                            }
                                            return responseValue$hyperkyc_release;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release2 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level22 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion42 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb32 = new StringBuilder();
                                        StackTraceElement[] stackTrace32 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace32, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit52 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                            str4 = str4.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        sb32.append(str4);
                                        sb32.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release2;
                                        if (str5 == null) {
                                        }
                                        sb32.append(str5);
                                        sb32.append(' ');
                                        sb32.append("");
                                        companion42.log(level22, sb32.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release2;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case -333584256:
                                    if (type.equals("barcode")) {
                                        Iterator it2 = mainVM.hyperKycData.getBarcodeResultList().iterator();
                                        while (true) {
                                            if (it2.hasNext()) {
                                                obj2 = it2.next();
                                                if (Intrinsics.areEqual(((HyperKycData.BarcodeResult) obj2).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj2 = null;
                                            }
                                        }
                                        HyperKycData.BarcodeResult barcodeResult = (HyperKycData.BarcodeResult) obj2;
                                        if (barcodeResult != null) {
                                            barcodeData$hyperkyc_release = barcodeResult.getBarcodeData$hyperkyc_release();
                                            Unit unit7 = Unit.INSTANCE;
                                            Unit unit8 = Unit.INSTANCE;
                                            responseBodyRaw$hyperkyc_release = barcodeData$hyperkyc_release;
                                            jSONString = null;
                                            Object responseValue$hyperkyc_release22 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion422 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb322 = new StringBuilder();
                                            StackTraceElement[] stackTrace322 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace322, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace322);
                                            if (stackTraceElement == null) {
                                            }
                                            str3 = "Throwable().stackTrace";
                                            if (str != null) {
                                            }
                                            if (canonicalName3 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                            }
                                            Unit unit522 = Unit.INSTANCE;
                                            if (str4.length() > 23) {
                                            }
                                            sb322.append(str4);
                                            sb322.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release22;
                                            if (str5 == null) {
                                            }
                                            sb322.append(str5);
                                            sb322.append(' ');
                                            sb322.append("");
                                            companion422.log(level222, sb322.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            return responseValue$hyperkyc_release22;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level2222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion4222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb3222 = new StringBuilder();
                                        StackTraceElement[] stackTrace3222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace3222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit5222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb3222.append(str4);
                                        sb3222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release222;
                                        if (str5 == null) {
                                        }
                                        sb3222.append(str5);
                                        sb3222.append(' ');
                                        sb3222.append("");
                                        companion4222.log(level2222, sb3222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case 96794:
                                    if (type.equals(WorkflowModule.TYPE_API)) {
                                        Iterator<T> it3 = mainVM.hyperKycData.apiResultList().iterator();
                                        while (true) {
                                            if (it3.hasNext()) {
                                                obj3 = it3.next();
                                                if (Intrinsics.areEqual(((HyperKycData.APIResult) obj3).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj3 = null;
                                            }
                                        }
                                        HyperKycData.APIResult aPIResult = (HyperKycData.APIResult) obj3;
                                        if (aPIResult != null && (apiData$hyperkyc_release = aPIResult.getApiData$hyperkyc_release()) != null) {
                                            responseBodyRaw$hyperkyc_release = apiData$hyperkyc_release.getResponseBodyRaw$hyperkyc_release();
                                            Map responseHeaders2 = apiData$hyperkyc_release.getResponseHeaders();
                                            jSONString = responseHeaders2 != null ? JSONExtsKt.toJSONString(responseHeaders2) : null;
                                            Unit unit9 = Unit.INSTANCE;
                                            Unit unit10 = Unit.INSTANCE;
                                            Object responseValue$hyperkyc_release2222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level22222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion42222 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb32222 = new StringBuilder();
                                            StackTraceElement[] stackTrace32222 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace32222, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32222);
                                            if (stackTraceElement == null) {
                                            }
                                            str3 = "Throwable().stackTrace";
                                            if (str != null) {
                                            }
                                            if (canonicalName3 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                            }
                                            Unit unit52222 = Unit.INSTANCE;
                                            if (str4.length() > 23) {
                                            }
                                            sb32222.append(str4);
                                            sb32222.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release2222;
                                            if (str5 == null) {
                                            }
                                            sb32222.append(str5);
                                            sb32222.append(' ');
                                            sb32222.append("");
                                            companion42222.log(level22222, sb32222.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            return responseValue$hyperkyc_release2222;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release22222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion422222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb322222 = new StringBuilder();
                                        StackTraceElement[] stackTrace322222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace322222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace322222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit522222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb322222.append(str4);
                                        sb322222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release22222;
                                        if (str5 == null) {
                                        }
                                        sb322222.append(str5);
                                        sb322222.append(' ');
                                        sb322222.append("");
                                        companion422222.log(level222222, sb322222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release22222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case 108971:
                                    if (type.equals(WorkflowModule.TYPE_NFC)) {
                                        Iterator it4 = mainVM.hyperKycData.getNfcResultList().iterator();
                                        while (true) {
                                            if (it4.hasNext()) {
                                                obj4 = it4.next();
                                                if (Intrinsics.areEqual(((HyperKycData.NFCResult) obj4).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj4 = null;
                                            }
                                        }
                                        HyperKycData.NFCResult nFCResult = (HyperKycData.NFCResult) obj4;
                                        if (nFCResult != null) {
                                            barcodeData$hyperkyc_release = nFCResult.getNfcData$hyperkyc_release();
                                            Unit unit11 = Unit.INSTANCE;
                                            Unit unit12 = Unit.INSTANCE;
                                            responseBodyRaw$hyperkyc_release = barcodeData$hyperkyc_release;
                                            jSONString = null;
                                            Object responseValue$hyperkyc_release222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level2222222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion4222222 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb3222222 = new StringBuilder();
                                            StackTraceElement[] stackTrace3222222 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace3222222, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3222222);
                                            if (stackTraceElement == null) {
                                            }
                                            str3 = "Throwable().stackTrace";
                                            if (str != null) {
                                            }
                                            if (canonicalName3 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                            }
                                            Unit unit5222222 = Unit.INSTANCE;
                                            if (str4.length() > 23) {
                                            }
                                            sb3222222.append(str4);
                                            sb3222222.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release222222;
                                            if (str5 == null) {
                                            }
                                            sb3222222.append(str5);
                                            sb3222222.append(' ');
                                            sb3222222.append("");
                                            companion4222222.log(level2222222, sb3222222.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            return responseValue$hyperkyc_release222222;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release2222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level22222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion42222222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb32222222 = new StringBuilder();
                                        StackTraceElement[] stackTrace32222222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace32222222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32222222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit52222222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb32222222.append(str4);
                                        sb32222222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release2222222;
                                        if (str5 == null) {
                                        }
                                        sb32222222.append(str5);
                                        sb32222222.append(' ');
                                        sb32222222.append("");
                                        companion42222222.log(level22222222, sb32222222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release2222222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case 3135069:
                                    if (type.equals("face")) {
                                        HyperKycData.FaceResult faceResult = mainVM.hyperKycData.faceResult();
                                        if (faceResult != null && (faceData = faceResult.faceData()) != null) {
                                            responseBodyRaw$hyperkyc_release = faceData.getResponseBodyRaw$hyperkyc_release();
                                            Map responseHeaders3 = faceData.getResponseHeaders();
                                            jSONString = responseHeaders3 != null ? JSONExtsKt.toJSONString(responseHeaders3) : null;
                                            Unit unit13 = Unit.INSTANCE;
                                            Unit unit14 = Unit.INSTANCE;
                                            Object responseValue$hyperkyc_release22222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level222222222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion422222222 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb322222222 = new StringBuilder();
                                            StackTraceElement[] stackTrace322222222 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace322222222, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace322222222);
                                            if (stackTraceElement == null) {
                                            }
                                            str3 = "Throwable().stackTrace";
                                            if (str != null) {
                                            }
                                            if (canonicalName3 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                            }
                                            Unit unit522222222 = Unit.INSTANCE;
                                            if (str4.length() > 23) {
                                            }
                                            sb322222222.append(str4);
                                            sb322222222.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release22222222;
                                            if (str5 == null) {
                                            }
                                            sb322222222.append(str5);
                                            sb322222222.append(' ');
                                            sb322222222.append("");
                                            companion422222222.log(level222222222, sb322222222.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            return responseValue$hyperkyc_release22222222;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level2222222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion4222222222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb3222222222 = new StringBuilder();
                                        StackTraceElement[] stackTrace3222222222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace3222222222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3222222222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit5222222222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb3222222222.append(str4);
                                        sb3222222222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release222222222;
                                        if (str5 == null) {
                                        }
                                        sb3222222222.append(str5);
                                        sb3222222222.append(' ');
                                        sb3222222222.append("");
                                        companion4222222222.log(level2222222222, sb3222222222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release222222222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case 700214324:
                                    if (type.equals(WorkflowModule.TYPE_STOP_SESSION_RECORDING)) {
                                        Iterator<T> it5 = mainVM.hyperKycData.sessionResultList().iterator();
                                        while (true) {
                                            if (it5.hasNext()) {
                                                obj5 = it5.next();
                                                if (Intrinsics.areEqual(((HyperKycData.SessionResult) obj5).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj5 = null;
                                            }
                                        }
                                        HyperKycData.SessionResult sessionResult = (HyperKycData.SessionResult) obj5;
                                        if (sessionResult != null && (sessionData$hyperkyc_release = sessionResult.getSessionData$hyperkyc_release()) != null) {
                                            responseBodyRaw$hyperkyc_release = sessionData$hyperkyc_release.getResponseBodyRaw$hyperkyc_release();
                                            Map responseHeaders4 = sessionData$hyperkyc_release.getResponseHeaders();
                                            jSONString = responseHeaders4 != null ? JSONExtsKt.toJSONString(responseHeaders4) : null;
                                            Unit unit15 = Unit.INSTANCE;
                                            Unit unit16 = Unit.INSTANCE;
                                            Object responseValue$hyperkyc_release2222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level22222222222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion42222222222 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb32222222222 = new StringBuilder();
                                            StackTraceElement[] stackTrace32222222222 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace32222222222, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32222222222);
                                            if (stackTraceElement == null) {
                                            }
                                            str3 = "Throwable().stackTrace";
                                            if (str != null) {
                                            }
                                            if (canonicalName3 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                            }
                                            Unit unit52222222222 = Unit.INSTANCE;
                                            if (str4.length() > 23) {
                                            }
                                            sb32222222222.append(str4);
                                            sb32222222222.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release2222222222;
                                            if (str5 == null) {
                                            }
                                            sb32222222222.append(str5);
                                            sb32222222222.append(' ');
                                            sb32222222222.append("");
                                            companion42222222222.log(level22222222222, sb32222222222.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            return responseValue$hyperkyc_release2222222222;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release22222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level222222222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion422222222222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb322222222222 = new StringBuilder();
                                        StackTraceElement[] stackTrace322222222222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace322222222222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace322222222222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit522222222222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb322222222222.append(str4);
                                        sb322222222222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release22222222222;
                                        if (str5 == null) {
                                        }
                                        sb322222222222.append(str5);
                                        sb322222222222.append(' ');
                                        sb322222222222.append("");
                                        companion422222222222.log(level222222222222, sb322222222222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release22222222222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case 861720859:
                                    if (type.equals(WorkflowModule.TYPE_DOCUMENT)) {
                                        String substringBefore$default2 = StringsKt.substringBefore$default(substringAfter$default, ".", (String) null, 2, (Object) null);
                                        substringAfter$default = StringsKt.substringAfter$default(substringAfter$default, ".", (String) null, 2, (Object) null);
                                        Iterator<T> it6 = mainVM.hyperKycData.docResultList().iterator();
                                        while (true) {
                                            if (it6.hasNext()) {
                                                obj6 = it6.next();
                                                if (Intrinsics.areEqual(((HyperKycData.DocResult) obj6).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj6 = null;
                                            }
                                        }
                                        HyperKycData.DocResult docResult = (HyperKycData.DocResult) obj6;
                                        if (docResult != null && (docDataList = docResult.docDataList()) != null) {
                                            Iterator<T> it7 = docDataList.iterator();
                                            while (true) {
                                                if (it7.hasNext()) {
                                                    obj7 = it7.next();
                                                    if (Intrinsics.areEqual(((HyperKycData.DocData) obj7).getSide$hyperkyc_release(), substringBefore$default2)) {
                                                    }
                                                } else {
                                                    obj7 = null;
                                                }
                                            }
                                            HyperKycData.DocData docData = (HyperKycData.DocData) obj7;
                                            if (docData != null) {
                                                String responseBodyRaw$hyperkyc_release2 = docData.getResponseBodyRaw$hyperkyc_release();
                                                Map responseHeaders5 = docData.getResponseHeaders();
                                                String jSONString2 = responseHeaders5 != null ? JSONExtsKt.toJSONString(responseHeaders5) : null;
                                                Unit unit17 = Unit.INSTANCE;
                                                Unit unit18 = Unit.INSTANCE;
                                                String str11 = jSONString2;
                                                responseBodyRaw$hyperkyc_release = responseBodyRaw$hyperkyc_release2;
                                                jSONString = str11;
                                                Object responseValue$hyperkyc_release222222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                                HyperLogger.Level level2222222222222 = HyperLogger.Level.DEBUG;
                                                HyperLogger companion4222222222222 = HyperLogger.INSTANCE.getInstance();
                                                StringBuilder sb3222222222222 = new StringBuilder();
                                                StackTraceElement[] stackTrace3222222222222 = new Throwable().getStackTrace();
                                                Intrinsics.checkNotNullExpressionValue(stackTrace3222222222222, "Throwable().stackTrace");
                                                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3222222222222);
                                                if (stackTraceElement == null) {
                                                }
                                                str3 = "Throwable().stackTrace";
                                                if (str != null) {
                                                }
                                                if (canonicalName3 != null) {
                                                }
                                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                                if (matcher.find()) {
                                                }
                                                Unit unit5222222222222 = Unit.INSTANCE;
                                                if (str4.length() > 23) {
                                                }
                                                sb3222222222222.append(str4);
                                                sb3222222222222.append(" - ");
                                                str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release222222222222;
                                                if (str5 == null) {
                                                }
                                                sb3222222222222.append(str5);
                                                sb3222222222222.append(' ');
                                                sb3222222222222.append("");
                                                companion4222222222222.log(level2222222222222, sb3222222222222.toString());
                                                if (!CoreExtsKt.isRelease()) {
                                                }
                                                return responseValue$hyperkyc_release222222222222;
                                            }
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release2222222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level22222222222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion42222222222222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb32222222222222 = new StringBuilder();
                                        StackTraceElement[] stackTrace32222222222222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace32222222222222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32222222222222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit52222222222222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb32222222222222.append(str4);
                                        sb32222222222222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release2222222222222;
                                        if (str5 == null) {
                                        }
                                        sb32222222222222.append(str5);
                                        sb32222222222222.append(' ');
                                        sb32222222222222.append("");
                                        companion42222222222222.log(level22222222222222, sb32222222222222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release2222222222222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case 1224424441:
                                    if (type.equals(WorkflowModule.TYPE_WEBVIEW)) {
                                        Iterator<T> it8 = mainVM.hyperKycData.webviewResultList().iterator();
                                        while (true) {
                                            if (it8.hasNext()) {
                                                obj8 = it8.next();
                                                if (Intrinsics.areEqual(((HyperKycData.WebviewResult) obj8).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj8 = null;
                                            }
                                        }
                                        HyperKycData.WebviewResult webviewResult = (HyperKycData.WebviewResult) obj8;
                                        if (webviewResult != null && (webviewData$hyperkyc_release = webviewResult.getWebviewData$hyperkyc_release()) != null) {
                                            barcodeData$hyperkyc_release = webviewData$hyperkyc_release.getRawData$hyperkyc_release();
                                            Unit unit19 = Unit.INSTANCE;
                                            Unit unit20 = Unit.INSTANCE;
                                            responseBodyRaw$hyperkyc_release = barcodeData$hyperkyc_release;
                                            jSONString = null;
                                            Object responseValue$hyperkyc_release22222222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level222222222222222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion422222222222222 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb322222222222222 = new StringBuilder();
                                            StackTraceElement[] stackTrace322222222222222 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace322222222222222, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace322222222222222);
                                            if (stackTraceElement == null) {
                                            }
                                            str3 = "Throwable().stackTrace";
                                            if (str != null) {
                                            }
                                            if (canonicalName3 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                            }
                                            Unit unit522222222222222 = Unit.INSTANCE;
                                            if (str4.length() > 23) {
                                            }
                                            sb322222222222222.append(str4);
                                            sb322222222222222.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release22222222222222;
                                            if (str5 == null) {
                                            }
                                            sb322222222222222.append(str5);
                                            sb322222222222222.append(' ');
                                            sb322222222222222.append("");
                                            companion422222222222222.log(level222222222222222, sb322222222222222.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            return responseValue$hyperkyc_release22222222222222;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release222222222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level2222222222222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion4222222222222222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb3222222222222222 = new StringBuilder();
                                        StackTraceElement[] stackTrace3222222222222222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace3222222222222222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3222222222222222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit5222222222222222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb3222222222222222.append(str4);
                                        sb3222222222222222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release222222222222222;
                                        if (str5 == null) {
                                        }
                                        sb3222222222222222.append(str5);
                                        sb3222222222222222.append(' ');
                                        sb3222222222222222.append("");
                                        companion4222222222222222.log(level2222222222222222, sb3222222222222222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release222222222222222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                case 1418861776:
                                    if (type.equals(WorkflowModule.TYPE_VIDEO_STATEMENT_V2)) {
                                        Iterator<T> it9 = mainVM.hyperKycData.videoStatementV2ResultList().iterator();
                                        while (true) {
                                            if (it9.hasNext()) {
                                                obj9 = it9.next();
                                                if (Intrinsics.areEqual(((HyperKycData.VideoStatementV2Result) obj9).getTag$hyperkyc_release(), substringBefore$default)) {
                                                }
                                            } else {
                                                obj9 = null;
                                            }
                                        }
                                        HyperKycData.VideoStatementV2Result videoStatementV2Result = (HyperKycData.VideoStatementV2Result) obj9;
                                        if (videoStatementV2Result != null && (videoStatementV2Data$hyperkyc_release = videoStatementV2Result.getVideoStatementV2Data$hyperkyc_release()) != null) {
                                            responseBodyRaw$hyperkyc_release = videoStatementV2Data$hyperkyc_release.getResponseBodyRaw$hyperkyc_release();
                                            Map responseHeaders6 = videoStatementV2Data$hyperkyc_release.getResponseHeaders();
                                            jSONString = responseHeaders6 != null ? JSONExtsKt.toJSONString(responseHeaders6) : null;
                                            Unit unit21 = Unit.INSTANCE;
                                            Unit unit22 = Unit.INSTANCE;
                                            Object responseValue$hyperkyc_release2222222222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                            HyperLogger.Level level22222222222222222 = HyperLogger.Level.DEBUG;
                                            HyperLogger companion42222222222222222 = HyperLogger.INSTANCE.getInstance();
                                            StringBuilder sb32222222222222222 = new StringBuilder();
                                            StackTraceElement[] stackTrace32222222222222222 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace32222222222222222, "Throwable().stackTrace");
                                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32222222222222222);
                                            if (stackTraceElement == null) {
                                            }
                                            str3 = "Throwable().stackTrace";
                                            if (str != null) {
                                            }
                                            if (canonicalName3 != null) {
                                            }
                                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                            if (matcher.find()) {
                                            }
                                            Unit unit52222222222222222 = Unit.INSTANCE;
                                            if (str4.length() > 23) {
                                            }
                                            sb32222222222222222.append(str4);
                                            sb32222222222222222.append(" - ");
                                            str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release2222222222222222;
                                            if (str5 == null) {
                                            }
                                            sb32222222222222222.append(str5);
                                            sb32222222222222222.append(' ');
                                            sb32222222222222222.append("");
                                            companion42222222222222222.log(level22222222222222222, sb32222222222222222.toString());
                                            if (!CoreExtsKt.isRelease()) {
                                            }
                                            return responseValue$hyperkyc_release2222222222222222;
                                        }
                                        jSONString = null;
                                        responseBodyRaw$hyperkyc_release = null;
                                        Object responseValue$hyperkyc_release22222222222222222 = mainVM.getResponseValue$hyperkyc_release(responseBodyRaw$hyperkyc_release, jSONString, substringAfter$default, str);
                                        HyperLogger.Level level222222222222222222 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion422222222222222222 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb322222222222222222 = new StringBuilder();
                                        StackTraceElement[] stackTrace322222222222222222 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace322222222222222222, "Throwable().stackTrace");
                                        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace322222222222222222);
                                        if (stackTraceElement == null) {
                                        }
                                        str3 = "Throwable().stackTrace";
                                        if (str != null) {
                                        }
                                        if (canonicalName3 != null) {
                                        }
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                        if (matcher.find()) {
                                        }
                                        Unit unit522222222222222222 = Unit.INSTANCE;
                                        if (str4.length() > 23) {
                                        }
                                        sb322222222222222222.append(str4);
                                        sb322222222222222222.append(" - ");
                                        str5 = "injectFromResponse() replacing " + str + " with " + responseValue$hyperkyc_release22222222222222222;
                                        if (str5 == null) {
                                        }
                                        sb322222222222222222.append(str5);
                                        sb322222222222222222.append(' ');
                                        sb322222222222222222.append("");
                                        companion422222222222222222.log(level222222222222222222, sb322222222222222222.toString());
                                        if (!CoreExtsKt.isRelease()) {
                                        }
                                        return responseValue$hyperkyc_release22222222222222222;
                                    }
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                                default:
                                    throw new NotImplementedError("An operation is not implemented: " + ("module type not supported yet: " + type));
                            }
                        }
                    }
                    throw new NoSuchElementException("Collection contains no element matching the predicate.");
                }
                throw new IllegalStateException(("module not found: " + substringBefore$default).toString());
            }
        }
        charSequence = "co.hyperverge";
        str2 = "N/A";
        String substringAfter$default2 = StringsKt.substringAfter$default(str, ".", (String) null, 2, (Object) null);
        String substringBefore$default3 = StringsKt.substringBefore$default(str, ".", (String) null, 2, (Object) null);
        modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
        if (modules != null) {
        }
        throw new IllegalStateException(("module not found: " + substringBefore$default3).toString());
    }

    /* JADX WARN: Code restructure failed: missing block: B:70:0x0358, code lost:
    
        if (r0 != null) goto L137;
     */
    /* JADX WARN: Removed duplicated region for block: B:78:0x037f  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x03ae  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x03b6  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x03d9  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x03db  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x03b3  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final Object getResponseValue$hyperkyc_release(String responseJson, String responseHeaderJson, String responseVar, String path) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String str3;
        String canonicalName2;
        String className;
        Object m1202constructorimpl2;
        String str4;
        String canonicalName3;
        String str5;
        Object m1202constructorimpl3;
        String str6;
        String str7;
        Matcher matcher;
        String localizedMessage;
        String className2;
        String className3;
        String className4;
        String str8 = responseJson;
        Intrinsics.checkNotNullParameter(responseVar, "responseVar");
        Intrinsics.checkNotNullParameter(path, "path");
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        String str9 = "";
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str10 = "getResponseValue() called with: responseJson = " + str8 + ", responseHeaderJson = " + responseHeaderJson + ", responseVar = " + responseVar + ", path = " + path;
        if (str10 == null) {
            str10 = "null ";
        }
        sb.append(str10);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            str = "packageName";
            str2 = "getInitialApplication";
            str3 = path;
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "packageName";
                str2 = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    StringBuilder sb3 = new StringBuilder();
                    sb3.append("getResponseValue() called with: responseJson = ");
                    sb3.append(str8);
                    sb3.append(", responseHeaderJson = ");
                    sb3.append(responseHeaderJson);
                    sb3.append(", responseVar = ");
                    sb3.append(responseVar);
                    sb3.append(", path = ");
                    str3 = path;
                    sb3.append(str3);
                    String sb4 = sb3.toString();
                    if (sb4 == null) {
                        sb4 = "null ";
                    }
                    sb2.append(sb4);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
            } else {
                str = "packageName";
                str2 = "getInitialApplication";
            }
            str3 = path;
        }
        String substringBefore$default = StringsKt.substringBefore$default(responseVar, ".", (String) null, 2, (Object) null);
        String substringAfter$default = StringsKt.substringAfter$default(responseVar, ".", (String) null, 2, (Object) null);
        if (!Intrinsics.areEqual(substringBefore$default, "response")) {
            if (!Intrinsics.areEqual(substringBefore$default, "headers")) {
                throw new NotImplementedError("An operation is not implemented: " + ("path invalid or not supported yet: " + str3));
            }
            str8 = responseHeaderJson;
        }
        if (str8 == null) {
            return null;
        }
        try {
            Result.Companion companion4 = Result.INSTANCE;
            MainVM mainVM = this;
            m1202constructorimpl2 = Result.m1202constructorimpl(new JSONObject(str8));
        } catch (Throwable th2) {
            Result.Companion companion5 = Result.INSTANCE;
            m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
        }
        Object obj = m1202constructorimpl2;
        Throwable m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj);
        if (m1205exceptionOrNullimpl != null) {
            HyperLogger.Level level2 = HyperLogger.Level.ERROR;
            HyperLogger companion6 = HyperLogger.INSTANCE.getInstance();
            StringBuilder sb5 = new StringBuilder();
            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
            Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
            StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
            if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                Class<?> cls3 = getClass();
                canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                if (canonicalName3 == null) {
                    canonicalName3 = "N/A";
                }
            }
            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
            if (matcher4.find()) {
                canonicalName3 = matcher4.replaceAll("");
                Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
            }
            if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                canonicalName3 = canonicalName3.substring(0, 23);
                Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
            }
            sb5.append(canonicalName3);
            sb5.append(" - ");
            sb5.append("unable to convert string to jsonObject");
            sb5.append(' ');
            String localizedMessage2 = m1205exceptionOrNullimpl != null ? m1205exceptionOrNullimpl.getLocalizedMessage() : null;
            if (localizedMessage2 != null) {
                str5 = '\n' + localizedMessage2;
            } else {
                str5 = "";
            }
            sb5.append(str5);
            companion6.log(level2, sb5.toString());
            CoreExtsKt.isRelease();
            try {
                Result.Companion companion7 = Result.INSTANCE;
                Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str2, new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
            } catch (Throwable th3) {
                Result.Companion companion8 = Result.INSTANCE;
                m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                m1202constructorimpl3 = "";
            }
            String str11 = (String) m1202constructorimpl3;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(str11, str);
                if (StringsKt.contains$default((CharSequence) str11, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                    if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                        str4 = null;
                    } else {
                        str4 = null;
                        str6 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls4 = getClass();
                    str6 = cls4 != null ? cls4.getCanonicalName() : str4;
                    if (str6 == null) {
                        str7 = "N/A";
                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                        if (matcher.find()) {
                            str7 = matcher.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(str7, "replaceAll(\"\")");
                        }
                        if (str7.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            str7 = str7.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        StringBuilder sb6 = new StringBuilder();
                        sb6.append("unable to convert string to jsonObject");
                        sb6.append(' ');
                        localizedMessage = m1205exceptionOrNullimpl == null ? m1205exceptionOrNullimpl.getLocalizedMessage() : str4;
                        if (localizedMessage != null) {
                            str9 = '\n' + localizedMessage;
                        }
                        sb6.append(str9);
                        Log.println(6, str7, sb6.toString());
                        return JSONExtsKt.recursiveGet((JSONObject) (Result.m1208isFailureimpl(obj) ? str4 : obj), substringAfter$default);
                    }
                    str7 = str6;
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                    if (matcher.find()) {
                    }
                    if (str7.length() > 23) {
                        str7 = str7.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb62 = new StringBuilder();
                    sb62.append("unable to convert string to jsonObject");
                    sb62.append(' ');
                    if (m1205exceptionOrNullimpl == null) {
                    }
                    if (localizedMessage != null) {
                    }
                    sb62.append(str9);
                    Log.println(6, str7, sb62.toString());
                    return JSONExtsKt.recursiveGet((JSONObject) (Result.m1208isFailureimpl(obj) ? str4 : obj), substringAfter$default);
                }
            }
        }
        str4 = null;
        return JSONExtsKt.recursiveGet((JSONObject) (Result.m1208isFailureimpl(obj) ? str4 : obj), substringAfter$default);
    }

    /* JADX WARN: Code restructure failed: missing block: B:85:0x013a, code lost:
    
        if (r0 == null) goto L55;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final boolean handleDocCaptureFlowBack() {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        boolean z;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        List<WorkflowUIState> list = null;
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "handleDocCaptureFlowBack() called with currentFlowPos : " + this.currentFlowPos;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "handleDocCaptureFlowBack() called with currentFlowPos : " + this.currentFlowPos;
                    sb2.append(str3 != null ? str3 : "null ");
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        if (this.currentFlowPos <= 0) {
            return false;
        }
        List<WorkflowUIState> list2 = this.workflowUIStateList;
        if (list2 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list2 = null;
        }
        boolean z2 = list2.get(this.currentFlowPos) instanceof WorkflowUIState.DocCapture;
        List<WorkflowUIState> list3 = this.workflowUIStateList;
        if (list3 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list3 = null;
        }
        String tag = list3.get(this.currentFlowPos - 1).getTag();
        List<WorkflowUIState> list4 = this.workflowUIStateList;
        if (list4 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list4 = null;
        }
        boolean areEqual = Intrinsics.areEqual(tag, list4.get(this.currentFlowPos).getTag());
        List<WorkflowUIState> list5 = this.workflowUIStateList;
        if (list5 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list5 = null;
        }
        if (!(list5.get(this.currentFlowPos - 1) instanceof WorkflowUIState.DocCapture)) {
            List<WorkflowUIState> list6 = this.workflowUIStateList;
            if (list6 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            } else {
                list = list6;
            }
            if (!(list.get(this.currentFlowPos - 1) instanceof WorkflowUIState.PickDocument)) {
                z = false;
                return !z2 ? false : false;
            }
        }
        z = true;
        return !z2 ? false : false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:214:0x06bd, code lost:
    
        if (r7 != null) goto L280;
     */
    /* JADX WARN: Code restructure failed: missing block: B:324:0x0ab1, code lost:
    
        if (r6 != null) goto L435;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x02a4, code lost:
    
        if (r8 != null) goto L117;
     */
    /* JADX WARN: Removed duplicated region for block: B:157:0x064b  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x04a8 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:209:0x0685  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0246  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0250 A[ADDED_TO_REGION, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0251  */
    /* JADX WARN: Removed duplicated region for block: B:411:0x0e1a  */
    /* JADX WARN: Removed duplicated region for block: B:419:0x0e57  */
    /* JADX WARN: Removed duplicated region for block: B:421:0x0e5a  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x025e  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0438  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0447  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0492  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x04ab  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void handleBackNavigation() {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String canonicalName2;
        String str2;
        String className;
        String str3;
        WorkflowModule moduleForId$hyperkyc_release;
        String previous;
        WorkflowModule moduleForId$hyperkyc_release2;
        CharSequence charSequence;
        String str4;
        String str5;
        Object m1202constructorimpl2;
        String str6;
        MainVM mainVM;
        String canonicalName3;
        String className2;
        String str7;
        WorkflowModule workflowModule;
        int i;
        String str8;
        String str9;
        Object m1202constructorimpl3;
        String str10;
        String str11;
        Matcher matcher;
        String className3;
        String className4;
        int i2;
        int i3;
        String str12;
        Object m1202constructorimpl4;
        String canonicalName4;
        String className5;
        String className6;
        String str13;
        Object m1202constructorimpl5;
        String str14;
        String className7;
        String substringAfterLast$default;
        String className8;
        String className9;
        String str15;
        WorkflowModule workflowModule2;
        String str16;
        String str17;
        Object m1202constructorimpl6;
        String str18;
        String canonicalName5;
        String className10;
        String str19;
        String str20;
        ListIterator listIterator;
        int i4;
        String str21;
        String str22;
        Object m1202constructorimpl7;
        String str23;
        String className11;
        String className12;
        String className13;
        String className14;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className14 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className14, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        StringBuilder sb2 = new StringBuilder();
        sb2.append("handleBackNavigation() called: currentFlowId: ");
        String str24 = this.currentFlowId;
        if (str24 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
            str24 = null;
        }
        sb2.append(str24);
        sb2.append(", workflowUIStateList: ");
        List<WorkflowUIState> list = this.workflowUIStateList;
        if (list == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list = null;
        }
        List<WorkflowUIState> list2 = list;
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(list2, 10));
        Iterator<T> it = list2.iterator();
        while (it.hasNext()) {
            arrayList.add(((WorkflowUIState) it.next()).getTag());
        }
        sb2.append(arrayList);
        sb2.append(", moduleExecutionOrder: ");
        sb2.append(this.moduleExecutionOrder);
        String sb3 = sb2.toString();
        if (sb3 == null) {
            sb3 = "null ";
        }
        sb.append(sb3);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "N/A";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = str;
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb4 = new StringBuilder();
                    StringBuilder sb5 = new StringBuilder();
                    sb5.append("handleBackNavigation() called: currentFlowId: ");
                    String str25 = this.currentFlowId;
                    if (str25 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str25 = null;
                    }
                    sb5.append(str25);
                    sb5.append(", workflowUIStateList: ");
                    List<WorkflowUIState> list3 = this.workflowUIStateList;
                    if (list3 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list3 = null;
                    }
                    List<WorkflowUIState> list4 = list3;
                    str2 = "null ";
                    ArrayList arrayList2 = new ArrayList(CollectionsKt.collectionSizeOrDefault(list4, 10));
                    Iterator<T> it2 = list4.iterator();
                    while (it2.hasNext()) {
                        arrayList2.add(((WorkflowUIState) it2.next()).getTag());
                    }
                    sb5.append(arrayList2);
                    sb5.append(", moduleExecutionOrder: ");
                    sb5.append(this.moduleExecutionOrder);
                    String sb6 = sb5.toString();
                    if (sb6 == null) {
                        sb6 = str2;
                    }
                    sb4.append(sb6);
                    sb4.append(' ');
                    sb4.append("");
                    Log.println(3, canonicalName2, sb4.toString());
                    str3 = this.currentFlowId;
                    if (str3 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str3 = null;
                    }
                    moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(str3);
                    if (moduleForId$hyperkyc_release == null || (previous = moduleForId$hyperkyc_release.getPrevious()) == null) {
                        return;
                    }
                    moduleForId$hyperkyc_release2 = getModuleForId$hyperkyc_release(previous);
                    if (moduleForId$hyperkyc_release2 == null) {
                        String str26 = previous;
                        HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                        HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                        StringBuilder sb7 = new StringBuilder();
                        StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                        if (stackTraceElement3 == null || (className9 = stackTraceElement3.getClassName()) == null) {
                            charSequence = "co.hyperverge";
                            str4 = "Throwable().stackTrace";
                        } else {
                            charSequence = "co.hyperverge";
                            str4 = "Throwable().stackTrace";
                            str5 = StringsKt.substringAfterLast$default(className9, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                        }
                        Class<?> cls3 = getClass();
                        String canonicalName6 = cls3 != null ? cls3.getCanonicalName() : null;
                        str5 = canonicalName6 == null ? str : canonicalName6;
                        Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str5);
                        if (matcher4.find()) {
                            str5 = matcher4.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(str5, "replaceAll(\"\")");
                        }
                        Unit unit3 = Unit.INSTANCE;
                        if (str5.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            str5 = str5.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str5, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        sb7.append(str5);
                        sb7.append(" - ");
                        String str27 = "handleBackNavigation: currentModule: " + moduleForId$hyperkyc_release.getId() + ", previousStep: " + str26 + ", previousStepModule: " + moduleForId$hyperkyc_release2.getId();
                        if (str27 == null) {
                            str27 = str2;
                        }
                        sb7.append(str27);
                        sb7.append(' ');
                        sb7.append("");
                        companion4.log(level2, sb7.toString());
                        if (CoreExtsKt.isRelease()) {
                            mainVM = this;
                            str6 = str4;
                        } else {
                            try {
                                Result.Companion companion5 = Result.INSTANCE;
                                Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                            } catch (Throwable th2) {
                                Result.Companion companion6 = Result.INSTANCE;
                                m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                            }
                            if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                m1202constructorimpl2 = "";
                            }
                            String packageName2 = (String) m1202constructorimpl2;
                            if (CoreExtsKt.isDebug()) {
                                Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                                if (StringsKt.contains$default((CharSequence) packageName2, charSequence, false, 2, (Object) null)) {
                                    StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                    str6 = str4;
                                    Intrinsics.checkNotNullExpressionValue(stackTrace4, str6);
                                    StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                    if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                        Class<?> cls4 = getClass();
                                        canonicalName3 = cls4 != null ? cls4.getCanonicalName() : null;
                                        if (canonicalName3 == null) {
                                            canonicalName3 = str;
                                        }
                                    }
                                    Matcher matcher5 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                                    if (matcher5.find()) {
                                        canonicalName3 = matcher5.replaceAll("");
                                        Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                                    }
                                    Unit unit4 = Unit.INSTANCE;
                                    if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                        canonicalName3 = canonicalName3.substring(0, 23);
                                        Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                                    }
                                    StringBuilder sb8 = new StringBuilder();
                                    String str28 = "handleBackNavigation: currentModule: " + moduleForId$hyperkyc_release.getId() + ", previousStep: " + str26 + ", previousStepModule: " + moduleForId$hyperkyc_release2.getId();
                                    if (str28 == null) {
                                        str28 = str2;
                                    }
                                    sb8.append(str28);
                                    sb8.append(' ');
                                    sb8.append("");
                                    Log.println(3, canonicalName3, sb8.toString());
                                    mainVM = this;
                                }
                            }
                            str6 = str4;
                            mainVM = this;
                        }
                        List<WorkflowUIState> list5 = mainVM.workflowUIStateList;
                        if (list5 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                            list5 = null;
                        }
                        Iterator<WorkflowUIState> it3 = list5.iterator();
                        int i5 = 0;
                        while (true) {
                            if (!it3.hasNext()) {
                                i5 = -1;
                                break;
                            } else if (Intrinsics.areEqual(it3.next().getTag(), moduleForId$hyperkyc_release2.getId())) {
                                break;
                            } else {
                                i5++;
                            }
                        }
                        if (i5 < 0) {
                            HyperLogger.Level level3 = HyperLogger.Level.ERROR;
                            HyperLogger companion7 = HyperLogger.INSTANCE.getInstance();
                            StringBuilder sb9 = new StringBuilder();
                            StackTraceElement[] stackTrace5 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace5, str6);
                            StackTraceElement stackTraceElement5 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5);
                            if (stackTraceElement5 == null || (className8 = stackTraceElement5.getClassName()) == null || (str13 = StringsKt.substringAfterLast$default(className8, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                Class<?> cls5 = getClass();
                                String canonicalName7 = cls5 != null ? cls5.getCanonicalName() : null;
                                str13 = canonicalName7 == null ? str : canonicalName7;
                            }
                            Matcher matcher6 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str13);
                            if (matcher6.find()) {
                                str13 = matcher6.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str13, "replaceAll(\"\")");
                            }
                            Unit unit5 = Unit.INSTANCE;
                            if (str13.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str13 = str13.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str13, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            sb9.append(str13);
                            sb9.append(" - ");
                            String str29 = "handleBackNavigation: previousStepModule " + moduleForId$hyperkyc_release2.getId() + " has not been previously executed";
                            if (str29 == null) {
                                str29 = str2;
                            }
                            sb9.append(str29);
                            sb9.append(' ');
                            sb9.append("");
                            companion7.log(level3, sb9.toString());
                            CoreExtsKt.isRelease();
                            try {
                                Result.Companion companion8 = Result.INSTANCE;
                                Object invoke3 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                Intrinsics.checkNotNull(invoke3, "null cannot be cast to non-null type android.app.Application");
                                m1202constructorimpl5 = Result.m1202constructorimpl(((Application) invoke3).getPackageName());
                            } catch (Throwable th3) {
                                Result.Companion companion9 = Result.INSTANCE;
                                m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
                            }
                            if (Result.m1208isFailureimpl(m1202constructorimpl5)) {
                                m1202constructorimpl5 = "";
                            }
                            String packageName3 = (String) m1202constructorimpl5;
                            if (CoreExtsKt.isDebug()) {
                                Intrinsics.checkNotNullExpressionValue(packageName3, "packageName");
                                if (StringsKt.contains$default((CharSequence) packageName3, charSequence, false, 2, (Object) null)) {
                                    StackTraceElement[] stackTrace6 = new Throwable().getStackTrace();
                                    Intrinsics.checkNotNullExpressionValue(stackTrace6, str6);
                                    StackTraceElement stackTraceElement6 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace6);
                                    if (stackTraceElement6 == null || (className7 = stackTraceElement6.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className7, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                        Class<?> cls6 = getClass();
                                        String canonicalName8 = cls6 != null ? cls6.getCanonicalName() : null;
                                        str14 = canonicalName8 == null ? str : canonicalName8;
                                    } else {
                                        str14 = substringAfterLast$default;
                                    }
                                    Matcher matcher7 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str14);
                                    if (matcher7.find()) {
                                        str14 = matcher7.replaceAll("");
                                        Intrinsics.checkNotNullExpressionValue(str14, "replaceAll(\"\")");
                                    }
                                    Unit unit6 = Unit.INSTANCE;
                                    if (str14.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                        str14 = str14.substring(0, 23);
                                        Intrinsics.checkNotNullExpressionValue(str14, "this as java.lang.String…ing(startIndex, endIndex)");
                                    }
                                    StringBuilder sb10 = new StringBuilder();
                                    String str30 = "handleBackNavigation: previousStepModule " + moduleForId$hyperkyc_release2.getId() + " has not been previously executed";
                                    sb10.append(str30 == null ? str2 : str30);
                                    sb10.append(' ');
                                    sb10.append("");
                                    Log.println(6, str14, sb10.toString());
                                }
                            }
                            this.finishWorkflowEventFlow.tryEmit(new FinishWithResultEvent("error", null, 104, "previousStepModule " + moduleForId$hyperkyc_release2.getId() + " has not been previously executed", true, false, 2, null));
                            return;
                        }
                        int i6 = mainVM.currentFlowPos;
                        int i7 = i5 + 1;
                        if (i7 <= i6) {
                            int i8 = i6;
                            while (true) {
                                List<WorkflowUIState> list6 = mainVM.workflowUIStateList;
                                if (list6 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                                    list6 = null;
                                }
                                list6.remove(mainVM.currentFlowPos);
                                HyperLogger.Level level4 = HyperLogger.Level.DEBUG;
                                HyperLogger companion10 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb11 = new StringBuilder();
                                str7 = str26;
                                StackTraceElement[] stackTrace7 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace7, str6);
                                StackTraceElement stackTraceElement7 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace7);
                                if (stackTraceElement7 == null || (className6 = stackTraceElement7.getClassName()) == null) {
                                    i2 = i7;
                                    i3 = i8;
                                    workflowModule = moduleForId$hyperkyc_release2;
                                } else {
                                    i2 = i7;
                                    i3 = i8;
                                    workflowModule = moduleForId$hyperkyc_release2;
                                    str12 = StringsKt.substringAfterLast$default(className6, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                }
                                Class<?> cls7 = getClass();
                                String canonicalName9 = cls7 != null ? cls7.getCanonicalName() : null;
                                str12 = canonicalName9 == null ? str : canonicalName9;
                                Matcher matcher8 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str12);
                                if (matcher8.find()) {
                                    str12 = matcher8.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(str12, "replaceAll(\"\")");
                                }
                                Unit unit7 = Unit.INSTANCE;
                                if (str12.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    str12 = str12.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str12, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                sb11.append(str12);
                                sb11.append(" - ");
                                StringBuilder sb12 = new StringBuilder();
                                sb12.append("handleBackNavigation: removing ");
                                String str31 = mainVM.currentFlowId;
                                if (str31 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str31 = null;
                                }
                                sb12.append(str31);
                                sb12.append(" from moduleExecutionOrder: ");
                                sb12.append(mainVM.moduleExecutionOrder);
                                String sb13 = sb12.toString();
                                if (sb13 == null) {
                                    sb13 = str2;
                                }
                                sb11.append(sb13);
                                sb11.append(' ');
                                sb11.append("");
                                companion10.log(level4, sb11.toString());
                                if (!CoreExtsKt.isRelease()) {
                                    try {
                                        Result.Companion companion11 = Result.INSTANCE;
                                        Object invoke4 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                        Intrinsics.checkNotNull(invoke4, "null cannot be cast to non-null type android.app.Application");
                                        m1202constructorimpl4 = Result.m1202constructorimpl(((Application) invoke4).getPackageName());
                                    } catch (Throwable th4) {
                                        Result.Companion companion12 = Result.INSTANCE;
                                        m1202constructorimpl4 = Result.m1202constructorimpl(ResultKt.createFailure(th4));
                                    }
                                    if (Result.m1208isFailureimpl(m1202constructorimpl4)) {
                                        m1202constructorimpl4 = "";
                                    }
                                    String packageName4 = (String) m1202constructorimpl4;
                                    if (CoreExtsKt.isDebug()) {
                                        Intrinsics.checkNotNullExpressionValue(packageName4, "packageName");
                                        if (StringsKt.contains$default((CharSequence) packageName4, charSequence, false, 2, (Object) null)) {
                                            StackTraceElement[] stackTrace8 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace8, str6);
                                            StackTraceElement stackTraceElement8 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace8);
                                            if (stackTraceElement8 == null || (className5 = stackTraceElement8.getClassName()) == null || (canonicalName4 = StringsKt.substringAfterLast$default(className5, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                                Class<?> cls8 = getClass();
                                                canonicalName4 = cls8 != null ? cls8.getCanonicalName() : null;
                                                if (canonicalName4 == null) {
                                                    canonicalName4 = str;
                                                }
                                            }
                                            Matcher matcher9 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName4);
                                            if (matcher9.find()) {
                                                canonicalName4 = matcher9.replaceAll("");
                                                Intrinsics.checkNotNullExpressionValue(canonicalName4, "replaceAll(\"\")");
                                            }
                                            Unit unit8 = Unit.INSTANCE;
                                            if (canonicalName4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                canonicalName4 = canonicalName4.substring(0, 23);
                                                Intrinsics.checkNotNullExpressionValue(canonicalName4, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            StringBuilder sb14 = new StringBuilder();
                                            StringBuilder sb15 = new StringBuilder();
                                            sb15.append("handleBackNavigation: removing ");
                                            String str32 = mainVM.currentFlowId;
                                            if (str32 == null) {
                                                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                                str32 = null;
                                            }
                                            sb15.append(str32);
                                            sb15.append(" from moduleExecutionOrder: ");
                                            sb15.append(mainVM.moduleExecutionOrder);
                                            String sb16 = sb15.toString();
                                            if (sb16 == null) {
                                                sb16 = str2;
                                            }
                                            sb14.append(sb16);
                                            sb14.append(' ');
                                            sb14.append("");
                                            Log.println(3, canonicalName4, sb14.toString());
                                        }
                                    }
                                }
                                List<String> list7 = mainVM.moduleExecutionOrder;
                                Object last = CollectionsKt.last((List<? extends Object>) list7);
                                String str33 = mainVM.currentFlowId;
                                if (str33 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str33 = null;
                                }
                                if (!Intrinsics.areEqual(last, str33)) {
                                    list7 = null;
                                }
                                if (list7 != null) {
                                }
                                String str34 = mainVM.currentFlowId;
                                if (str34 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str34 = null;
                                }
                                mainVM.deleteModuleData(str34);
                                HashMap<String, TransactionState.ModuleData> hashMap = mainVM.moduleDataMap;
                                String str35 = mainVM.currentFlowId;
                                if (str35 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str35 = null;
                                }
                                hashMap.put(str35, new TransactionState.ModuleData(TransactionState.ModuleData.DEFAULT_EXPIRY, TransactionState.ModuleData.ACTION_DELETE, null, null, null, getLastParentModuleId(), 28, null));
                                int i9 = mainVM.currentFlowPos;
                                mainVM.currentFlowPos = i9 - 1;
                                mainVM.previousFlowPos = i9;
                                mainVM.currentFlowId = getCurrentModuleId$hyperkyc_release();
                                i7 = i2;
                                int i10 = i3;
                                if (i10 == i7) {
                                    break;
                                }
                                i8 = i10 - 1;
                                moduleForId$hyperkyc_release2 = workflowModule;
                                str26 = str7;
                            }
                        } else {
                            str7 = str26;
                            workflowModule = moduleForId$hyperkyc_release2;
                        }
                        Iterator<String> it4 = mainVM.workflowExecutionOrder.iterator();
                        int i11 = 0;
                        while (true) {
                            if (!it4.hasNext()) {
                                i = -1;
                                break;
                            } else {
                                if (Intrinsics.areEqual(it4.next(), workflowModule.getId())) {
                                    i = i11;
                                    break;
                                }
                                i11++;
                            }
                        }
                        if (i >= 0) {
                            AnalyticsLogger analyticsLogger = AnalyticsLogger.INSTANCE;
                            Map<String, Object> analyticsForModule$hyperkyc_release = mainVM.getAnalyticsForModule$hyperkyc_release(moduleForId$hyperkyc_release.getId(), AnalyticsLogger.Events.MODULE_USER_BACK_PRESS);
                            String str36 = mainVM.currentFlowId;
                            if (str36 == null) {
                                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                str8 = null;
                            } else {
                                str8 = str36;
                            }
                            analyticsForModule$hyperkyc_release.put(AnalyticsLogger.Keys.NEXTSTEP, str8);
                            Unit unit9 = Unit.INSTANCE;
                            analyticsLogger.logModuleUserBackPressEvent$hyperkyc_release(analyticsForModule$hyperkyc_release);
                            AnalyticsLogger.INSTANCE.logBackPressedEvents$hyperkyc_release(mainVM.workflowExecutionOrder, i);
                            int size = mainVM.workflowExecutionOrder.size() - i;
                            for (int i12 = 0; i12 < size; i12++) {
                                CollectionsKt.removeLastOrNull(mainVM.workflowExecutionOrder);
                            }
                            return;
                        }
                        HyperLogger.Level level5 = HyperLogger.Level.ERROR;
                        HyperLogger companion13 = HyperLogger.INSTANCE.getInstance();
                        StringBuilder sb17 = new StringBuilder();
                        StackTraceElement[] stackTrace9 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace9, str6);
                        StackTraceElement stackTraceElement9 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace9);
                        if (stackTraceElement9 == null || (className4 = stackTraceElement9.getClassName()) == null || (str9 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                            Class<?> cls9 = getClass();
                            String canonicalName10 = cls9 != null ? cls9.getCanonicalName() : null;
                            str9 = canonicalName10 == null ? str : canonicalName10;
                        }
                        Matcher matcher10 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str9);
                        if (matcher10.find()) {
                            str9 = matcher10.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(str9, "replaceAll(\"\")");
                        }
                        Unit unit10 = Unit.INSTANCE;
                        if (str9.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            str9 = str9.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str9, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        sb17.append(str9);
                        sb17.append(" - ");
                        StringBuilder sb18 = new StringBuilder();
                        sb18.append("handleBackNavigation: previousStep - ");
                        String str37 = str7;
                        sb18.append(str37);
                        sb18.append(": unable to handle back navigation analytics");
                        String sb19 = sb18.toString();
                        if (sb19 == null) {
                            sb19 = str2;
                        }
                        sb17.append(sb19);
                        sb17.append(' ');
                        sb17.append("");
                        companion13.log(level5, sb17.toString());
                        CoreExtsKt.isRelease();
                        try {
                            Result.Companion companion14 = Result.INSTANCE;
                            Object invoke5 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke5, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke5).getPackageName());
                        } catch (Throwable th5) {
                            Result.Companion companion15 = Result.INSTANCE;
                            m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th5));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                            m1202constructorimpl3 = "";
                        }
                        String packageName5 = (String) m1202constructorimpl3;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(packageName5, "packageName");
                            if (StringsKt.contains$default((CharSequence) packageName5, charSequence, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace10 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace10, str6);
                                StackTraceElement stackTraceElement10 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace10);
                                if (stackTraceElement10 == null || (className3 = stackTraceElement10.getClassName()) == null) {
                                    str10 = null;
                                } else {
                                    str10 = null;
                                    String substringAfterLast$default2 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                    if (substringAfterLast$default2 != null) {
                                        str11 = substringAfterLast$default2;
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                        if (matcher.find()) {
                                            str11 = matcher.replaceAll("");
                                            Intrinsics.checkNotNullExpressionValue(str11, "replaceAll(\"\")");
                                        }
                                        Unit unit11 = Unit.INSTANCE;
                                        if (str11.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                            str11 = str11.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        StringBuilder sb20 = new StringBuilder();
                                        String str38 = "handleBackNavigation: previousStep - " + str37 + ": unable to handle back navigation analytics";
                                        sb20.append(str38 != null ? str2 : str38);
                                        sb20.append(' ');
                                        sb20.append("");
                                        Log.println(6, str11, sb20.toString());
                                    }
                                }
                                Class<?> cls10 = getClass();
                                String canonicalName11 = cls10 != null ? cls10.getCanonicalName() : str10;
                                str11 = canonicalName11 == null ? str : canonicalName11;
                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                if (matcher.find()) {
                                }
                                Unit unit112 = Unit.INSTANCE;
                                if (str11.length() > 23) {
                                    str11 = str11.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb202 = new StringBuilder();
                                String str382 = "handleBackNavigation: previousStep - " + str37 + ": unable to handle back navigation analytics";
                                sb202.append(str382 != null ? str2 : str382);
                                sb202.append(' ');
                                sb202.append("");
                                Log.println(6, str11, sb202.toString());
                            }
                        }
                        mainVM.workflowExecutionOrder.clear();
                        return;
                    }
                    List<WorkflowUIState> list8 = this.workflowUIStateList;
                    if (list8 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list8 = null;
                    }
                    list8.remove(this.currentFlowPos);
                    HyperLogger.Level level6 = HyperLogger.Level.DEBUG;
                    HyperLogger companion16 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb21 = new StringBuilder();
                    StackTraceElement[] stackTrace11 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace11, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement11 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace11);
                    if (stackTraceElement11 == null || (className13 = stackTraceElement11.getClassName()) == null) {
                        str15 = "Throwable().stackTrace";
                        workflowModule2 = moduleForId$hyperkyc_release;
                        str16 = previous;
                    } else {
                        str15 = "Throwable().stackTrace";
                        workflowModule2 = moduleForId$hyperkyc_release;
                        str16 = previous;
                        str17 = StringsKt.substringAfterLast$default(className13, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls11 = getClass();
                    String canonicalName12 = cls11 != null ? cls11.getCanonicalName() : null;
                    str17 = canonicalName12 == null ? str : canonicalName12;
                    Matcher matcher11 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str17);
                    if (matcher11.find()) {
                        str17 = matcher11.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str17, "replaceAll(\"\")");
                    }
                    Unit unit12 = Unit.INSTANCE;
                    if (str17.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str17 = str17.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str17, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb21.append(str17);
                    sb21.append(" - ");
                    StringBuilder sb22 = new StringBuilder();
                    sb22.append("flowBack: removing ");
                    String str39 = this.currentFlowId;
                    if (str39 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str39 = null;
                    }
                    sb22.append(str39);
                    sb22.append(" from moduleExecutionOrder: ");
                    sb22.append(this.moduleExecutionOrder);
                    String sb23 = sb22.toString();
                    if (sb23 == null) {
                        sb23 = str2;
                    }
                    sb21.append(sb23);
                    sb21.append(' ');
                    sb21.append("");
                    companion16.log(level6, sb21.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion17 = Result.INSTANCE;
                            Object invoke6 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke6, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl6 = Result.m1202constructorimpl(((Application) invoke6).getPackageName());
                        } catch (Throwable th6) {
                            Result.Companion companion18 = Result.INSTANCE;
                            m1202constructorimpl6 = Result.m1202constructorimpl(ResultKt.createFailure(th6));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl6)) {
                            m1202constructorimpl6 = "";
                        }
                        String packageName6 = (String) m1202constructorimpl6;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(packageName6, "packageName");
                            if (StringsKt.contains$default((CharSequence) packageName6, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace12 = new Throwable().getStackTrace();
                                str18 = str15;
                                Intrinsics.checkNotNullExpressionValue(stackTrace12, str18);
                                StackTraceElement stackTraceElement12 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace12);
                                if (stackTraceElement12 == null || (className10 = stackTraceElement12.getClassName()) == null || (canonicalName5 = StringsKt.substringAfterLast$default(className10, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls12 = getClass();
                                    canonicalName5 = cls12 != null ? cls12.getCanonicalName() : null;
                                    if (canonicalName5 == null) {
                                        canonicalName5 = str;
                                    }
                                }
                                Matcher matcher12 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName5);
                                if (matcher12.find()) {
                                    canonicalName5 = matcher12.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(canonicalName5, "replaceAll(\"\")");
                                }
                                Unit unit13 = Unit.INSTANCE;
                                if (canonicalName5.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    canonicalName5 = canonicalName5.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(canonicalName5, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb24 = new StringBuilder();
                                StringBuilder sb25 = new StringBuilder();
                                sb25.append("flowBack: removing ");
                                String str40 = this.currentFlowId;
                                if (str40 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str40 = null;
                                }
                                sb25.append(str40);
                                sb25.append(" from moduleExecutionOrder: ");
                                sb25.append(this.moduleExecutionOrder);
                                String sb26 = sb25.toString();
                                if (sb26 == null) {
                                    sb26 = str2;
                                }
                                sb24.append(sb26);
                                sb24.append(' ');
                                sb24.append("");
                                Log.println(3, canonicalName5, sb24.toString());
                                CollectionsKt.removeLast(this.moduleExecutionOrder);
                                str19 = this.currentFlowId;
                                if (str19 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str19 = null;
                                }
                                deleteModuleData(str19);
                                HashMap<String, TransactionState.ModuleData> hashMap2 = this.moduleDataMap;
                                str20 = this.currentFlowId;
                                if (str20 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str20 = null;
                                }
                                hashMap2.put(str20, new TransactionState.ModuleData(TransactionState.ModuleData.DEFAULT_EXPIRY, TransactionState.ModuleData.ACTION_DELETE, null, null, null, getLastParentModuleId(), 28, null));
                                int i13 = this.currentFlowPos;
                                this.currentFlowPos = i13 - 1;
                                this.previousFlowPos = i13;
                                this.currentFlowId = getCurrentModuleId$hyperkyc_release();
                                List mutableList = CollectionsKt.toMutableList((Collection) this.workflowExecutionOrder);
                                CollectionsKt.dropLast(mutableList, 1);
                                listIterator = mutableList.listIterator(mutableList.size());
                                while (true) {
                                    if (!listIterator.hasPrevious()) {
                                        if (StringsKt.startsWith$default((String) listIterator.previous(), WorkflowModule.PREFIX_MODULE, false, 2, (Object) null)) {
                                            i4 = listIterator.nextIndex();
                                            break;
                                        }
                                    } else {
                                        i4 = -1;
                                        break;
                                    }
                                }
                                if (i4 < 0) {
                                    AnalyticsLogger analyticsLogger2 = AnalyticsLogger.INSTANCE;
                                    Map<String, Object> analyticsForModule$hyperkyc_release2 = getAnalyticsForModule$hyperkyc_release(workflowModule2.getId(), AnalyticsLogger.Events.MODULE_USER_BACK_PRESS);
                                    String str41 = this.currentFlowId;
                                    if (str41 == null) {
                                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                        str21 = null;
                                    } else {
                                        str21 = str41;
                                    }
                                    analyticsForModule$hyperkyc_release2.put(AnalyticsLogger.Keys.NEXTSTEP, str21);
                                    Unit unit14 = Unit.INSTANCE;
                                    analyticsLogger2.logModuleUserBackPressEvent$hyperkyc_release(analyticsForModule$hyperkyc_release2);
                                    AnalyticsLogger.INSTANCE.logBackPressedEvents$hyperkyc_release(this.workflowExecutionOrder, i4);
                                    int size2 = this.workflowExecutionOrder.size() - i4;
                                    for (int i14 = 0; i14 < size2; i14++) {
                                        CollectionsKt.removeLastOrNull(this.workflowExecutionOrder);
                                    }
                                    return;
                                }
                                HyperLogger.Level level7 = HyperLogger.Level.ERROR;
                                HyperLogger companion19 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb27 = new StringBuilder();
                                StackTraceElement[] stackTrace13 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace13, str18);
                                StackTraceElement stackTraceElement13 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace13);
                                if (stackTraceElement13 == null || (className12 = stackTraceElement13.getClassName()) == null || (str22 = StringsKt.substringAfterLast$default(className12, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                    Class<?> cls13 = getClass();
                                    String canonicalName13 = cls13 != null ? cls13.getCanonicalName() : null;
                                    str22 = canonicalName13 == null ? str : canonicalName13;
                                }
                                Matcher matcher13 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str22);
                                if (matcher13.find()) {
                                    str22 = matcher13.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(str22, "replaceAll(\"\")");
                                }
                                Unit unit15 = Unit.INSTANCE;
                                if (str22.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    str22 = str22.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str22, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                sb27.append(str22);
                                sb27.append(" - ");
                                StringBuilder sb28 = new StringBuilder();
                                sb28.append("handleBackNavigation: invalid previousStep - ");
                                String str42 = str16;
                                sb28.append(str42);
                                sb28.append(": unable to handle back navigation analytics");
                                String sb29 = sb28.toString();
                                if (sb29 == null) {
                                    sb29 = str2;
                                }
                                sb27.append(sb29);
                                sb27.append(' ');
                                sb27.append("");
                                companion19.log(level7, sb27.toString());
                                CoreExtsKt.isRelease();
                                try {
                                    Result.Companion companion20 = Result.INSTANCE;
                                    Object invoke7 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                    Intrinsics.checkNotNull(invoke7, "null cannot be cast to non-null type android.app.Application");
                                    m1202constructorimpl7 = Result.m1202constructorimpl(((Application) invoke7).getPackageName());
                                } catch (Throwable th7) {
                                    Result.Companion companion21 = Result.INSTANCE;
                                    m1202constructorimpl7 = Result.m1202constructorimpl(ResultKt.createFailure(th7));
                                }
                                if (Result.m1208isFailureimpl(m1202constructorimpl7)) {
                                    m1202constructorimpl7 = "";
                                }
                                String packageName7 = (String) m1202constructorimpl7;
                                if (CoreExtsKt.isDebug()) {
                                    Intrinsics.checkNotNullExpressionValue(packageName7, "packageName");
                                    if (StringsKt.contains$default((CharSequence) packageName7, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                                        StackTraceElement[] stackTrace14 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace14, str18);
                                        StackTraceElement stackTraceElement14 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace14);
                                        if (stackTraceElement14 == null || (className11 = stackTraceElement14.getClassName()) == null || (str23 = StringsKt.substringAfterLast$default(className11, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                            Class<?> cls14 = getClass();
                                            String canonicalName14 = cls14 != null ? cls14.getCanonicalName() : null;
                                            str23 = canonicalName14 == null ? str : canonicalName14;
                                        }
                                        Matcher matcher14 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str23);
                                        if (matcher14.find()) {
                                            str23 = matcher14.replaceAll("");
                                            Intrinsics.checkNotNullExpressionValue(str23, "replaceAll(\"\")");
                                        }
                                        Unit unit16 = Unit.INSTANCE;
                                        if (str23.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                            str23 = str23.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str23, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        StringBuilder sb30 = new StringBuilder();
                                        String str43 = "handleBackNavigation: invalid previousStep - " + str42 + ": unable to handle back navigation analytics";
                                        sb30.append(str43 == null ? str2 : str43);
                                        sb30.append(' ');
                                        sb30.append("");
                                        Log.println(6, str23, sb30.toString());
                                    }
                                }
                                this.workflowExecutionOrder.clear();
                                return;
                            }
                        }
                    }
                    str18 = str15;
                    CollectionsKt.removeLast(this.moduleExecutionOrder);
                    str19 = this.currentFlowId;
                    if (str19 == null) {
                    }
                    deleteModuleData(str19);
                    HashMap<String, TransactionState.ModuleData> hashMap22 = this.moduleDataMap;
                    str20 = this.currentFlowId;
                    if (str20 == null) {
                    }
                    hashMap22.put(str20, new TransactionState.ModuleData(TransactionState.ModuleData.DEFAULT_EXPIRY, TransactionState.ModuleData.ACTION_DELETE, null, null, null, getLastParentModuleId(), 28, null));
                    int i132 = this.currentFlowPos;
                    this.currentFlowPos = i132 - 1;
                    this.previousFlowPos = i132;
                    this.currentFlowId = getCurrentModuleId$hyperkyc_release();
                    List mutableList2 = CollectionsKt.toMutableList((Collection) this.workflowExecutionOrder);
                    CollectionsKt.dropLast(mutableList2, 1);
                    listIterator = mutableList2.listIterator(mutableList2.size());
                    while (true) {
                        if (!listIterator.hasPrevious()) {
                        }
                    }
                    if (i4 < 0) {
                    }
                }
                str2 = "null ";
                str3 = this.currentFlowId;
                if (str3 == null) {
                }
                moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(str3);
                if (moduleForId$hyperkyc_release == null) {
                    return;
                }
                moduleForId$hyperkyc_release2 = getModuleForId$hyperkyc_release(previous);
                if (moduleForId$hyperkyc_release2 == null) {
                }
            }
        }
        str = "N/A";
        str2 = "null ";
        str3 = this.currentFlowId;
        if (str3 == null) {
        }
        moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(str3);
        if (moduleForId$hyperkyc_release == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:37:0x01e1, code lost:
    
        if (r10 != null) goto L93;
     */
    /* JADX WARN: Code restructure failed: missing block: B:78:0x02ec, code lost:
    
        if (r0 != null) goto L136;
     */
    /* JADX WARN: Removed duplicated region for block: B:21:0x017a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final boolean flowBackToNearestStartSessionModule() {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String canonicalName2;
        String className;
        String str2;
        String str3;
        String str4;
        Object m1202constructorimpl2;
        String str5;
        String str6;
        String str7;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        String str8 = "Throwable().stackTrace";
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        boolean z = false;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        sb.append("flowBackToNearestStartSessionModule() called");
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        String str9 = "co.hyperverge";
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "N/A";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = str;
                        }
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher2.find()) {
                        canonicalName2 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    Log.println(3, canonicalName2, "flowBackToNearestStartSessionModule() called ");
                }
                while (this.currentFlowPos > 0) {
                    String str10 = this.currentFlowId;
                    if (str10 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str10 = null;
                    }
                    WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(str10);
                    if (Intrinsics.areEqual(moduleForId$hyperkyc_release != null ? moduleForId$hyperkyc_release.getType() : null, WorkflowModule.TYPE_START_SESSION_RECORDING)) {
                        updateUiState();
                        return true;
                    }
                    List<WorkflowUIState> list = this.workflowUIStateList;
                    if (list == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list = null;
                    }
                    list.remove(this.currentFlowPos);
                    HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                    HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb2 = new StringBuilder();
                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace3, str8);
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                    if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null) {
                        str2 = str9;
                        str3 = str8;
                    } else {
                        str2 = str9;
                        str3 = str8;
                        str4 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls3 = getClass();
                    String canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                    str4 = canonicalName3 == null ? str : canonicalName3;
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                    if (matcher3.find()) {
                        str4 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                    }
                    if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str4 = str4.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb2.append(str4);
                    sb2.append(" - ");
                    StringBuilder sb3 = new StringBuilder();
                    sb3.append("flowBackToNearestStartSessionModule: removing ");
                    String str11 = this.currentFlowId;
                    if (str11 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str11 = null;
                    }
                    sb3.append(str11);
                    sb3.append(" from moduleExecutionOrder: ");
                    sb3.append(this.moduleExecutionOrder);
                    String sb4 = sb3.toString();
                    if (sb4 == null) {
                        sb4 = "null ";
                    }
                    sb2.append(sb4);
                    sb2.append(' ');
                    sb2.append("");
                    companion4.log(level2, sb2.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion5 = Result.INSTANCE;
                            Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                        } catch (Throwable th2) {
                            Result.Companion companion6 = Result.INSTANCE;
                            m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                            m1202constructorimpl2 = "";
                        }
                        String packageName2 = (String) m1202constructorimpl2;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                            if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) str2, false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                str5 = str3;
                                Intrinsics.checkNotNullExpressionValue(stackTrace4, str5);
                                StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                    str6 = null;
                                } else {
                                    str6 = null;
                                    str7 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                }
                                Class<?> cls4 = getClass();
                                str7 = cls4 != null ? cls4.getCanonicalName() : str6;
                                if (str7 == null) {
                                    str7 = str;
                                }
                                Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                if (matcher4.find()) {
                                    str7 = matcher4.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(str7, "replaceAll(\"\")");
                                }
                                if (str7.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    str7 = str7.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb5 = new StringBuilder();
                                StringBuilder sb6 = new StringBuilder();
                                sb6.append("flowBackToNearestStartSessionModule: removing ");
                                String str12 = this.currentFlowId;
                                if (str12 == null) {
                                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                                    str12 = null;
                                }
                                sb6.append(str12);
                                sb6.append(" from moduleExecutionOrder: ");
                                sb6.append(this.moduleExecutionOrder);
                                String sb7 = sb6.toString();
                                if (sb7 == null) {
                                    sb7 = "null ";
                                }
                                sb5.append(sb7);
                                sb5.append(' ');
                                sb5.append("");
                                Log.println(3, str7, sb5.toString());
                                CollectionsKt.removeLast(this.moduleExecutionOrder);
                                int i = this.currentFlowPos;
                                this.currentFlowPos = i - 1;
                                this.previousFlowPos = i;
                                this.currentFlowId = getCurrentModuleId$hyperkyc_release();
                                str8 = str5;
                                str9 = str2;
                                z = false;
                            }
                        }
                    }
                    str5 = str3;
                    CollectionsKt.removeLast(this.moduleExecutionOrder);
                    int i2 = this.currentFlowPos;
                    this.currentFlowPos = i2 - 1;
                    this.previousFlowPos = i2;
                    this.currentFlowId = getCurrentModuleId$hyperkyc_release();
                    str8 = str5;
                    str9 = str2;
                    z = false;
                }
                return z;
            }
        }
        str = "N/A";
        while (this.currentFlowPos > 0) {
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:89:0x03c3, code lost:
    
        if (r0 != null) goto L164;
     */
    /* JADX WARN: Removed duplicated region for block: B:115:0x02d2  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x02da  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x02dd  */
    /* JADX WARN: Removed duplicated region for block: B:119:0x02d7  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x024b  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0257  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0282  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x028b  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x02ef  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0332  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x034d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void updateUiState() {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        String str;
        String str2;
        List<WorkflowUIState> list;
        StackTraceElement stackTraceElement;
        String str3;
        Matcher matcher;
        String str4;
        Object m1202constructorimpl2;
        String str5;
        String str6;
        String className2;
        String className3;
        Object obj;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement2 == null || (className4 = stackTraceElement2.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        StringBuilder sb2 = new StringBuilder();
        sb2.append("updateUiState() called: workflowUIStateList: ");
        List<WorkflowUIState> list2 = this.workflowUIStateList;
        if (list2 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
            list2 = null;
        }
        List<WorkflowUIState> list3 = list2;
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(list3, 10));
        Iterator<T> it = list3.iterator();
        while (it.hasNext()) {
            arrayList.add(((WorkflowUIState) it.next()).getTag());
        }
        sb2.append(arrayList);
        String sb3 = sb2.toString();
        if (sb3 == null) {
            sb3 = "null ";
        }
        sb.append(sb3);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement3 == null || (className = stackTraceElement3.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb4 = new StringBuilder();
                    StringBuilder sb5 = new StringBuilder();
                    sb5.append("updateUiState() called: workflowUIStateList: ");
                    List<WorkflowUIState> list4 = this.workflowUIStateList;
                    if (list4 == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                        list4 = null;
                    }
                    List<WorkflowUIState> list5 = list4;
                    ArrayList arrayList2 = new ArrayList(CollectionsKt.collectionSizeOrDefault(list5, 10));
                    Iterator<T> it2 = list5.iterator();
                    while (it2.hasNext()) {
                        arrayList2.add(((WorkflowUIState) it2.next()).getTag());
                    }
                    sb5.append(arrayList2);
                    String sb6 = sb5.toString();
                    if (sb6 == null) {
                        sb6 = "null ";
                    }
                    sb4.append(sb6);
                    sb4.append(' ');
                    sb4.append("");
                    Log.println(3, canonicalName2, sb4.toString());
                }
            }
        }
        List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
        if (modules != null) {
            Iterator<T> it3 = modules.iterator();
            while (true) {
                if (!it3.hasNext()) {
                    obj = null;
                    break;
                }
                obj = it3.next();
                String id2 = ((WorkflowModule) obj).getId();
                String str7 = this.currentFlowId;
                if (str7 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str7 = null;
                }
                if (Intrinsics.areEqual(id2, str7)) {
                    break;
                }
            }
            WorkflowModule workflowModule = (WorkflowModule) obj;
            if (workflowModule != null) {
                str = workflowModule.getUiStyle();
                if (str == null) {
                    this.lastParentModulePos = Integer.valueOf(this.currentFlowPos);
                }
                str2 = this.currentFlowId;
                if (str2 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str2 = null;
                }
                addToModuleExecutionOrder(str2);
                saveStateLocally$hyperkyc_release$default(this, false, null, false, 7, null);
                if (!this.moduleDataMap.isEmpty()) {
                    enqueueStatePush$hyperkyc_release$default(this, null, 1, null);
                }
                list = this.workflowUIStateList;
                if (list == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                    list = null;
                }
                WorkflowUIState workflowUIState = list.get(this.currentFlowPos);
                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb7 = new StringBuilder();
                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                if (stackTraceElement != null || (className3 = stackTraceElement.getClassName()) == null || (str3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                    Class<?> cls3 = getClass();
                    String canonicalName3 = cls3 == null ? cls3.getCanonicalName() : null;
                    str3 = canonicalName3 != null ? "N/A" : canonicalName3;
                }
                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
                if (matcher.find()) {
                    str3 = matcher.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(str3, "replaceAll(\"\")");
                }
                Unit unit3 = Unit.INSTANCE;
                if (str3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    str3 = str3.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb7.append(str3);
                sb7.append(" - ");
                str4 = "updateUiState() called with currentFlowPos: " + this.currentFlowPos + ", uiState: " + workflowUIState;
                if (str4 == null) {
                    str4 = "null ";
                }
                sb7.append(str4);
                sb7.append(' ');
                sb7.append("");
                companion4.log(level2, sb7.toString());
                if (!CoreExtsKt.isRelease()) {
                    try {
                        Result.Companion companion5 = Result.INSTANCE;
                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                    } catch (Throwable th2) {
                        Result.Companion companion6 = Result.INSTANCE;
                        m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                        m1202constructorimpl2 = "";
                    }
                    String packageName2 = (String) m1202constructorimpl2;
                    if (CoreExtsKt.isDebug()) {
                        Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                        if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                            if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                str5 = null;
                            } else {
                                str5 = null;
                                str6 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                            }
                            Class<?> cls4 = getClass();
                            String canonicalName4 = cls4 != null ? cls4.getCanonicalName() : str5;
                            str6 = canonicalName4 == null ? "N/A" : canonicalName4;
                            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str6);
                            if (matcher4.find()) {
                                str6 = matcher4.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str6, "replaceAll(\"\")");
                            }
                            Unit unit4 = Unit.INSTANCE;
                            if (str6.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str6 = str6.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str6, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            StringBuilder sb8 = new StringBuilder();
                            String str8 = "updateUiState() called with currentFlowPos: " + this.currentFlowPos + ", uiState: " + workflowUIState;
                            sb8.append(str8 != null ? str8 : "null ");
                            sb8.append(' ');
                            sb8.append("");
                            Log.println(4, str6, sb8.toString());
                        }
                    }
                }
                logModuleStartedEvent(workflowUIState);
                this.workflowUIStateFlow.tryEmit(workflowUIState);
            }
        }
        str = null;
        if (str == null) {
        }
        str2 = this.currentFlowId;
        if (str2 == null) {
        }
        addToModuleExecutionOrder(str2);
        saveStateLocally$hyperkyc_release$default(this, false, null, false, 7, null);
        if (!this.moduleDataMap.isEmpty()) {
        }
        list = this.workflowUIStateList;
        if (list == null) {
        }
        WorkflowUIState workflowUIState2 = list.get(this.currentFlowPos);
        HyperLogger.Level level22 = HyperLogger.Level.DEBUG;
        HyperLogger companion42 = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb72 = new StringBuilder();
        StackTraceElement[] stackTrace32 = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace32, "Throwable().stackTrace");
        stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32);
        if (stackTraceElement != null) {
        }
        Class<?> cls32 = getClass();
        if (cls32 == null) {
        }
        if (canonicalName3 != null) {
        }
        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
        if (matcher.find()) {
        }
        Unit unit32 = Unit.INSTANCE;
        if (str3.length() > 23) {
            str3 = str3.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb72.append(str3);
        sb72.append(" - ");
        str4 = "updateUiState() called with currentFlowPos: " + this.currentFlowPos + ", uiState: " + workflowUIState2;
        if (str4 == null) {
        }
        sb72.append(str4);
        sb72.append(' ');
        sb72.append("");
        companion42.log(level22, sb72.toString());
        if (!CoreExtsKt.isRelease()) {
        }
        logModuleStartedEvent(workflowUIState2);
        this.workflowUIStateFlow.tryEmit(workflowUIState2);
    }

    /* JADX WARN: Code restructure failed: missing block: B:67:0x013c, code lost:
    
        if (r0 != null) goto L55;
     */
    /* JADX WARN: Code restructure failed: missing block: B:71:0x014c, code lost:
    
        if (r0 == null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x0150, code lost:
    
        r0 = co.hyperverge.hyperkyc.utils.extensions.LogExtsKt.ANON_CLASS_PATTERN.matcher(r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:73:0x015f, code lost:
    
        if (r0.find() == false) goto L59;
     */
    /* JADX WARN: Code restructure failed: missing block: B:74:0x0161, code lost:
    
        r7 = r0.replaceAll("");
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r7, "replaceAll(\"\")");
     */
    /* JADX WARN: Code restructure failed: missing block: B:76:0x016c, code lost:
    
        if (r7.length() <= 23) goto L65;
     */
    /* JADX WARN: Code restructure failed: missing block: B:78:0x0172, code lost:
    
        if (android.os.Build.VERSION.SDK_INT < 26) goto L64;
     */
    /* JADX WARN: Code restructure failed: missing block: B:79:0x0175, code lost:
    
        r7 = r7.substring(0, 23);
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r7, "this as java.lang.String…ing(startIndex, endIndex)");
     */
    /* JADX WARN: Code restructure failed: missing block: B:80:0x017c, code lost:
    
        r0 = new java.lang.StringBuilder();
        r3 = "updateCountryResult() called with: kycCountry = " + r23 + ", incrementAttempts = " + r24;
     */
    /* JADX WARN: Code restructure failed: missing block: B:81:0x0196, code lost:
    
        if (r3 != null) goto L68;
     */
    /* JADX WARN: Code restructure failed: missing block: B:82:0x0198, code lost:
    
        r3 = "null ";
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x019a, code lost:
    
        r0.append(r3);
        r0.append(' ');
        r0.append("");
        android.util.Log.println(3, r7, r0.toString());
     */
    /* JADX WARN: Code restructure failed: missing block: B:85:0x014f, code lost:
    
        r7 = r0;
     */
    /* JADX WARN: Removed duplicated region for block: B:39:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0291  */
    /* JADX WARN: Removed duplicated region for block: B:48:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateCountryResult$hyperkyc_release(KycCountry kycCountry, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String className;
        String str3;
        HyperKycData.CountryResult countryResult$hyperkyc_release;
        Object obj;
        HyperKycData.CountryResult countryResult;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str4 = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str5 = "updateCountryResult() called with: kycCountry = " + kycCountry + ", incrementAttempts = " + incrementAttempts;
        if (str5 == null) {
            str5 = "null ";
        }
        sb.append(str5);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str = null;
                    } else {
                        str = null;
                        str2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str2 = cls2 != null ? cls2.getCanonicalName() : str;
                }
            }
        }
        str = null;
        if (incrementAttempts && (countryResult = this.hyperKycData.countryResult()) != null) {
            countryResult.setAttempts$hyperkyc_release(countryResult.getAttempts$hyperkyc_release() + 1);
            countryResult.getVariables().put(AppConstants.ATTEMPTS_KEY, countryResult.attempts());
        }
        List<WorkflowModule> modules = getHyperKycConfig$hyperkyc_release().getWorkflowConfig$hyperkyc_release().getModules();
        if (modules != null) {
            Iterator<T> it = modules.iterator();
            while (true) {
                if (!it.hasNext()) {
                    obj = str;
                    break;
                } else {
                    obj = it.next();
                    if (Intrinsics.areEqual(((WorkflowModule) obj).getType(), "countries")) {
                        break;
                    }
                }
            }
            WorkflowModule workflowModule = (WorkflowModule) obj;
            if (workflowModule != null) {
                str3 = workflowModule.getId();
                Intrinsics.checkNotNull(str3);
                if (kycCountry != null) {
                    HyperKycData hyperKycData = this.hyperKycData;
                    HyperKycData.CountryResult countryResult2 = new HyperKycData.CountryResult(str3, kycCountry.getId(), kycCountry.getName(), kycCountry.getRegion(), kycCountry.getBaseUrl(), 0, null, 96, null);
                    HyperKycData.CountryResult countryResult$hyperkyc_release2 = this.hyperKycData.getCountryResult$hyperkyc_release();
                    countryResult2.setAttempts$hyperkyc_release(countryResult$hyperkyc_release2 != null ? countryResult$hyperkyc_release2.getAttempts$hyperkyc_release() : 0);
                    countryResult2.getVariables().put(AppConstants.ATTEMPTS_KEY, countryResult2.attempts());
                    countryResult2.getVariables().put(AnalyticsLogger.Keys.COUNTRY_ID, kycCountry.getId());
                    countryResult2.getVariables().put("name", kycCountry.getName());
                    countryResult2.getVariables().put("region", kycCountry.getRegion());
                    countryResult2.getVariables().put("baseUrl", kycCountry.getBaseUrl());
                    hyperKycData.setCountryResult$hyperkyc_release(countryResult2);
                }
                countryResult$hyperkyc_release = this.hyperKycData.getCountryResult$hyperkyc_release();
                if (countryResult$hyperkyc_release == null) {
                    updateModuleDataMap$default(this, str3, "put", null, null, countryResult$hyperkyc_release.getVariables(), 12, null);
                    return;
                }
                return;
            }
        }
        str3 = str;
        Intrinsics.checkNotNull(str3);
        if (kycCountry != null) {
        }
        countryResult$hyperkyc_release = this.hyperKycData.getCountryResult$hyperkyc_release();
        if (countryResult$hyperkyc_release == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:123:0x04f3, code lost:
    
        if (r0 != 0) goto L185;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:103:0x05ad  */
    /* JADX WARN: Removed duplicated region for block: B:105:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:107:0x05a8 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:131:0x051a  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x055b  */
    /* JADX WARN: Removed duplicated region for block: B:159:0x02fd A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:164:0x0283  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0222  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x02a5  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x02dc  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0302  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0595  */
    /* JADX WARN: Type inference failed for: r0v108 */
    /* JADX WARN: Type inference failed for: r0v78 */
    /* JADX WARN: Type inference failed for: r0v87 */
    /* JADX WARN: Type inference failed for: r0v88 */
    /* JADX WARN: Type inference failed for: r0v91, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r1v4, types: [java.lang.Object] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateDocData$hyperkyc_release(WorkflowUIState.DocCapture docUIState, HyperKycData.DocData docData, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String canonicalName2;
        String className;
        String str3;
        String str4;
        HyperKycData.DocResult docResult;
        Iterator it;
        HyperKycData.DocResult docResult2;
        HyperKycData.DocResult docResult3;
        List<HyperKycData.DocResult> docResultList;
        boolean z;
        Iterator it2;
        Object obj;
        HyperKycData.DocResult docResult4;
        String canonicalName3;
        Object m1202constructorimpl2;
        ?? r0;
        String str5;
        Matcher matcher;
        String str6;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str7 = "updateDocData() called with: docUIState = [" + docUIState + "], docData = [" + getGson().toJson(docData) + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str7 == null) {
            str7 = "null ";
        }
        sb.append(str7);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "packageName";
                str2 = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str8 = "updateDocData() called with: docUIState = [" + docUIState + "], docData = [" + getGson().toJson(docData) + "], incrementAttempts = [" + incrementAttempts + ']';
                    if (str8 == null) {
                        str8 = "null ";
                    }
                    sb2.append(str8);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(2, canonicalName2, sb2.toString());
                }
                if ((docUIState != null || (str3 = docUIState.getTag()) == null) && (str3 = this.currentFlowId) == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str4 = null;
                } else {
                    str4 = str3;
                }
                if (incrementAttempts && (!this.hyperKycData.docResultList().isEmpty())) {
                    for (HyperKycData.DocResult docResult5 : this.hyperKycData.docResultList()) {
                        if (Intrinsics.areEqual(docResult5.getTag$hyperkyc_release(), str4)) {
                            docResult5.setAttempts$hyperkyc_release(docResult5.getAttempts$hyperkyc_release() + 1);
                            docResult5.getVariables().put(AppConstants.ATTEMPTS_KEY, docResult5.attempts());
                        }
                    }
                    throw new NoSuchElementException("Collection contains no element matching the predicate.");
                }
                if (docUIState != null && docData != null) {
                    String id2 = docUIState.getDocument().getId();
                    String side = docUIState.getSide();
                    docResultList = this.hyperKycData.docResultList();
                    if ((docResultList instanceof Collection) || !docResultList.isEmpty()) {
                        for (HyperKycData.DocResult docResult6 : docResultList) {
                            if (Intrinsics.areEqual(docResult6.getTag$hyperkyc_release(), str4) && Intrinsics.areEqual(docResult6.getDocumentId$hyperkyc_release(), id2)) {
                                z = false;
                                break;
                            }
                        }
                    }
                    z = true;
                    if (z) {
                        this.hyperKycData.getDocResultList().add(new HyperKycData.DocResult(str4, id2, new ArrayList(), 0, null, null, null, 120, null));
                    }
                    it2 = this.hyperKycData.docResultList().iterator();
                    while (true) {
                        if (it2.hasNext()) {
                            obj = null;
                            break;
                        }
                        obj = it2.next();
                        HyperKycData.DocResult docResult7 = (HyperKycData.DocResult) obj;
                        if (Intrinsics.areEqual(docResult7.getTag$hyperkyc_release(), str4) && Intrinsics.areEqual(docResult7.getDocumentId$hyperkyc_release(), id2)) {
                            break;
                        }
                    }
                    docResult4 = (HyperKycData.DocResult) obj;
                    if (docResult4 != null) {
                        docResult4.getVariables().put(side + "_imagePath", docData.getDocImagePath$hyperkyc_release());
                        docResult4.getVariables().put(AnalyticsLogger.Keys.DOCUMENT_ID, id2);
                        docResult4.getVariables().put("latitude", docData.latitude());
                        docResult4.getVariables().put("longitude", docData.longitude());
                        docResult4.getVariables().put(side + "_submittedTimestamp", docData.submittedTimestamp());
                        docResult4.getVariables().put(side + "_attemptsCount", docData.attemptsCount());
                        Iterator it3 = docResult4.getDocDataList().iterator();
                        int i = 0;
                        while (true) {
                            if (!it3.hasNext()) {
                                i = -1;
                                break;
                            } else if (Intrinsics.areEqual(((HyperKycData.DocData) it3.next()).getSide$hyperkyc_release(), side)) {
                                break;
                            } else {
                                i++;
                            }
                        }
                        if (i != -1) {
                            docResult4.getDocDataList().set(i, docData);
                        } else {
                            docResult4.getDocDataList().add(docData);
                        }
                        addDynamicVariables(docResult4.getVariables(), str4);
                        HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                        HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                        StringBuilder sb3 = new StringBuilder();
                        StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                        if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                            Class<?> cls3 = docResult4.getClass();
                            canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                            if (canonicalName3 == null) {
                                canonicalName3 = "N/A";
                            }
                        }
                        Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                        if (matcher4.find()) {
                            canonicalName3 = matcher4.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                        }
                        Unit unit3 = Unit.INSTANCE;
                        if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            canonicalName3 = canonicalName3.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        sb3.append(canonicalName3);
                        sb3.append(" - ");
                        String str9 = "variables = [" + docResult4.getVariables() + ']';
                        if (str9 == null) {
                            str9 = "null ";
                        }
                        sb3.append(str9);
                        sb3.append(' ');
                        sb3.append("");
                        companion4.log(level2, sb3.toString());
                        if (!CoreExtsKt.isRelease()) {
                            try {
                                Result.Companion companion5 = Result.INSTANCE;
                                Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str2, new Class[0]).invoke(null, new Object[0]);
                                Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                            } catch (Throwable th2) {
                                Result.Companion companion6 = Result.INSTANCE;
                                m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                            }
                            if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                m1202constructorimpl2 = "";
                            }
                            String str10 = (String) m1202constructorimpl2;
                            if (CoreExtsKt.isDebug()) {
                                Intrinsics.checkNotNullExpressionValue(str10, str);
                                if (StringsKt.contains$default((CharSequence) str10, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                                    StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                    Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                    StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                    if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                        docResult = null;
                                    } else {
                                        docResult = null;
                                        r0 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                    }
                                    Class<?> cls4 = docResult4.getClass();
                                    r0 = cls4 != null ? cls4.getCanonicalName() : docResult;
                                    if (r0 == 0) {
                                        str5 = "N/A";
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str5);
                                        if (matcher.find()) {
                                            str5 = matcher.replaceAll("");
                                            Intrinsics.checkNotNullExpressionValue(str5, "replaceAll(\"\")");
                                        }
                                        Unit unit4 = Unit.INSTANCE;
                                        if (str5.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                            str5 = str5.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str5, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        StringBuilder sb4 = new StringBuilder();
                                        str6 = "variables = [" + docResult4.getVariables() + ']';
                                        if (str6 == null) {
                                            str6 = "null ";
                                        }
                                        sb4.append(str6);
                                        sb4.append(' ');
                                        sb4.append("");
                                        Log.println(4, str5, sb4.toString());
                                        docResult4.setRequestIds$hyperkyc_release(docResult4.requestIds$hyperkyc_release());
                                        docResult4.setApiFlags$hyperkyc_release(docResult4.apiFlags$hyperkyc_release());
                                        Unit unit5 = Unit.INSTANCE;
                                        Unit unit6 = Unit.INSTANCE;
                                        it = this.hyperKycData.docResultList().iterator();
                                        while (true) {
                                            if (!it.hasNext()) {
                                                docResult2 = docResult;
                                                break;
                                            }
                                            ?? next = it.next();
                                            if (Intrinsics.areEqual(((HyperKycData.DocResult) next).getTag$hyperkyc_release(), str4)) {
                                                docResult2 = next;
                                                break;
                                            }
                                        }
                                        docResult3 = docResult2;
                                        if (docResult3 != null) {
                                            updateModuleDataMap$default(this, str4, null, docResult3.getRequestIds(), docResult3.getApiFlags(), docResult3.getVariables(), 2, null);
                                            Unit unit7 = Unit.INSTANCE;
                                            Unit unit8 = Unit.INSTANCE;
                                            return;
                                        }
                                        return;
                                    }
                                    str5 = r0;
                                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str5);
                                    if (matcher.find()) {
                                    }
                                    Unit unit42 = Unit.INSTANCE;
                                    if (str5.length() > 23) {
                                        str5 = str5.substring(0, 23);
                                        Intrinsics.checkNotNullExpressionValue(str5, "this as java.lang.String…ing(startIndex, endIndex)");
                                    }
                                    StringBuilder sb42 = new StringBuilder();
                                    str6 = "variables = [" + docResult4.getVariables() + ']';
                                    if (str6 == null) {
                                    }
                                    sb42.append(str6);
                                    sb42.append(' ');
                                    sb42.append("");
                                    Log.println(4, str5, sb42.toString());
                                    docResult4.setRequestIds$hyperkyc_release(docResult4.requestIds$hyperkyc_release());
                                    docResult4.setApiFlags$hyperkyc_release(docResult4.apiFlags$hyperkyc_release());
                                    Unit unit52 = Unit.INSTANCE;
                                    Unit unit62 = Unit.INSTANCE;
                                    it = this.hyperKycData.docResultList().iterator();
                                    while (true) {
                                        if (!it.hasNext()) {
                                        }
                                    }
                                    docResult3 = docResult2;
                                    if (docResult3 != null) {
                                    }
                                }
                            }
                        }
                        docResult = null;
                        docResult4.setRequestIds$hyperkyc_release(docResult4.requestIds$hyperkyc_release());
                        docResult4.setApiFlags$hyperkyc_release(docResult4.apiFlags$hyperkyc_release());
                        Unit unit522 = Unit.INSTANCE;
                        Unit unit622 = Unit.INSTANCE;
                        it = this.hyperKycData.docResultList().iterator();
                        while (true) {
                            if (!it.hasNext()) {
                            }
                        }
                        docResult3 = docResult2;
                        if (docResult3 != null) {
                        }
                    }
                }
                docResult = null;
                it = this.hyperKycData.docResultList().iterator();
                while (true) {
                    if (!it.hasNext()) {
                    }
                }
                docResult3 = docResult2;
                if (docResult3 != null) {
                }
            }
        }
        str = "packageName";
        str2 = "getInitialApplication";
        if (docUIState != null) {
        }
        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
        str4 = null;
        if (incrementAttempts) {
            while (r3.hasNext()) {
            }
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        if (docUIState != null) {
            String id22 = docUIState.getDocument().getId();
            String side2 = docUIState.getSide();
            docResultList = this.hyperKycData.docResultList();
            if (docResultList instanceof Collection) {
            }
            while (r5.hasNext()) {
            }
            z = true;
            if (z) {
            }
            it2 = this.hyperKycData.docResultList().iterator();
            while (true) {
                if (it2.hasNext()) {
                }
            }
            docResult4 = (HyperKycData.DocResult) obj;
            if (docResult4 != null) {
            }
        }
        docResult = null;
        it = this.hyperKycData.docResultList().iterator();
        while (true) {
            if (!it.hasNext()) {
            }
        }
        docResult3 = docResult2;
        if (docResult3 != null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:133:0x016a, code lost:
    
        if (r0 != null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x0342, code lost:
    
        if (r11 != null) goto L109;
     */
    /* JADX WARN: Code restructure failed: missing block: B:81:0x044a, code lost:
    
        if (r0 != null) goto L151;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:108:0x027b  */
    /* JADX WARN: Removed duplicated region for block: B:109:0x024c  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x04dc  */
    /* JADX WARN: Removed duplicated region for block: B:115:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:118:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01fd  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0217  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0239 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0243  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0276  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x030a  */
    /* JADX WARN: Type inference failed for: r12v4 */
    /* JADX WARN: Type inference failed for: r12v7 */
    /* JADX WARN: Type inference failed for: r12v8 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateFaceData$hyperkyc_release(WorkflowUIState.FaceCapture faceUIState, HyperKycData.FaceData faceCaptureData, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        CharSequence charSequence;
        String str;
        String str2;
        String str3;
        char c;
        char c2;
        String className;
        MainVM mainVM;
        String str4;
        String str5;
        HyperKycData.FaceResult faceResult;
        HyperKycData.FaceResult faceResult2;
        String str6;
        String str7;
        String str8;
        String str9;
        int i;
        Object m1202constructorimpl2;
        String str10;
        String str11;
        String className2;
        String className3;
        HyperKycData.FaceResult faceResult3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str12 = "updateFaceData() called with: faceUIState = [" + faceUIState + "], faceCaptureData = [" + getGson().toJson(faceCaptureData) + "], incrementAttemtps = [" + incrementAttempts + ']';
        if (str12 == null) {
            str12 = "null ";
        }
        sb.append(str12);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                charSequence = "co.hyperverge";
                str = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str2 = null;
                    } else {
                        str2 = null;
                        str3 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str3 = cls2 != null ? cls2.getCanonicalName() : str2;
                    if (str3 == null) {
                        str3 = "N/A";
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
                    if (matcher2.find()) {
                        str3 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str3, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    c = 23;
                    if (str3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str3 = str3.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str13 = "updateFaceData() called with: faceUIState = [" + faceUIState + "], faceCaptureData = [" + getGson().toJson(faceCaptureData) + "], incrementAttemtps = [" + incrementAttempts + ']';
                    if (str13 == null) {
                        str13 = "null ";
                    }
                    sb2.append(str13);
                    c2 = ' ';
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str3, sb2.toString());
                    if (faceUIState != null || (str4 = faceUIState.getTag()) == null) {
                        mainVM = this;
                        str4 = mainVM.currentFlowId;
                        if (str4 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str5 = null;
                            if (incrementAttempts && (faceResult3 = mainVM.hyperKycData.faceResult()) != null) {
                                faceResult3.setAttempts$hyperkyc_release(faceResult3.getAttempts$hyperkyc_release() + 1);
                                faceResult3.getVariables().put(AppConstants.ATTEMPTS_KEY, faceResult3.attempts());
                            }
                            if (faceUIState != null && faceCaptureData != null) {
                                HyperKycData.FaceResult faceResult4 = mainVM.hyperKycData.faceResult();
                                Integer valueOf = faceResult4 == null ? Integer.valueOf(faceResult4.getAttempts$hyperkyc_release()) : null;
                                HyperKycData hyperKycData = mainVM.hyperKycData;
                                String str14 = str;
                                HyperKycData.FaceResult faceResult5 = new HyperKycData.FaceResult(str5, faceCaptureData, 0, null, null, null, 60, null);
                                faceResult5.setAttempts$hyperkyc_release(valueOf == null ? valueOf.intValue() : 0);
                                faceResult5.getVariables().put("croppedImagePath", faceCaptureData.croppedFaceImagePath());
                                faceResult5.getVariables().put("fullImagePath", faceCaptureData.fullFaceImagePath());
                                faceResult5.getVariables().put("videoPath", faceCaptureData.videoPath());
                                faceResult5.getVariables().put("latitude", faceCaptureData.latitude());
                                faceResult5.getVariables().put("longitude", faceCaptureData.longitude());
                                faceResult5.getVariables().put("submittedTimestamp", faceCaptureData.submittedTimestamp());
                                faceResult5.getVariables().put("attemptsCount", faceCaptureData.attemptsCount());
                                faceResult5.getVariables().put("isFaceDetected", String.valueOf(HyperSnapSDK.getFaceCaptureMetaData().isFaceDetected()));
                                hyperKycData.setFaceResult$hyperkyc_release(faceResult5);
                                faceResult2 = mainVM.hyperKycData.faceResult();
                                if (faceResult2 != null) {
                                    mainVM.addDynamicVariables(faceResult2.getVariables(), str5);
                                    HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                                    HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                                    StringBuilder sb3 = new StringBuilder();
                                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                                    Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                                    if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null) {
                                        str6 = null;
                                    } else {
                                        str6 = null;
                                        str7 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                    }
                                    Class<?> cls3 = faceResult2.getClass();
                                    str7 = cls3 != null ? cls3.getCanonicalName() : str6;
                                    if (str7 == null) {
                                        str7 = "N/A";
                                    }
                                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                    if (matcher3.find()) {
                                        str9 = "";
                                        str7 = matcher3.replaceAll(str9);
                                        str8 = "replaceAll(\"\")";
                                        Intrinsics.checkNotNullExpressionValue(str7, str8);
                                    } else {
                                        str8 = "replaceAll(\"\")";
                                        str9 = "";
                                    }
                                    Unit unit3 = Unit.INSTANCE;
                                    if (str7.length() <= 23) {
                                        i = 0;
                                    } else if (Build.VERSION.SDK_INT >= 26) {
                                        i = 0;
                                    } else {
                                        i = 0;
                                        str7 = str7.substring(0, 23);
                                        Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                                    }
                                    sb3.append(str7);
                                    sb3.append(" - ");
                                    String str15 = "variables = [" + faceResult2.getVariables() + ']';
                                    if (str15 == null) {
                                        str15 = "null ";
                                    }
                                    sb3.append(str15);
                                    sb3.append(' ');
                                    sb3.append(str9);
                                    companion4.log(level2, sb3.toString());
                                    if (!CoreExtsKt.isRelease()) {
                                        try {
                                            Result.Companion companion5 = Result.INSTANCE;
                                            Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str14, new Class[i]).invoke(null, new Object[i]);
                                            Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                            m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                        } catch (Throwable th2) {
                                            Result.Companion companion6 = Result.INSTANCE;
                                            m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                        }
                                        if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                            m1202constructorimpl2 = str9;
                                        }
                                        String packageName2 = (String) m1202constructorimpl2;
                                        if (CoreExtsKt.isDebug()) {
                                            Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                                            if (StringsKt.contains$default((CharSequence) packageName2, charSequence, (boolean) i, 2, (Object) null)) {
                                                StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                                Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                                StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                                if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                                    str10 = null;
                                                } else {
                                                    str10 = null;
                                                    str11 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                }
                                                Class<?> cls4 = faceResult2.getClass();
                                                str11 = cls4 != null ? cls4.getCanonicalName() : str10;
                                                if (str11 == null) {
                                                    str11 = "N/A";
                                                }
                                                Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                                if (matcher4.find()) {
                                                    str11 = matcher4.replaceAll(str9);
                                                    Intrinsics.checkNotNullExpressionValue(str11, str8);
                                                }
                                                Unit unit4 = Unit.INSTANCE;
                                                if (str11.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                    str11 = str11.substring(i, 23);
                                                    Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                                }
                                                StringBuilder sb4 = new StringBuilder();
                                                String str16 = "variables = [" + faceResult2.getVariables() + ']';
                                                if (str16 == null) {
                                                    str16 = "null ";
                                                }
                                                sb4.append(str16);
                                                sb4.append(' ');
                                                sb4.append(str9);
                                                Log.println(4, str11, sb4.toString());
                                            }
                                        }
                                    }
                                    faceResult2.setRequestIds$hyperkyc_release(faceResult2.requestIds$hyperkyc_release());
                                    faceResult2.setApiFlags$hyperkyc_release(faceResult2.apiFlags$hyperkyc_release());
                                    Unit unit5 = Unit.INSTANCE;
                                    Unit unit6 = Unit.INSTANCE;
                                }
                            }
                            faceResult = mainVM.hyperKycData.faceResult();
                            if (faceResult == null) {
                                updateModuleDataMap$default(this, str5, null, faceResult.getRequestIds(), faceResult.getApiFlags(), faceResult.getVariables(), 2, null);
                                Unit unit7 = Unit.INSTANCE;
                                Unit unit8 = Unit.INSTANCE;
                                return;
                            }
                            return;
                        }
                    } else {
                        mainVM = this;
                    }
                    str5 = str4;
                    if (incrementAttempts) {
                        faceResult3.setAttempts$hyperkyc_release(faceResult3.getAttempts$hyperkyc_release() + 1);
                        faceResult3.getVariables().put(AppConstants.ATTEMPTS_KEY, faceResult3.attempts());
                    }
                    if (faceUIState != null) {
                        HyperKycData.FaceResult faceResult42 = mainVM.hyperKycData.faceResult();
                        if (faceResult42 == null) {
                        }
                        HyperKycData hyperKycData2 = mainVM.hyperKycData;
                        String str142 = str;
                        HyperKycData.FaceResult faceResult52 = new HyperKycData.FaceResult(str5, faceCaptureData, 0, null, null, null, 60, null);
                        faceResult52.setAttempts$hyperkyc_release(valueOf == null ? valueOf.intValue() : 0);
                        faceResult52.getVariables().put("croppedImagePath", faceCaptureData.croppedFaceImagePath());
                        faceResult52.getVariables().put("fullImagePath", faceCaptureData.fullFaceImagePath());
                        faceResult52.getVariables().put("videoPath", faceCaptureData.videoPath());
                        faceResult52.getVariables().put("latitude", faceCaptureData.latitude());
                        faceResult52.getVariables().put("longitude", faceCaptureData.longitude());
                        faceResult52.getVariables().put("submittedTimestamp", faceCaptureData.submittedTimestamp());
                        faceResult52.getVariables().put("attemptsCount", faceCaptureData.attemptsCount());
                        faceResult52.getVariables().put("isFaceDetected", String.valueOf(HyperSnapSDK.getFaceCaptureMetaData().isFaceDetected()));
                        hyperKycData2.setFaceResult$hyperkyc_release(faceResult52);
                        faceResult2 = mainVM.hyperKycData.faceResult();
                        if (faceResult2 != null) {
                        }
                    }
                    faceResult = mainVM.hyperKycData.faceResult();
                    if (faceResult == null) {
                    }
                }
                c2 = ' ';
                c = 23;
                if (faceUIState != null) {
                }
                mainVM = this;
                str4 = mainVM.currentFlowId;
                if (str4 == null) {
                }
                str5 = str4;
                if (incrementAttempts) {
                }
                if (faceUIState != null) {
                }
                faceResult = mainVM.hyperKycData.faceResult();
                if (faceResult == null) {
                }
            }
        }
        charSequence = "co.hyperverge";
        str = "getInitialApplication";
        c2 = ' ';
        c = 23;
        if (faceUIState != null) {
        }
        mainVM = this;
        str4 = mainVM.currentFlowId;
        if (str4 == null) {
        }
        str5 = str4;
        if (incrementAttempts) {
        }
        if (faceUIState != null) {
        }
        faceResult = mainVM.hyperKycData.faceResult();
        if (faceResult == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:115:0x044a, code lost:
    
        if (r0 != null) goto L177;
     */
    /* JADX WARN: Code restructure failed: missing block: B:175:0x0168, code lost:
    
        if (r0 != null) goto L57;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:123:0x0471  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x04ad  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x04d5  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x023c  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x026f  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x04e8  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x04ff  */
    /* JADX WARN: Removed duplicated region for block: B:97:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x04fa A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r12v10 */
    /* JADX WARN: Type inference failed for: r12v6 */
    /* JADX WARN: Type inference failed for: r12v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateApiCallData$hyperkyc_release(WorkflowUIState apiCallUIState, HyperKycData.APIData apiData, String state, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String str3;
        String str4;
        char c;
        String className;
        String str5;
        String str6;
        String str7;
        Iterator<T> it;
        Object obj;
        HyperKycData.APIResult aPIResult;
        Object obj2;
        String str8;
        String str9;
        int i;
        int i2;
        Object m1202constructorimpl2;
        String str10;
        String str11;
        Matcher matcher;
        String str12;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str13 = "updateApiCallData() called with: apiCallUIState = [" + apiCallUIState + "], apiCallData = [" + getGson().toJson(apiData) + "], state = [" + state + ']';
        if (str13 == null) {
            str13 = "null ";
        }
        sb.append(str13);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            str = "packageName";
            str2 = "getInitialApplication";
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "packageName";
                str2 = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str3 = null;
                    } else {
                        str3 = null;
                        str4 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : str3;
                    str4 = canonicalName2 == null ? "N/A" : canonicalName2;
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                    if (matcher3.find()) {
                        str4 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    c = 23;
                    if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str4 = str4.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str14 = "updateApiCallData() called with: apiCallUIState = [" + apiCallUIState + "], apiCallData = [" + getGson().toJson(apiData) + "], state = [" + state + ']';
                    if (str14 == null) {
                        str14 = "null ";
                    }
                    sb2.append(str14);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str4, sb2.toString());
                    if ((apiCallUIState != null || (str5 = apiCallUIState.getTag()) == null) && (str5 = this.currentFlowId) == null) {
                        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                        str6 = null;
                    } else {
                        str6 = str5;
                    }
                    if (incrementAttempts && (!this.hyperKycData.apiResultList().isEmpty())) {
                        for (HyperKycData.APIResult aPIResult2 : this.hyperKycData.apiResultList()) {
                            if (Intrinsics.areEqual(aPIResult2.getTag$hyperkyc_release(), str6)) {
                                aPIResult2.setAttempts$hyperkyc_release(aPIResult2.getAttempts$hyperkyc_release() + 1);
                                aPIResult2.getVariables().put(AppConstants.ATTEMPTS_KEY, aPIResult2.attempts());
                            }
                        }
                        throw new NoSuchElementException("Collection contains no element matching the predicate.");
                    }
                    if (apiCallUIState == null) {
                        ArrayList apiResultList = this.hyperKycData.getApiResultList();
                        HyperKycData.APIResult aPIResult3 = new HyperKycData.APIResult(str6, apiData, 0, null, null, null, 60, null);
                        Iterator it2 = apiResultList.iterator();
                        while (true) {
                            if (it2.hasNext()) {
                                obj2 = it2.next();
                                if (Intrinsics.areEqual(str6, ((HyperKycData.APIResult) obj2).getTag$hyperkyc_release())) {
                                    break;
                                }
                            } else {
                                obj2 = null;
                                break;
                            }
                        }
                        HyperKycData.APIResult aPIResult4 = (HyperKycData.APIResult) obj2;
                        Integer valueOf = aPIResult4 != null ? Integer.valueOf(aPIResult4.getAttempts$hyperkyc_release()) : null;
                        aPIResult3.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
                        if (state != null) {
                            aPIResult3.getVariables().put("state", state);
                            Unit unit3 = Unit.INSTANCE;
                            Unit unit4 = Unit.INSTANCE;
                        }
                        Iterator it3 = apiResultList.iterator();
                        int i3 = 0;
                        while (true) {
                            if (!it3.hasNext()) {
                                i3 = -1;
                                break;
                            } else if (Intrinsics.areEqual(str6, ((HyperKycData.APIResult) it3.next()).getTag$hyperkyc_release())) {
                                break;
                            } else {
                                i3++;
                            }
                        }
                        if (i3 != -1) {
                            apiResultList.set(i3, aPIResult3);
                        } else {
                            apiResultList.add(aPIResult3);
                        }
                        addDynamicVariables(aPIResult3.getVariables(), str6);
                        HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                        HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                        StringBuilder sb3 = new StringBuilder();
                        StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                        if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (str8 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                            Class<?> cls3 = aPIResult3.getClass();
                            String canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                            str8 = canonicalName3 == null ? "N/A" : canonicalName3;
                        }
                        Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                        if (matcher4.find()) {
                            str9 = "";
                            str8 = matcher4.replaceAll(str9);
                            Intrinsics.checkNotNullExpressionValue(str8, "replaceAll(\"\")");
                        } else {
                            str9 = "";
                        }
                        Unit unit5 = Unit.INSTANCE;
                        if (str8.length() > 23) {
                            i2 = 26;
                            if (Build.VERSION.SDK_INT >= 26) {
                                i = 0;
                            } else {
                                i = 0;
                                str8 = str8.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                        } else {
                            i = 0;
                            i2 = 26;
                        }
                        sb3.append(str8);
                        sb3.append(" - ");
                        String str15 = "variables = [" + aPIResult3.getVariables() + ']';
                        if (str15 == null) {
                            str15 = "null ";
                        }
                        sb3.append(str15);
                        sb3.append(' ');
                        sb3.append(str9);
                        companion4.log(level2, sb3.toString());
                        if (!CoreExtsKt.isRelease()) {
                            try {
                                Result.Companion companion5 = Result.INSTANCE;
                                Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str2, new Class[i]).invoke(null, new Object[i]);
                                Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                            } catch (Throwable th2) {
                                Result.Companion companion6 = Result.INSTANCE;
                                m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                            }
                            if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                m1202constructorimpl2 = str9;
                            }
                            String str16 = (String) m1202constructorimpl2;
                            if (CoreExtsKt.isDebug()) {
                                Intrinsics.checkNotNullExpressionValue(str16, str);
                                if (StringsKt.contains$default((CharSequence) str16, (CharSequence) "co.hyperverge", (boolean) i, 2, (Object) null)) {
                                    StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                    Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                    StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                    if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                        str7 = null;
                                    } else {
                                        str7 = null;
                                        str10 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                    }
                                    Class<?> cls4 = aPIResult3.getClass();
                                    str10 = cls4 != null ? cls4.getCanonicalName() : str7;
                                    if (str10 == null) {
                                        str11 = "N/A";
                                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                        if (matcher.find()) {
                                            str11 = matcher.replaceAll(str9);
                                            Intrinsics.checkNotNullExpressionValue(str11, "replaceAll(\"\")");
                                        }
                                        Unit unit6 = Unit.INSTANCE;
                                        if (str11.length() > 23 && Build.VERSION.SDK_INT < i2) {
                                            str11 = str11.substring(i, 23);
                                            Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        StringBuilder sb4 = new StringBuilder();
                                        str12 = "variables = [" + aPIResult3.getVariables() + ']';
                                        if (str12 == null) {
                                            str12 = "null ";
                                        }
                                        sb4.append(str12);
                                        sb4.append(' ');
                                        sb4.append(str9);
                                        Log.println(4, str11, sb4.toString());
                                        aPIResult3.setRequestIds$hyperkyc_release(aPIResult3.requestIds$hyperkyc_release());
                                        aPIResult3.setApiFlags$hyperkyc_release(aPIResult3.apiFlags$hyperkyc_release());
                                        Unit unit7 = Unit.INSTANCE;
                                        Unit unit8 = Unit.INSTANCE;
                                    }
                                    str11 = str10;
                                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                    if (matcher.find()) {
                                    }
                                    Unit unit62 = Unit.INSTANCE;
                                    if (str11.length() > 23) {
                                        str11 = str11.substring(i, 23);
                                        Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                    }
                                    StringBuilder sb42 = new StringBuilder();
                                    str12 = "variables = [" + aPIResult3.getVariables() + ']';
                                    if (str12 == null) {
                                    }
                                    sb42.append(str12);
                                    sb42.append(' ');
                                    sb42.append(str9);
                                    Log.println(4, str11, sb42.toString());
                                    aPIResult3.setRequestIds$hyperkyc_release(aPIResult3.requestIds$hyperkyc_release());
                                    aPIResult3.setApiFlags$hyperkyc_release(aPIResult3.apiFlags$hyperkyc_release());
                                    Unit unit72 = Unit.INSTANCE;
                                    Unit unit82 = Unit.INSTANCE;
                                }
                            }
                        }
                        str7 = null;
                        aPIResult3.setRequestIds$hyperkyc_release(aPIResult3.requestIds$hyperkyc_release());
                        aPIResult3.setApiFlags$hyperkyc_release(aPIResult3.apiFlags$hyperkyc_release());
                        Unit unit722 = Unit.INSTANCE;
                        Unit unit822 = Unit.INSTANCE;
                    } else {
                        str7 = null;
                    }
                    it = this.hyperKycData.apiResultList().iterator();
                    while (true) {
                        if (!it.hasNext()) {
                            obj = it.next();
                            if (Intrinsics.areEqual(((HyperKycData.APIResult) obj).getTag$hyperkyc_release(), str6)) {
                                break;
                            }
                        } else {
                            obj = str7;
                            break;
                        }
                    }
                    aPIResult = (HyperKycData.APIResult) obj;
                    if (aPIResult == null) {
                        updateModuleDataMap$default(this, str6, null, aPIResult.getRequestIds(), aPIResult.getApiFlags(), aPIResult.getVariables(), 2, null);
                        Unit unit9 = Unit.INSTANCE;
                        Unit unit10 = Unit.INSTANCE;
                        return;
                    }
                    return;
                }
            } else {
                str = "packageName";
                str2 = "getInitialApplication";
            }
        }
        c = 23;
        if (apiCallUIState != null) {
        }
        Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
        str6 = null;
        if (incrementAttempts) {
            while (r0.hasNext()) {
            }
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        if (apiCallUIState == null) {
        }
        it = this.hyperKycData.apiResultList().iterator();
        while (true) {
            if (!it.hasNext()) {
            }
        }
        aPIResult = (HyperKycData.APIResult) obj;
        if (aPIResult == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:127:0x0443, code lost:
    
        if (r0 != null) goto L179;
     */
    /* JADX WARN: Removed duplicated region for block: B:136:0x046c  */
    /* JADX WARN: Removed duplicated region for block: B:144:0x04b5  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateFormData$hyperkyc_release(String moduleId, Map formInputs, boolean incrementAttempts) {
        String canonicalName;
        String str;
        Object m1202constructorimpl;
        String str2;
        String str3;
        String canonicalName2;
        String className;
        String str4;
        Object obj;
        String str5;
        Object obj2;
        String str6;
        char c;
        String str7;
        String str8;
        Object obj3;
        String canonicalName3;
        Class<?> cls;
        String str9;
        Object obj4;
        String str10;
        String str11;
        Matcher matcher;
        String str12;
        Class<?> cls2;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls3 = getClass();
            canonicalName = cls3 != null ? cls3.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        String str13 = canonicalName;
        if (matcher2.find()) {
            str = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
        } else {
            str = str13;
        }
        Unit unit = Unit.INSTANCE;
        if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
            str = str.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(str);
        sb.append(" - ");
        String str14 = "updateFormData() called with: moduleId = [" + moduleId + "], formInputs = [" + formInputs + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str14 == null) {
            str14 = "null ";
        }
        sb.append(str14);
        char c2 = ' ';
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            str2 = "getInitialApplication";
            str3 = "packageName";
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str2 = "getInitialApplication";
                str3 = "packageName";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls4 = getClass();
                        canonicalName2 = cls4 != null ? cls4.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str15 = "updateFormData() called with: moduleId = [" + moduleId + "], formInputs = [" + formInputs + "], incrementAttempts = [" + incrementAttempts + ']';
                    if (str15 == null) {
                        str15 = "null ";
                    }
                    sb2.append(str15);
                    c2 = ' ';
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
            } else {
                str2 = "getInitialApplication";
                str3 = "packageName";
            }
            c2 = ' ';
        }
        if (incrementAttempts && (!this.hyperKycData.formResultList().isEmpty())) {
            for (HyperKycData.FormResult formResult : this.hyperKycData.formResultList()) {
                String tag$hyperkyc_release = formResult.getTag$hyperkyc_release();
                String str16 = this.currentFlowId;
                if (str16 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str16 = null;
                }
                if (Intrinsics.areEqual(tag$hyperkyc_release, str16)) {
                    formResult.setAttempts$hyperkyc_release(formResult.getAttempts$hyperkyc_release() + 1);
                    formResult.getVariables().put(AppConstants.ATTEMPTS_KEY, formResult.attempts());
                }
            }
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        if (moduleId == null || formInputs == null) {
            str4 = null;
        } else {
            ArrayList formResultList = this.hyperKycData.getFormResultList();
            ArrayList arrayList = formResultList;
            Iterator it = arrayList.iterator();
            while (true) {
                if (it.hasNext()) {
                    obj2 = it.next();
                    if (Intrinsics.areEqual(moduleId, ((HyperKycData.FormResult) obj2).getTag$hyperkyc_release())) {
                        break;
                    }
                } else {
                    obj2 = null;
                    break;
                }
            }
            HyperKycData.FormResult formResult2 = (HyperKycData.FormResult) obj2;
            if (formResult2 == null) {
                str7 = str2;
                str8 = str3;
                str6 = "";
                c = c2;
                formResult2 = new HyperKycData.FormResult(moduleId, null, 0, 6, null);
            } else {
                str6 = "";
                c = c2;
                str7 = str2;
                str8 = str3;
            }
            Iterator it2 = arrayList.iterator();
            while (true) {
                if (it2.hasNext()) {
                    obj3 = it2.next();
                    if (Intrinsics.areEqual(moduleId, ((HyperKycData.FormResult) obj3).getTag$hyperkyc_release())) {
                        break;
                    }
                } else {
                    obj3 = null;
                    break;
                }
            }
            HyperKycData.FormResult formResult3 = (HyperKycData.FormResult) obj3;
            Integer valueOf = formResult3 != null ? Integer.valueOf(formResult3.getAttempts$hyperkyc_release()) : null;
            formResult2.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
            formResult2.getVariables().putAll(formInputs);
            Iterator it3 = formResultList.iterator();
            int i = 0;
            while (true) {
                if (!it3.hasNext()) {
                    i = -1;
                    break;
                } else if (Intrinsics.areEqual(moduleId, ((HyperKycData.FormResult) it3.next()).getTag$hyperkyc_release())) {
                    break;
                } else {
                    i++;
                }
            }
            if (i != -1) {
                formResultList.set(i, formResult2);
            } else {
                formResultList.add(formResult2);
            }
            addDynamicVariables(formResult2.getVariables(), moduleId);
            HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
            HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
            StringBuilder sb3 = new StringBuilder();
            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
            Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
            StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
            if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                canonicalName3 = (formResult2 == null || (cls = formResult2.getClass()) == null) ? null : cls.getCanonicalName();
                if (canonicalName3 == null) {
                    canonicalName3 = "N/A";
                }
            }
            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
            if (matcher4.find()) {
                str9 = str6;
                canonicalName3 = matcher4.replaceAll(str9);
                Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
            } else {
                str9 = str6;
            }
            Unit unit3 = Unit.INSTANCE;
            if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                canonicalName3 = canonicalName3.substring(0, 23);
                Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
            }
            sb3.append(canonicalName3);
            sb3.append(" - ");
            String str17 = "updateFormData() updated variables for " + moduleId + " = [" + formResult2.getVariables() + ']';
            if (str17 == null) {
                str17 = "null ";
            }
            sb3.append(str17);
            sb3.append(c);
            sb3.append(str9);
            companion4.log(level2, sb3.toString());
            if (!CoreExtsKt.isRelease()) {
                try {
                    Result.Companion companion5 = Result.INSTANCE;
                    Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str7, new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                    obj4 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                } catch (Throwable th2) {
                    Result.Companion companion6 = Result.INSTANCE;
                    obj4 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                }
                Object obj5 = obj4;
                if (Result.m1208isFailureimpl(obj5)) {
                    obj5 = str9;
                }
                String str18 = (String) obj5;
                if (CoreExtsKt.isDebug()) {
                    Intrinsics.checkNotNullExpressionValue(str18, str8);
                    if (StringsKt.contains$default((CharSequence) str18, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                        if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                            str4 = null;
                        } else {
                            str4 = null;
                            str10 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                        }
                        str10 = (formResult2 == null || (cls2 = formResult2.getClass()) == null) ? str4 : cls2.getCanonicalName();
                        if (str10 == null) {
                            str11 = "N/A";
                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                            if (matcher.find()) {
                                str11 = matcher.replaceAll(str9);
                                Intrinsics.checkNotNullExpressionValue(str11, "replaceAll(\"\")");
                            }
                            Unit unit4 = Unit.INSTANCE;
                            if (str11.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str11 = str11.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            StringBuilder sb4 = new StringBuilder();
                            str12 = "updateFormData() updated variables for " + moduleId + " = [" + formResult2.getVariables() + ']';
                            if (str12 == null) {
                                str12 = "null ";
                            }
                            sb4.append(str12);
                            sb4.append(c);
                            sb4.append(str9);
                            Log.println(4, str11, sb4.toString());
                            Unit unit5 = Unit.INSTANCE;
                            Unit unit6 = Unit.INSTANCE;
                        }
                        str11 = str10;
                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                        if (matcher.find()) {
                        }
                        Unit unit42 = Unit.INSTANCE;
                        if (str11.length() > 23) {
                            str11 = str11.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        StringBuilder sb42 = new StringBuilder();
                        str12 = "updateFormData() updated variables for " + moduleId + " = [" + formResult2.getVariables() + ']';
                        if (str12 == null) {
                        }
                        sb42.append(str12);
                        sb42.append(c);
                        sb42.append(str9);
                        Log.println(4, str11, sb42.toString());
                        Unit unit52 = Unit.INSTANCE;
                        Unit unit62 = Unit.INSTANCE;
                    }
                }
            }
            str4 = null;
            Unit unit522 = Unit.INSTANCE;
            Unit unit622 = Unit.INSTANCE;
        }
        Iterator<T> it4 = this.hyperKycData.formResultList().iterator();
        while (true) {
            if (!it4.hasNext()) {
                obj = str4;
                break;
            }
            Object next = it4.next();
            String tag$hyperkyc_release2 = ((HyperKycData.FormResult) next).getTag$hyperkyc_release();
            if (moduleId == null) {
                str5 = this.currentFlowId;
                if (str5 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str5 = str4;
                }
            } else {
                str5 = moduleId;
            }
            if (Intrinsics.areEqual(tag$hyperkyc_release2, str5)) {
                obj = next;
                break;
            }
        }
        HyperKycData.FormResult formResult4 = (HyperKycData.FormResult) obj;
        if (formResult4 != null) {
            updateModuleDataMap$default(this, formResult4.tag(), null, null, null, JSONExtsKt.toNestedMap(formResult4.getVariables()), 14, null);
            Unit unit7 = Unit.INSTANCE;
            Unit unit8 = Unit.INSTANCE;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:118:0x0409, code lost:
    
        if (r0 != null) goto L166;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateWebviewData$hyperkyc_release(String moduleId, HyperKycData.WebviewData webviewData, boolean incrementAttempts) {
        String canonicalName;
        String str;
        Object m1202constructorimpl;
        String str2;
        String str3;
        String canonicalName2;
        String className;
        String str4;
        Object obj;
        String str5;
        Object obj2;
        String canonicalName3;
        String str6;
        Object obj3;
        String str7;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        String str8 = canonicalName;
        if (matcher.find()) {
            str = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
        } else {
            str = str8;
        }
        Unit unit = Unit.INSTANCE;
        if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
            str = str.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(str);
        sb.append(" - ");
        String str9 = "updateWebviewData() called with: moduleId = [" + moduleId + "], webviewData = [" + webviewData + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str9 == null) {
            str9 = "null ";
        }
        sb.append(str9);
        char c = ' ';
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            str2 = "getInitialApplication";
            str3 = "packageName";
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str2 = "getInitialApplication";
                str3 = "packageName";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher2.find()) {
                        canonicalName2 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str10 = "updateWebviewData() called with: moduleId = [" + moduleId + "], webviewData = [" + webviewData + "], incrementAttempts = [" + incrementAttempts + ']';
                    if (str10 == null) {
                        str10 = "null ";
                    }
                    sb2.append(str10);
                    c = ' ';
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
            } else {
                str2 = "getInitialApplication";
                str3 = "packageName";
            }
            c = ' ';
        }
        if (incrementAttempts && (!this.hyperKycData.webviewResultList().isEmpty())) {
            for (HyperKycData.WebviewResult webviewResult : this.hyperKycData.webviewResultList()) {
                String tag$hyperkyc_release = webviewResult.getTag$hyperkyc_release();
                String str11 = this.currentFlowId;
                if (str11 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str11 = null;
                }
                if (Intrinsics.areEqual(tag$hyperkyc_release, str11)) {
                    webviewResult.setAttempts$hyperkyc_release(webviewResult.getAttempts$hyperkyc_release() + 1);
                    webviewResult.getVariables().put(AppConstants.ATTEMPTS_KEY, webviewResult.attempts());
                }
            }
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        if (moduleId == null || webviewData == null) {
            str4 = null;
        } else {
            ArrayList webviewResultList = this.hyperKycData.getWebviewResultList();
            String str12 = str2;
            String str13 = str3;
            char c2 = c;
            HyperKycData.WebviewResult webviewResult2 = new HyperKycData.WebviewResult(moduleId, webviewData, 0, null, 12, null);
            Iterator it = webviewResultList.iterator();
            while (true) {
                if (it.hasNext()) {
                    obj2 = it.next();
                    if (Intrinsics.areEqual(moduleId, ((HyperKycData.WebviewResult) obj2).getTag$hyperkyc_release())) {
                        break;
                    }
                } else {
                    obj2 = null;
                    break;
                }
            }
            HyperKycData.WebviewResult webviewResult3 = (HyperKycData.WebviewResult) obj2;
            Integer valueOf = webviewResult3 != null ? Integer.valueOf(webviewResult3.getAttempts$hyperkyc_release()) : null;
            webviewResult2.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
            Iterator it2 = webviewResultList.iterator();
            int i = 0;
            while (true) {
                if (!it2.hasNext()) {
                    i = -1;
                    break;
                } else if (Intrinsics.areEqual(moduleId, ((HyperKycData.WebviewResult) it2.next()).getTag$hyperkyc_release())) {
                    break;
                } else {
                    i++;
                }
            }
            if (i != -1) {
                webviewResultList.set(i, webviewResult2);
            } else {
                webviewResultList.add(webviewResult2);
            }
            addDynamicVariables(webviewResult2.getVariables(), moduleId);
            HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
            HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
            StringBuilder sb3 = new StringBuilder();
            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
            Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
            StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
            if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                Class<?> cls3 = webviewResult2.getClass();
                canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                if (canonicalName3 == null) {
                    canonicalName3 = "N/A";
                }
            }
            Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
            if (matcher3.find()) {
                str6 = "";
                canonicalName3 = matcher3.replaceAll(str6);
                Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
            } else {
                str6 = "";
            }
            Unit unit3 = Unit.INSTANCE;
            if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                canonicalName3 = canonicalName3.substring(0, 23);
                Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
            }
            sb3.append(canonicalName3);
            sb3.append(" - ");
            String str14 = "variables = [" + webviewResult2.getVariables() + ']';
            if (str14 == null) {
                str14 = "null ";
            }
            sb3.append(str14);
            sb3.append(c2);
            sb3.append(str6);
            companion4.log(level2, sb3.toString());
            if (!CoreExtsKt.isRelease()) {
                try {
                    Result.Companion companion5 = Result.INSTANCE;
                    Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str12, new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                    obj3 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                } catch (Throwable th2) {
                    Result.Companion companion6 = Result.INSTANCE;
                    obj3 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                }
                Object obj4 = obj3;
                if (Result.m1208isFailureimpl(obj4)) {
                    obj4 = str6;
                }
                String str15 = (String) obj4;
                if (CoreExtsKt.isDebug()) {
                    Intrinsics.checkNotNullExpressionValue(str15, str13);
                    if (StringsKt.contains$default((CharSequence) str15, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                        if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                            str4 = null;
                        } else {
                            str4 = null;
                            str7 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                        }
                        Class<?> cls4 = webviewResult2.getClass();
                        str7 = cls4 != null ? cls4.getCanonicalName() : str4;
                        if (str7 == null) {
                            str7 = "N/A";
                        }
                        Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                        if (matcher4.find()) {
                            str7 = matcher4.replaceAll(str6);
                            Intrinsics.checkNotNullExpressionValue(str7, "replaceAll(\"\")");
                        }
                        Unit unit4 = Unit.INSTANCE;
                        if (str7.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            str7 = str7.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        StringBuilder sb4 = new StringBuilder();
                        String str16 = "variables = [" + webviewResult2.getVariables() + ']';
                        if (str16 == null) {
                            str16 = "null ";
                        }
                        sb4.append(str16);
                        sb4.append(c2);
                        sb4.append(str6);
                        Log.println(4, str7, sb4.toString());
                        Unit unit5 = Unit.INSTANCE;
                        Unit unit6 = Unit.INSTANCE;
                    }
                }
            }
            str4 = null;
            Unit unit52 = Unit.INSTANCE;
            Unit unit62 = Unit.INSTANCE;
        }
        Iterator<T> it3 = this.hyperKycData.webviewResultList().iterator();
        while (true) {
            if (!it3.hasNext()) {
                obj = str4;
                break;
            }
            Object next = it3.next();
            String tag$hyperkyc_release2 = ((HyperKycData.WebviewResult) next).getTag$hyperkyc_release();
            if (moduleId == null) {
                str5 = this.currentFlowId;
                if (str5 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str5 = str4;
                }
            } else {
                str5 = moduleId;
            }
            if (Intrinsics.areEqual(tag$hyperkyc_release2, str5)) {
                obj = next;
                break;
            }
        }
        HyperKycData.WebviewResult webviewResult4 = (HyperKycData.WebviewResult) obj;
        if (webviewResult4 != null) {
            updateModuleDataMap$default(this, webviewResult4.tag(), null, null, null, webviewResult4.getVariables(), 14, null);
            Unit unit7 = Unit.INSTANCE;
            Unit unit8 = Unit.INSTANCE;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:117:0x041d, code lost:
    
        if (r0 != null) goto L164;
     */
    /* JADX WARN: Removed duplicated region for block: B:101:0x04d1 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:126:0x0446  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x0487  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01de  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x04b2  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x04d6  */
    /* JADX WARN: Removed duplicated region for block: B:98:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void updateNFCData$hyperkyc_release(String moduleId, HyperKycData.NFCResult nfcResult, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String canonicalName2;
        String className;
        String str3;
        Iterator<T> it;
        Object obj;
        HyperKycData.NFCResult nFCResult;
        String str4;
        Object obj2;
        String str5;
        Class<?> cls;
        Object m1202constructorimpl2;
        String str6;
        String str7;
        Matcher matcher;
        String str8;
        Class<?> cls2;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls3 = getClass();
            canonicalName = cls3 != null ? cls3.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str9 = "updateNFCData() called with: moduleId = [" + moduleId + "], nfcResult = [" + nfcResult + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str9 == null) {
            str9 = "null ";
        }
        sb.append(str9);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "packageName";
                str2 = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls4 = getClass();
                        canonicalName2 = cls4 != null ? cls4.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str10 = "updateNFCData() called with: moduleId = [" + moduleId + "], nfcResult = [" + nfcResult + "], incrementAttempts = [" + incrementAttempts + ']';
                    if (str10 == null) {
                        str10 = "null ";
                    }
                    sb2.append(str10);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
                if (incrementAttempts) {
                    for (HyperKycData.NFCResult nFCResult2 : this.hyperKycData.nfcResultList()) {
                        String tag$hyperkyc_release = nFCResult2.getTag$hyperkyc_release();
                        String str11 = this.currentFlowId;
                        if (str11 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str11 = null;
                        }
                        if (Intrinsics.areEqual(tag$hyperkyc_release, str11)) {
                            nFCResult2.setAttempts$hyperkyc_release(nFCResult2.getAttempts$hyperkyc_release() + 1);
                            nFCResult2.getVariables().put(AppConstants.ATTEMPTS_KEY, nFCResult2.attempts());
                        }
                    }
                    throw new NoSuchElementException("Collection contains no element matching the predicate.");
                }
                if (moduleId != null || nfcResult == null) {
                    str3 = null;
                } else {
                    ArrayList nfcResultList = this.hyperKycData.getNfcResultList();
                    Iterator it2 = nfcResultList.iterator();
                    while (true) {
                        if (it2.hasNext()) {
                            obj2 = it2.next();
                            if (Intrinsics.areEqual(moduleId, ((HyperKycData.NFCResult) obj2).getTag$hyperkyc_release())) {
                                break;
                            }
                        } else {
                            obj2 = null;
                            break;
                        }
                    }
                    HyperKycData.NFCResult nFCResult3 = (HyperKycData.NFCResult) obj2;
                    Integer valueOf = nFCResult3 != null ? Integer.valueOf(nFCResult3.getAttempts$hyperkyc_release()) : null;
                    nfcResult.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
                    nfcResult.getVariables().put("nfcStatus", nfcResult.getNfcStatus$hyperkyc_release());
                    nfcResult.getVariables().put("nfcData", nfcResult.getNfcData$hyperkyc_release());
                    nfcResult.getVariables().put("nfcErrorMessage", nfcResult.getNfcErrorMessage$hyperkyc_release());
                    nfcResult.getVariables().put("nfcErrorCode", nfcResult.getNfcErrorCode$hyperkyc_release());
                    nfcResult.getVariables().put("nfcLastStep", nfcResult.getNfcLastStep$hyperkyc_release());
                    Iterator it3 = nfcResultList.iterator();
                    int i = 0;
                    while (true) {
                        if (!it3.hasNext()) {
                            i = -1;
                            break;
                        } else if (Intrinsics.areEqual(moduleId, ((HyperKycData.NFCResult) it3.next()).getTag$hyperkyc_release())) {
                            break;
                        } else {
                            i++;
                        }
                    }
                    if (i != -1) {
                        nfcResultList.set(i, nfcResult);
                    } else {
                        nfcResultList.add(nfcResult);
                    }
                    addDynamicVariables(nfcResult.getVariables(), moduleId);
                    HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                    HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb3 = new StringBuilder();
                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                    if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (str5 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        String canonicalName3 = (nfcResultList == null || (cls = nfcResultList.getClass()) == null) ? null : cls.getCanonicalName();
                        str5 = canonicalName3 == null ? "N/A" : canonicalName3;
                    }
                    Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str5);
                    if (matcher4.find()) {
                        str5 = matcher4.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str5, "replaceAll(\"\")");
                    }
                    Unit unit3 = Unit.INSTANCE;
                    if (str5.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str5 = str5.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str5, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb3.append(str5);
                    sb3.append(" - ");
                    String str12 = "variables = [" + nfcResult.getVariables() + " ]";
                    if (str12 == null) {
                        str12 = "null ";
                    }
                    sb3.append(str12);
                    sb3.append(' ');
                    sb3.append("");
                    companion4.log(level2, sb3.toString());
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion5 = Result.INSTANCE;
                            Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str2, new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                        } catch (Throwable th2) {
                            Result.Companion companion6 = Result.INSTANCE;
                            m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                            m1202constructorimpl2 = "";
                        }
                        String str13 = (String) m1202constructorimpl2;
                        if (CoreExtsKt.isDebug()) {
                            Intrinsics.checkNotNullExpressionValue(str13, str);
                            if (StringsKt.contains$default((CharSequence) str13, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                                StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                    str3 = null;
                                } else {
                                    str3 = null;
                                    str6 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                }
                                str6 = (nfcResultList == null || (cls2 = nfcResultList.getClass()) == null) ? str3 : cls2.getCanonicalName();
                                if (str6 == null) {
                                    str7 = "N/A";
                                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                    if (matcher.find()) {
                                        str7 = matcher.replaceAll("");
                                        Intrinsics.checkNotNullExpressionValue(str7, "replaceAll(\"\")");
                                    }
                                    Unit unit4 = Unit.INSTANCE;
                                    if (str7.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                        str7 = str7.substring(0, 23);
                                        Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                                    }
                                    StringBuilder sb4 = new StringBuilder();
                                    str8 = "variables = [" + nfcResult.getVariables() + " ]";
                                    if (str8 == null) {
                                        str8 = "null ";
                                    }
                                    sb4.append(str8);
                                    sb4.append(' ');
                                    sb4.append("");
                                    Log.println(4, str7, sb4.toString());
                                    Unit unit5 = Unit.INSTANCE;
                                }
                                str7 = str6;
                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
                                if (matcher.find()) {
                                }
                                Unit unit42 = Unit.INSTANCE;
                                if (str7.length() > 23) {
                                    str7 = str7.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str7, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb42 = new StringBuilder();
                                str8 = "variables = [" + nfcResult.getVariables() + " ]";
                                if (str8 == null) {
                                }
                                sb42.append(str8);
                                sb42.append(' ');
                                sb42.append("");
                                Log.println(4, str7, sb42.toString());
                                Unit unit52 = Unit.INSTANCE;
                            }
                        }
                    }
                    str3 = null;
                    Unit unit522 = Unit.INSTANCE;
                }
                it = this.hyperKycData.nfcResultList().iterator();
                while (true) {
                    if (it.hasNext()) {
                        obj = str3;
                        break;
                    }
                    Object next = it.next();
                    String tag$hyperkyc_release2 = ((HyperKycData.NFCResult) next).getTag$hyperkyc_release();
                    if (moduleId == null) {
                        str4 = this.currentFlowId;
                        if (str4 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str4 = str3;
                        }
                    } else {
                        str4 = moduleId;
                    }
                    if (Intrinsics.areEqual(tag$hyperkyc_release2, str4)) {
                        obj = next;
                        break;
                    }
                }
                nFCResult = (HyperKycData.NFCResult) obj;
                if (nFCResult == null) {
                    updateModuleDataMap$default(this, nFCResult.tag(), null, null, null, nFCResult.getVariables(), 14, null);
                    Unit unit6 = Unit.INSTANCE;
                    Unit unit7 = Unit.INSTANCE;
                    return;
                }
                return;
            }
        }
        str = "packageName";
        str2 = "getInitialApplication";
        if (incrementAttempts) {
        }
        if (moduleId != null) {
        }
        str3 = null;
        it = this.hyperKycData.nfcResultList().iterator();
        while (true) {
            if (it.hasNext()) {
            }
        }
        nFCResult = (HyperKycData.NFCResult) obj;
        if (nFCResult == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:173:0x0168, code lost:
    
        if (r0 != null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x0357, code lost:
    
        if (r4 != null) goto L132;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateBarcodeData$hyperkyc_release(String moduleId, String barcodeData, String barcodeStatus, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        boolean z;
        String str;
        String str2;
        String str3;
        String className;
        MainVM mainVM;
        String str4;
        MainVM mainVM2;
        String str5;
        Object obj;
        String str6;
        Object obj2;
        String str7;
        String str8;
        String str9;
        int i;
        Object m1202constructorimpl2;
        String canonicalName2;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str10 = "updateBarcodeData() called with: moduleId = [" + moduleId + "], barcodeData = [" + barcodeData + "], barcodeStatus = [" + barcodeStatus + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str10 == null) {
            str10 = "null ";
        }
        sb.append(str10);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            z = incrementAttempts;
            str = "getInitialApplication";
            str2 = null;
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str2 = null;
                    } else {
                        str2 = null;
                        str3 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    String canonicalName3 = cls2 != null ? cls2.getCanonicalName() : str2;
                    str3 = canonicalName3 == null ? "N/A" : canonicalName3;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
                    if (matcher2.find()) {
                        str3 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str3, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (str3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str3 = str3.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    StringBuilder sb3 = new StringBuilder();
                    sb3.append("updateBarcodeData() called with: moduleId = [");
                    sb3.append(moduleId);
                    sb3.append("], barcodeData = [");
                    sb3.append(barcodeData);
                    sb3.append("], barcodeStatus = [");
                    sb3.append(barcodeStatus);
                    sb3.append("], incrementAttempts = [");
                    z = incrementAttempts;
                    sb3.append(z);
                    sb3.append(']');
                    String sb4 = sb3.toString();
                    if (sb4 == null) {
                        sb4 = "null ";
                    }
                    sb2.append(sb4);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str3, sb2.toString());
                } else {
                    z = incrementAttempts;
                    str2 = null;
                }
            } else {
                z = incrementAttempts;
                str = "getInitialApplication";
                str2 = null;
            }
        }
        if (z) {
            mainVM = this;
            for (HyperKycData.BarcodeResult barcodeResult : mainVM.hyperKycData.barcodeResultList()) {
                String tag$hyperkyc_release = barcodeResult.getTag$hyperkyc_release();
                String str11 = mainVM.currentFlowId;
                if (str11 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                    str11 = str2;
                }
                if (Intrinsics.areEqual(tag$hyperkyc_release, str11)) {
                    barcodeResult.setAttempts$hyperkyc_release(barcodeResult.getAttempts$hyperkyc_release() + 1);
                    barcodeResult.getVariables().put(AppConstants.ATTEMPTS_KEY, barcodeResult.attempts());
                }
            }
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        mainVM = this;
        if (moduleId == null || barcodeData == null || barcodeStatus == null) {
            str4 = str2;
            mainVM2 = mainVM;
            str5 = "currentFlowId";
        } else {
            ArrayList barcodeResultList = mainVM.hyperKycData.getBarcodeResultList();
            String str12 = str;
            str5 = "currentFlowId";
            HyperKycData.BarcodeResult barcodeResult2 = new HyperKycData.BarcodeResult(moduleId, barcodeData, barcodeStatus, 0, null, 24, null);
            Iterator it = barcodeResultList.iterator();
            while (true) {
                if (it.hasNext()) {
                    obj2 = it.next();
                    if (Intrinsics.areEqual(moduleId, ((HyperKycData.BarcodeResult) obj2).getTag$hyperkyc_release())) {
                        break;
                    }
                } else {
                    obj2 = null;
                    break;
                }
            }
            HyperKycData.BarcodeResult barcodeResult3 = (HyperKycData.BarcodeResult) obj2;
            Integer valueOf = barcodeResult3 != null ? Integer.valueOf(barcodeResult3.getAttempts$hyperkyc_release()) : null;
            barcodeResult2.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
            barcodeResult2.getVariables().put("barcodeData", barcodeData);
            barcodeResult2.getVariables().put("barcodeStatus", barcodeStatus);
            Iterator it2 = barcodeResultList.iterator();
            int i2 = 0;
            while (true) {
                if (!it2.hasNext()) {
                    i2 = -1;
                    break;
                } else if (Intrinsics.areEqual(moduleId, ((HyperKycData.BarcodeResult) it2.next()).getTag$hyperkyc_release())) {
                    break;
                } else {
                    i2++;
                }
            }
            if (i2 != -1) {
                barcodeResultList.set(i2, barcodeResult2);
            } else {
                barcodeResultList.add(barcodeResult2);
            }
            mainVM2 = this;
            mainVM2.addDynamicVariables(barcodeResult2.getVariables(), moduleId);
            HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
            HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
            StringBuilder sb5 = new StringBuilder();
            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
            Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
            StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
            if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null) {
                str4 = null;
            } else {
                str4 = null;
                str7 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
            }
            Class<?> cls3 = barcodeResult2.getClass();
            String canonicalName4 = cls3 != null ? cls3.getCanonicalName() : str4;
            str7 = canonicalName4 == null ? "N/A" : canonicalName4;
            Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str7);
            if (matcher3.find()) {
                str7 = matcher3.replaceAll("");
                str8 = "replaceAll(\"\")";
                Intrinsics.checkNotNullExpressionValue(str7, str8);
            } else {
                str8 = "replaceAll(\"\")";
            }
            Unit unit3 = Unit.INSTANCE;
            if (str7.length() > 23) {
                i = 26;
                if (Build.VERSION.SDK_INT >= 26) {
                    str9 = "this as java.lang.String…ing(startIndex, endIndex)";
                } else {
                    str7 = str7.substring(0, 23);
                    str9 = "this as java.lang.String…ing(startIndex, endIndex)";
                    Intrinsics.checkNotNullExpressionValue(str7, str9);
                }
            } else {
                str9 = "this as java.lang.String…ing(startIndex, endIndex)";
                i = 26;
            }
            sb5.append(str7);
            sb5.append(" - ");
            String str13 = "variables = [" + barcodeResult2.getVariables() + ']';
            if (str13 == null) {
                str13 = "null ";
            }
            sb5.append(str13);
            sb5.append(' ');
            sb5.append("");
            companion4.log(level2, sb5.toString());
            if (!CoreExtsKt.isRelease()) {
                try {
                    Result.Companion companion5 = Result.INSTANCE;
                    Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str12, new Class[0]).invoke(str4, new Object[0]);
                    Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                } catch (Throwable th2) {
                    Result.Companion companion6 = Result.INSTANCE;
                    m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                    m1202constructorimpl2 = "";
                }
                String packageName2 = (String) m1202constructorimpl2;
                if (CoreExtsKt.isDebug()) {
                    Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                    if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) str4)) {
                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                        if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, str4, 2, str4)) == null) {
                            Class<?> cls4 = barcodeResult2.getClass();
                            canonicalName2 = cls4 != null ? cls4.getCanonicalName() : str4;
                            if (canonicalName2 == null) {
                                canonicalName2 = "N/A";
                            }
                        }
                        Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                        if (matcher4.find()) {
                            canonicalName2 = matcher4.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(canonicalName2, str8);
                        }
                        Unit unit4 = Unit.INSTANCE;
                        if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < i) {
                            canonicalName2 = canonicalName2.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(canonicalName2, str9);
                        }
                        StringBuilder sb6 = new StringBuilder();
                        String str14 = "variables = [" + barcodeResult2.getVariables() + ']';
                        if (str14 == null) {
                            str14 = "null ";
                        }
                        sb6.append(str14);
                        sb6.append(' ');
                        sb6.append("");
                        Log.println(4, canonicalName2, sb6.toString());
                    }
                }
            }
            Unit unit5 = Unit.INSTANCE;
            Unit unit6 = Unit.INSTANCE;
        }
        Iterator<T> it3 = mainVM2.hyperKycData.barcodeResultList().iterator();
        while (true) {
            if (!it3.hasNext()) {
                obj = str4;
                break;
            }
            obj = it3.next();
            String tag$hyperkyc_release2 = ((HyperKycData.BarcodeResult) obj).getTag$hyperkyc_release();
            if (moduleId == null) {
                str6 = mainVM2.currentFlowId;
                if (str6 == null) {
                    Intrinsics.throwUninitializedPropertyAccessException(str5);
                    str6 = str4;
                }
            } else {
                str6 = moduleId;
            }
            if (Intrinsics.areEqual(tag$hyperkyc_release2, str6)) {
                break;
            }
        }
        HyperKycData.BarcodeResult barcodeResult4 = (HyperKycData.BarcodeResult) obj;
        if (barcodeResult4 != null) {
            updateModuleDataMap$default(this, barcodeResult4.tag(), null, null, null, barcodeResult4.getVariables(), 14, null);
            Unit unit7 = Unit.INSTANCE;
            Unit unit8 = Unit.INSTANCE;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:118:0x0461, code lost:
    
        if (r0 != null) goto L172;
     */
    /* JADX WARN: Code restructure failed: missing block: B:171:0x016a, code lost:
    
        if (r0 != null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x0358, code lost:
    
        if (r11 != null) goto L130;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:102:0x0503 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:156:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01fd  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0217  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x025c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x04f1  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0508  */
    /* JADX WARN: Type inference failed for: r12v10 */
    /* JADX WARN: Type inference failed for: r12v6 */
    /* JADX WARN: Type inference failed for: r12v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateSessionData$hyperkyc_release(WorkflowUIState stopSessionUIState, HyperKycData.SessionData sessionData, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        CharSequence charSequence;
        String str;
        String str2;
        String str3;
        char c;
        char c2;
        String className;
        MainVM mainVM;
        String str4;
        String str5;
        String str6;
        Iterator<T> it;
        Object obj;
        HyperKycData.SessionResult sessionResult;
        Object obj2;
        String str7;
        String str8;
        String str9;
        String str10;
        int i;
        Object m1202constructorimpl2;
        String str11;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str12 = "updateSessionData() called with: stopSessionUIState = " + stopSessionUIState + ", sessionData = " + getGson().toJson(sessionData) + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str12 == null) {
            str12 = "null ";
        }
        sb.append(str12);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                charSequence = "co.hyperverge";
                str = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str2 = null;
                    } else {
                        str2 = null;
                        str3 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str3 = cls2 != null ? cls2.getCanonicalName() : str2;
                    if (str3 == null) {
                        str3 = "N/A";
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
                    if (matcher2.find()) {
                        str3 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str3, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    c = 23;
                    if (str3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str3 = str3.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str13 = "updateSessionData() called with: stopSessionUIState = " + stopSessionUIState + ", sessionData = " + getGson().toJson(sessionData) + "], incrementAttempts = [" + incrementAttempts + ']';
                    if (str13 == null) {
                        str13 = "null ";
                    }
                    sb2.append(str13);
                    c2 = ' ';
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str3, sb2.toString());
                    if (stopSessionUIState != null || (str4 = stopSessionUIState.getTag()) == null) {
                        mainVM = this;
                        str4 = mainVM.currentFlowId;
                        if (str4 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str5 = null;
                            if (incrementAttempts) {
                                for (HyperKycData.SessionResult sessionResult2 : mainVM.hyperKycData.sessionResultList()) {
                                    if (Intrinsics.areEqual(sessionResult2.getTag$hyperkyc_release(), str5)) {
                                        sessionResult2.setAttempts$hyperkyc_release(sessionResult2.getAttempts$hyperkyc_release() + 1);
                                        sessionResult2.getVariables().put(AppConstants.ATTEMPTS_KEY, sessionResult2.attempts());
                                    }
                                }
                                throw new NoSuchElementException("Collection contains no element matching the predicate.");
                            }
                            if (stopSessionUIState != null || sessionData == null) {
                                str6 = null;
                            } else {
                                ArrayList sessionResultList = mainVM.hyperKycData.getSessionResultList();
                                String str14 = str;
                                HyperKycData.SessionResult sessionResult3 = new HyperKycData.SessionResult(str5, sessionData, 0, null, null, 28, null);
                                Iterator it2 = sessionResultList.iterator();
                                while (true) {
                                    if (it2.hasNext()) {
                                        obj2 = it2.next();
                                        if (Intrinsics.areEqual(stopSessionUIState.getTag(), ((HyperKycData.SessionResult) obj2).getTag$hyperkyc_release())) {
                                            break;
                                        }
                                    } else {
                                        obj2 = null;
                                        break;
                                    }
                                }
                                HyperKycData.SessionResult sessionResult4 = (HyperKycData.SessionResult) obj2;
                                Integer valueOf = sessionResult4 != null ? Integer.valueOf(sessionResult4.getAttempts$hyperkyc_release()) : null;
                                sessionResult3.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
                                sessionResult3.getVariables().put("videoPath", sessionData.getVideoPath$hyperkyc_release());
                                sessionResult3.getVariables().put(WorkflowModule.Properties.Section.Component.State.STATE_COMPLETED, sessionData.getCompleted$hyperkyc_release());
                                sessionResult3.getVariables().put("videoUrl", sessionData.getVideoUrl$hyperkyc_release());
                                Iterator it3 = sessionResultList.iterator();
                                int i2 = 0;
                                while (true) {
                                    if (!it3.hasNext()) {
                                        i2 = -1;
                                        break;
                                    } else if (Intrinsics.areEqual(stopSessionUIState.getTag(), ((HyperKycData.SessionResult) it3.next()).getTag$hyperkyc_release())) {
                                        break;
                                    } else {
                                        i2++;
                                    }
                                }
                                if (i2 != -1) {
                                    sessionResultList.set(i2, sessionResult3);
                                } else {
                                    sessionResultList.add(sessionResult3);
                                }
                                mainVM.addDynamicVariables(sessionResult3.getVariables(), str5);
                                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                                HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb3 = new StringBuilder();
                                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                                StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                                if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null) {
                                    str7 = null;
                                } else {
                                    str7 = null;
                                    str8 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                }
                                Class<?> cls3 = sessionResult3.getClass();
                                str8 = cls3 != null ? cls3.getCanonicalName() : str7;
                                if (str8 == null) {
                                    str8 = "N/A";
                                }
                                Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                                if (matcher3.find()) {
                                    str10 = "";
                                    str8 = matcher3.replaceAll(str10);
                                    str9 = "replaceAll(\"\")";
                                    Intrinsics.checkNotNullExpressionValue(str8, str9);
                                } else {
                                    str9 = "replaceAll(\"\")";
                                    str10 = "";
                                }
                                Unit unit3 = Unit.INSTANCE;
                                if (str8.length() <= 23) {
                                    i = 0;
                                } else if (Build.VERSION.SDK_INT >= 26) {
                                    i = 0;
                                } else {
                                    i = 0;
                                    str8 = str8.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                sb3.append(str8);
                                sb3.append(" - ");
                                String str15 = "variables = [" + sessionResult3.getVariables() + ']';
                                if (str15 == null) {
                                    str15 = "null ";
                                }
                                sb3.append(str15);
                                sb3.append(' ');
                                sb3.append(str10);
                                companion4.log(level2, sb3.toString());
                                if (!CoreExtsKt.isRelease()) {
                                    try {
                                        Result.Companion companion5 = Result.INSTANCE;
                                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str14, new Class[i]).invoke(null, new Object[i]);
                                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                        m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                    } catch (Throwable th2) {
                                        Result.Companion companion6 = Result.INSTANCE;
                                        m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                    }
                                    if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                        m1202constructorimpl2 = str10;
                                    }
                                    String packageName2 = (String) m1202constructorimpl2;
                                    if (CoreExtsKt.isDebug()) {
                                        Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                                        if (StringsKt.contains$default((CharSequence) packageName2, charSequence, (boolean) i, 2, (Object) null)) {
                                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                            if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                                str6 = null;
                                            } else {
                                                str6 = null;
                                                str11 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                            }
                                            Class<?> cls4 = sessionResult3.getClass();
                                            str11 = cls4 != null ? cls4.getCanonicalName() : str6;
                                            if (str11 == null) {
                                                str11 = "N/A";
                                            }
                                            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                            if (matcher4.find()) {
                                                str11 = matcher4.replaceAll(str10);
                                                Intrinsics.checkNotNullExpressionValue(str11, str9);
                                            }
                                            Unit unit4 = Unit.INSTANCE;
                                            if (str11.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                str11 = str11.substring(i, 23);
                                                Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            StringBuilder sb4 = new StringBuilder();
                                            String str16 = "variables = [" + sessionResult3.getVariables() + ']';
                                            if (str16 == null) {
                                                str16 = "null ";
                                            }
                                            sb4.append(str16);
                                            sb4.append(' ');
                                            sb4.append(str10);
                                            Log.println(4, str11, sb4.toString());
                                            Unit unit5 = Unit.INSTANCE;
                                            Unit unit6 = Unit.INSTANCE;
                                        }
                                    }
                                }
                                str6 = null;
                                Unit unit52 = Unit.INSTANCE;
                                Unit unit62 = Unit.INSTANCE;
                            }
                            it = mainVM.hyperKycData.sessionResultList().iterator();
                            while (true) {
                                if (!it.hasNext()) {
                                    obj = it.next();
                                    if (Intrinsics.areEqual(((HyperKycData.SessionResult) obj).getTag$hyperkyc_release(), str5)) {
                                        break;
                                    }
                                } else {
                                    obj = str6;
                                    break;
                                }
                            }
                            sessionResult = (HyperKycData.SessionResult) obj;
                            if (sessionResult == null) {
                                updateModuleDataMap$default(this, str5, null, sessionResult.requestIds$hyperkyc_release(), null, sessionResult.getVariables(), 10, null);
                                Unit unit7 = Unit.INSTANCE;
                                Unit unit8 = Unit.INSTANCE;
                                return;
                            }
                            return;
                        }
                    } else {
                        mainVM = this;
                    }
                    str5 = str4;
                    if (incrementAttempts) {
                    }
                    if (stopSessionUIState != null) {
                    }
                    str6 = null;
                    it = mainVM.hyperKycData.sessionResultList().iterator();
                    while (true) {
                        if (!it.hasNext()) {
                        }
                    }
                    sessionResult = (HyperKycData.SessionResult) obj;
                    if (sessionResult == null) {
                    }
                }
                c2 = ' ';
                c = 23;
                if (stopSessionUIState != null) {
                }
                mainVM = this;
                str4 = mainVM.currentFlowId;
                if (str4 == null) {
                }
                str5 = str4;
                if (incrementAttempts) {
                }
                if (stopSessionUIState != null) {
                }
                str6 = null;
                it = mainVM.hyperKycData.sessionResultList().iterator();
                while (true) {
                    if (!it.hasNext()) {
                    }
                }
                sessionResult = (HyperKycData.SessionResult) obj;
                if (sessionResult == null) {
                }
            }
        }
        charSequence = "co.hyperverge";
        str = "getInitialApplication";
        c2 = ' ';
        c = 23;
        if (stopSessionUIState != null) {
        }
        mainVM = this;
        str4 = mainVM.currentFlowId;
        if (str4 == null) {
        }
        str5 = str4;
        if (incrementAttempts) {
        }
        if (stopSessionUIState != null) {
        }
        str6 = null;
        it = mainVM.hyperKycData.sessionResultList().iterator();
        while (true) {
            if (!it.hasNext()) {
            }
        }
        sessionResult = (HyperKycData.SessionResult) obj;
        if (sessionResult == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:118:0x0461, code lost:
    
        if (r0 != null) goto L172;
     */
    /* JADX WARN: Code restructure failed: missing block: B:171:0x016a, code lost:
    
        if (r0 != null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x0358, code lost:
    
        if (r11 != null) goto L130;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:102:0x0503 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:156:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01fd  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0217  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x025c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x04f1  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0508  */
    /* JADX WARN: Type inference failed for: r12v10 */
    /* JADX WARN: Type inference failed for: r12v6 */
    /* JADX WARN: Type inference failed for: r12v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateVideoStatementData$hyperkyc_release(WorkflowUIState videoStatementUIState, HyperKycData.VideoStatementData videoStatementData, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        CharSequence charSequence;
        String str;
        String str2;
        String str3;
        char c;
        char c2;
        String className;
        MainVM mainVM;
        String str4;
        String str5;
        String str6;
        Iterator<T> it;
        Object obj;
        HyperKycData.VideoStatementResult videoStatementResult;
        Object obj2;
        String str7;
        String str8;
        String str9;
        String str10;
        int i;
        Object m1202constructorimpl2;
        String str11;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str12 = "updateVideoStatementData() called with: videoStatementUIState = " + videoStatementUIState + ", videoStatementData = " + getGson().toJson(videoStatementData) + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str12 == null) {
            str12 = "null ";
        }
        sb.append(str12);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                charSequence = "co.hyperverge";
                str = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str2 = null;
                    } else {
                        str2 = null;
                        str3 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str3 = cls2 != null ? cls2.getCanonicalName() : str2;
                    if (str3 == null) {
                        str3 = "N/A";
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
                    if (matcher2.find()) {
                        str3 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str3, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    c = 23;
                    if (str3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str3 = str3.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str13 = "updateVideoStatementData() called with: videoStatementUIState = " + videoStatementUIState + ", videoStatementData = " + getGson().toJson(videoStatementData) + "], incrementAttempts = [" + incrementAttempts + ']';
                    if (str13 == null) {
                        str13 = "null ";
                    }
                    sb2.append(str13);
                    c2 = ' ';
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str3, sb2.toString());
                    if (videoStatementUIState != null || (str4 = videoStatementUIState.getTag()) == null) {
                        mainVM = this;
                        str4 = mainVM.currentFlowId;
                        if (str4 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str5 = null;
                            if (incrementAttempts) {
                                for (HyperKycData.VideoStatementResult videoStatementResult2 : mainVM.hyperKycData.videoStatementResultList()) {
                                    if (Intrinsics.areEqual(videoStatementResult2.getTag$hyperkyc_release(), str5)) {
                                        videoStatementResult2.setAttempts$hyperkyc_release(videoStatementResult2.getAttempts$hyperkyc_release() + 1);
                                        videoStatementResult2.getVariables().put(AppConstants.ATTEMPTS_KEY, videoStatementResult2.attempts());
                                    }
                                }
                                throw new NoSuchElementException("Collection contains no element matching the predicate.");
                            }
                            if (videoStatementUIState != null || videoStatementData == null) {
                                str6 = null;
                            } else {
                                ArrayList videoStatementResultList = mainVM.hyperKycData.getVideoStatementResultList();
                                String str14 = str;
                                HyperKycData.VideoStatementResult videoStatementResult3 = new HyperKycData.VideoStatementResult(str5, videoStatementData, 0, null, null, 28, null);
                                Iterator it2 = videoStatementResultList.iterator();
                                while (true) {
                                    if (it2.hasNext()) {
                                        obj2 = it2.next();
                                        if (Intrinsics.areEqual(videoStatementUIState.getTag(), ((HyperKycData.VideoStatementResult) obj2).getTag$hyperkyc_release())) {
                                            break;
                                        }
                                    } else {
                                        obj2 = null;
                                        break;
                                    }
                                }
                                HyperKycData.VideoStatementResult videoStatementResult4 = (HyperKycData.VideoStatementResult) obj2;
                                Integer valueOf = videoStatementResult4 != null ? Integer.valueOf(videoStatementResult4.getAttempts$hyperkyc_release()) : null;
                                videoStatementResult3.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
                                videoStatementResult3.getVariables().put(ApiAction.PASS, videoStatementData.getPass$hyperkyc_release());
                                videoStatementResult3.getVariables().put("image", videoStatementData.getImage$hyperkyc_release());
                                videoStatementResult3.getVariables().put("statements", videoStatementData.getStatements$hyperkyc_release());
                                Iterator it3 = videoStatementResultList.iterator();
                                int i2 = 0;
                                while (true) {
                                    if (!it3.hasNext()) {
                                        i2 = -1;
                                        break;
                                    } else if (Intrinsics.areEqual(videoStatementUIState.getTag(), ((HyperKycData.VideoStatementResult) it3.next()).getTag$hyperkyc_release())) {
                                        break;
                                    } else {
                                        i2++;
                                    }
                                }
                                if (i2 != -1) {
                                    videoStatementResultList.set(i2, videoStatementResult3);
                                } else {
                                    videoStatementResultList.add(videoStatementResult3);
                                }
                                mainVM.addDynamicVariables(videoStatementResult3.getVariables(), str5);
                                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                                HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb3 = new StringBuilder();
                                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                                StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                                if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null) {
                                    str7 = null;
                                } else {
                                    str7 = null;
                                    str8 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                }
                                Class<?> cls3 = videoStatementResult3.getClass();
                                str8 = cls3 != null ? cls3.getCanonicalName() : str7;
                                if (str8 == null) {
                                    str8 = "N/A";
                                }
                                Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                                if (matcher3.find()) {
                                    str10 = "";
                                    str8 = matcher3.replaceAll(str10);
                                    str9 = "replaceAll(\"\")";
                                    Intrinsics.checkNotNullExpressionValue(str8, str9);
                                } else {
                                    str9 = "replaceAll(\"\")";
                                    str10 = "";
                                }
                                Unit unit3 = Unit.INSTANCE;
                                if (str8.length() <= 23) {
                                    i = 0;
                                } else if (Build.VERSION.SDK_INT >= 26) {
                                    i = 0;
                                } else {
                                    i = 0;
                                    str8 = str8.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                sb3.append(str8);
                                sb3.append(" - ");
                                String str15 = "variables = [" + videoStatementResult3.getVariables() + ']';
                                if (str15 == null) {
                                    str15 = "null ";
                                }
                                sb3.append(str15);
                                sb3.append(' ');
                                sb3.append(str10);
                                companion4.log(level2, sb3.toString());
                                if (!CoreExtsKt.isRelease()) {
                                    try {
                                        Result.Companion companion5 = Result.INSTANCE;
                                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str14, new Class[i]).invoke(null, new Object[i]);
                                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                        m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                    } catch (Throwable th2) {
                                        Result.Companion companion6 = Result.INSTANCE;
                                        m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                    }
                                    if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                        m1202constructorimpl2 = str10;
                                    }
                                    String packageName2 = (String) m1202constructorimpl2;
                                    if (CoreExtsKt.isDebug()) {
                                        Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                                        if (StringsKt.contains$default((CharSequence) packageName2, charSequence, (boolean) i, 2, (Object) null)) {
                                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                            if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                                str6 = null;
                                            } else {
                                                str6 = null;
                                                str11 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                            }
                                            Class<?> cls4 = videoStatementResult3.getClass();
                                            str11 = cls4 != null ? cls4.getCanonicalName() : str6;
                                            if (str11 == null) {
                                                str11 = "N/A";
                                            }
                                            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                            if (matcher4.find()) {
                                                str11 = matcher4.replaceAll(str10);
                                                Intrinsics.checkNotNullExpressionValue(str11, str9);
                                            }
                                            Unit unit4 = Unit.INSTANCE;
                                            if (str11.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                str11 = str11.substring(i, 23);
                                                Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            StringBuilder sb4 = new StringBuilder();
                                            String str16 = "variables = [" + videoStatementResult3.getVariables() + ']';
                                            if (str16 == null) {
                                                str16 = "null ";
                                            }
                                            sb4.append(str16);
                                            sb4.append(' ');
                                            sb4.append(str10);
                                            Log.println(4, str11, sb4.toString());
                                            Unit unit5 = Unit.INSTANCE;
                                            Unit unit6 = Unit.INSTANCE;
                                        }
                                    }
                                }
                                str6 = null;
                                Unit unit52 = Unit.INSTANCE;
                                Unit unit62 = Unit.INSTANCE;
                            }
                            it = mainVM.hyperKycData.videoStatementResultList().iterator();
                            while (true) {
                                if (!it.hasNext()) {
                                    obj = it.next();
                                    if (Intrinsics.areEqual(((HyperKycData.VideoStatementResult) obj).getTag$hyperkyc_release(), str5)) {
                                        break;
                                    }
                                } else {
                                    obj = str6;
                                    break;
                                }
                            }
                            videoStatementResult = (HyperKycData.VideoStatementResult) obj;
                            if (videoStatementResult == null) {
                                updateModuleDataMap$default(this, str5, null, videoStatementResult.requestIds$hyperkyc_release(), null, videoStatementResult.getVariables(), 10, null);
                                Unit unit7 = Unit.INSTANCE;
                                Unit unit8 = Unit.INSTANCE;
                                return;
                            }
                            return;
                        }
                    } else {
                        mainVM = this;
                    }
                    str5 = str4;
                    if (incrementAttempts) {
                    }
                    if (videoStatementUIState != null) {
                    }
                    str6 = null;
                    it = mainVM.hyperKycData.videoStatementResultList().iterator();
                    while (true) {
                        if (!it.hasNext()) {
                        }
                    }
                    videoStatementResult = (HyperKycData.VideoStatementResult) obj;
                    if (videoStatementResult == null) {
                    }
                }
                c2 = ' ';
                c = 23;
                if (videoStatementUIState != null) {
                }
                mainVM = this;
                str4 = mainVM.currentFlowId;
                if (str4 == null) {
                }
                str5 = str4;
                if (incrementAttempts) {
                }
                if (videoStatementUIState != null) {
                }
                str6 = null;
                it = mainVM.hyperKycData.videoStatementResultList().iterator();
                while (true) {
                    if (!it.hasNext()) {
                    }
                }
                videoStatementResult = (HyperKycData.VideoStatementResult) obj;
                if (videoStatementResult == null) {
                }
            }
        }
        charSequence = "co.hyperverge";
        str = "getInitialApplication";
        c2 = ' ';
        c = 23;
        if (videoStatementUIState != null) {
        }
        mainVM = this;
        str4 = mainVM.currentFlowId;
        if (str4 == null) {
        }
        str5 = str4;
        if (incrementAttempts) {
        }
        if (videoStatementUIState != null) {
        }
        str6 = null;
        it = mainVM.hyperKycData.videoStatementResultList().iterator();
        while (true) {
            if (!it.hasNext()) {
            }
        }
        videoStatementResult = (HyperKycData.VideoStatementResult) obj;
        if (videoStatementResult == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:118:0x047b, code lost:
    
        if (r0 != null) goto L172;
     */
    /* JADX WARN: Code restructure failed: missing block: B:171:0x016a, code lost:
    
        if (r0 != null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x0372, code lost:
    
        if (r11 != null) goto L130;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:102:0x051d A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:156:0x020d  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01fd  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0217  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x025c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x050b  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0522  */
    /* JADX WARN: Type inference failed for: r12v11 */
    /* JADX WARN: Type inference failed for: r12v12 */
    /* JADX WARN: Type inference failed for: r12v8 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ void updateVideoStatementV2Data$hyperkyc_release(WorkflowUIState videoStatementV2UIState, HyperKycData.VideoStatementV2Data videoStatementV2Data, boolean incrementAttempts) {
        String canonicalName;
        Object m1202constructorimpl;
        CharSequence charSequence;
        String str;
        String str2;
        String str3;
        char c;
        char c2;
        String className;
        MainVM mainVM;
        String str4;
        String str5;
        String str6;
        Iterator<T> it;
        Object obj;
        HyperKycData.VideoStatementV2Result videoStatementV2Result;
        Object obj2;
        String str7;
        String str8;
        String str9;
        String str10;
        int i;
        Object m1202constructorimpl2;
        String str11;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str12 = "updateVideoStatementV2Data() called with: videoStatementV2UIState = " + videoStatementV2UIState + ", videoStatementV2Data = " + getGson().toJson(videoStatementV2Data) + "], incrementAttempts = [" + incrementAttempts + ']';
        if (str12 == null) {
            str12 = "null ";
        }
        sb.append(str12);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                charSequence = "co.hyperverge";
                str = "getInitialApplication";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str2 = null;
                    } else {
                        str2 = null;
                        str3 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str3 = cls2 != null ? cls2.getCanonicalName() : str2;
                    if (str3 == null) {
                        str3 = "N/A";
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
                    if (matcher2.find()) {
                        str3 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str3, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    c = 23;
                    if (str3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str3 = str3.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str13 = "updateVideoStatementV2Data() called with: videoStatementV2UIState = " + videoStatementV2UIState + ", videoStatementV2Data = " + getGson().toJson(videoStatementV2Data) + "], incrementAttempts = [" + incrementAttempts + ']';
                    if (str13 == null) {
                        str13 = "null ";
                    }
                    sb2.append(str13);
                    c2 = ' ';
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str3, sb2.toString());
                    if (videoStatementV2UIState != null || (str4 = videoStatementV2UIState.getTag()) == null) {
                        mainVM = this;
                        str4 = mainVM.currentFlowId;
                        if (str4 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str5 = null;
                            if (incrementAttempts) {
                                for (HyperKycData.VideoStatementV2Result videoStatementV2Result2 : mainVM.hyperKycData.videoStatementV2ResultList()) {
                                    if (Intrinsics.areEqual(videoStatementV2Result2.getTag$hyperkyc_release(), str5)) {
                                        videoStatementV2Result2.setAttempts$hyperkyc_release(videoStatementV2Result2.getAttempts$hyperkyc_release() + 1);
                                        videoStatementV2Result2.getVariables().put(AppConstants.ATTEMPTS_KEY, videoStatementV2Result2.attempts());
                                    }
                                }
                                throw new NoSuchElementException("Collection contains no element matching the predicate.");
                            }
                            if (videoStatementV2UIState != null || videoStatementV2Data == null) {
                                str6 = null;
                            } else {
                                ArrayList videoStatementV2ResultList = mainVM.hyperKycData.getVideoStatementV2ResultList();
                                String str14 = str;
                                HyperKycData.VideoStatementV2Result videoStatementV2Result3 = new HyperKycData.VideoStatementV2Result(str5, videoStatementV2Data, 0, null, null, 28, null);
                                Iterator it2 = videoStatementV2ResultList.iterator();
                                while (true) {
                                    if (it2.hasNext()) {
                                        obj2 = it2.next();
                                        if (Intrinsics.areEqual(str5, ((HyperKycData.VideoStatementV2Result) obj2).getTag$hyperkyc_release())) {
                                            break;
                                        }
                                    } else {
                                        obj2 = null;
                                        break;
                                    }
                                }
                                HyperKycData.VideoStatementV2Result videoStatementV2Result4 = (HyperKycData.VideoStatementV2Result) obj2;
                                Integer valueOf = videoStatementV2Result4 != null ? Integer.valueOf(videoStatementV2Result4.getAttempts$hyperkyc_release()) : null;
                                videoStatementV2Result3.setAttempts$hyperkyc_release(valueOf != null ? valueOf.intValue() : 0);
                                videoStatementV2Result3.getVariables().put("statement", videoStatementV2Data.getStatement$hyperkyc_release());
                                videoStatementV2Result3.getVariables().put("videoPath", videoStatementV2Data.getVideoPath$hyperkyc_release());
                                videoStatementV2Result3.getVariables().put("imagePath", videoStatementV2Data.getImagePath$hyperkyc_release());
                                videoStatementV2Result3.getVariables().put("videoUrl", videoStatementV2Data.getVideoUrl$hyperkyc_release());
                                videoStatementV2Result3.getVariables().put("attemptsCount", videoStatementV2Data.getAttemptsCount$hyperkyc_release());
                                Iterator it3 = videoStatementV2ResultList.iterator();
                                int i2 = 0;
                                while (true) {
                                    if (!it3.hasNext()) {
                                        i2 = -1;
                                        break;
                                    } else if (Intrinsics.areEqual(videoStatementV2UIState.getTag(), ((HyperKycData.VideoStatementV2Result) it3.next()).getTag$hyperkyc_release())) {
                                        break;
                                    } else {
                                        i2++;
                                    }
                                }
                                if (i2 != -1) {
                                    videoStatementV2ResultList.set(i2, videoStatementV2Result3);
                                } else {
                                    videoStatementV2ResultList.add(videoStatementV2Result3);
                                }
                                mainVM.addDynamicVariables(videoStatementV2Result3.getVariables(), str5);
                                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                                HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb3 = new StringBuilder();
                                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                                StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                                if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null) {
                                    str7 = null;
                                } else {
                                    str7 = null;
                                    str8 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                }
                                Class<?> cls3 = videoStatementV2Result3.getClass();
                                str8 = cls3 != null ? cls3.getCanonicalName() : str7;
                                if (str8 == null) {
                                    str8 = "N/A";
                                }
                                Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                                if (matcher3.find()) {
                                    str10 = "";
                                    str8 = matcher3.replaceAll(str10);
                                    str9 = "replaceAll(\"\")";
                                    Intrinsics.checkNotNullExpressionValue(str8, str9);
                                } else {
                                    str9 = "replaceAll(\"\")";
                                    str10 = "";
                                }
                                Unit unit3 = Unit.INSTANCE;
                                if (str8.length() <= 23) {
                                    i = 0;
                                } else if (Build.VERSION.SDK_INT >= 26) {
                                    i = 0;
                                } else {
                                    i = 0;
                                    str8 = str8.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                sb3.append(str8);
                                sb3.append(" - ");
                                String str15 = "variables = [" + videoStatementV2Result3.getVariables() + ']';
                                if (str15 == null) {
                                    str15 = "null ";
                                }
                                sb3.append(str15);
                                sb3.append(' ');
                                sb3.append(str10);
                                companion4.log(level2, sb3.toString());
                                if (!CoreExtsKt.isRelease()) {
                                    try {
                                        Result.Companion companion5 = Result.INSTANCE;
                                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod(str14, new Class[i]).invoke(null, new Object[i]);
                                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                        m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                    } catch (Throwable th2) {
                                        Result.Companion companion6 = Result.INSTANCE;
                                        m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                    }
                                    if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                        m1202constructorimpl2 = str10;
                                    }
                                    String packageName2 = (String) m1202constructorimpl2;
                                    if (CoreExtsKt.isDebug()) {
                                        Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                                        if (StringsKt.contains$default((CharSequence) packageName2, charSequence, (boolean) i, 2, (Object) null)) {
                                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                            Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                            if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                                str6 = null;
                                            } else {
                                                str6 = null;
                                                str11 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                            }
                                            Class<?> cls4 = videoStatementV2Result3.getClass();
                                            str11 = cls4 != null ? cls4.getCanonicalName() : str6;
                                            if (str11 == null) {
                                                str11 = "N/A";
                                            }
                                            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str11);
                                            if (matcher4.find()) {
                                                str11 = matcher4.replaceAll(str10);
                                                Intrinsics.checkNotNullExpressionValue(str11, str9);
                                            }
                                            Unit unit4 = Unit.INSTANCE;
                                            if (str11.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                str11 = str11.substring(i, 23);
                                                Intrinsics.checkNotNullExpressionValue(str11, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            StringBuilder sb4 = new StringBuilder();
                                            String str16 = "variables = [" + videoStatementV2Result3.getVariables() + ']';
                                            if (str16 == null) {
                                                str16 = "null ";
                                            }
                                            sb4.append(str16);
                                            sb4.append(' ');
                                            sb4.append(str10);
                                            Log.println(4, str11, sb4.toString());
                                            Unit unit5 = Unit.INSTANCE;
                                            Unit unit6 = Unit.INSTANCE;
                                        }
                                    }
                                }
                                str6 = null;
                                Unit unit52 = Unit.INSTANCE;
                                Unit unit62 = Unit.INSTANCE;
                            }
                            it = mainVM.hyperKycData.videoStatementV2ResultList().iterator();
                            while (true) {
                                if (!it.hasNext()) {
                                    obj = it.next();
                                    if (Intrinsics.areEqual(((HyperKycData.VideoStatementV2Result) obj).getTag$hyperkyc_release(), str5)) {
                                        break;
                                    }
                                } else {
                                    obj = str6;
                                    break;
                                }
                            }
                            videoStatementV2Result = (HyperKycData.VideoStatementV2Result) obj;
                            if (videoStatementV2Result == null) {
                                updateModuleDataMap$default(this, str5, null, videoStatementV2Result.requestIds$hyperkyc_release(), null, videoStatementV2Result.getVariables(), 10, null);
                                Unit unit7 = Unit.INSTANCE;
                                Unit unit8 = Unit.INSTANCE;
                                return;
                            }
                            return;
                        }
                    } else {
                        mainVM = this;
                    }
                    str5 = str4;
                    if (incrementAttempts) {
                    }
                    if (videoStatementV2UIState != null) {
                    }
                    str6 = null;
                    it = mainVM.hyperKycData.videoStatementV2ResultList().iterator();
                    while (true) {
                        if (!it.hasNext()) {
                        }
                    }
                    videoStatementV2Result = (HyperKycData.VideoStatementV2Result) obj;
                    if (videoStatementV2Result == null) {
                    }
                }
                c2 = ' ';
                c = 23;
                if (videoStatementV2UIState != null) {
                }
                mainVM = this;
                str4 = mainVM.currentFlowId;
                if (str4 == null) {
                }
                str5 = str4;
                if (incrementAttempts) {
                }
                if (videoStatementV2UIState != null) {
                }
                str6 = null;
                it = mainVM.hyperKycData.videoStatementV2ResultList().iterator();
                while (true) {
                    if (!it.hasNext()) {
                    }
                }
                videoStatementV2Result = (HyperKycData.VideoStatementV2Result) obj;
                if (videoStatementV2Result == null) {
                }
            }
        }
        charSequence = "co.hyperverge";
        str = "getInitialApplication";
        c2 = ' ';
        c = 23;
        if (videoStatementV2UIState != null) {
        }
        mainVM = this;
        str4 = mainVM.currentFlowId;
        if (str4 == null) {
        }
        str5 = str4;
        if (incrementAttempts) {
        }
        if (videoStatementV2UIState != null) {
        }
        str6 = null;
        it = mainVM.hyperKycData.videoStatementV2ResultList().iterator();
        while (true) {
            if (!it.hasNext()) {
            }
        }
        videoStatementV2Result = (HyperKycData.VideoStatementV2Result) obj;
        if (videoStatementV2Result == null) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:47:0x0135, code lost:
    
        if (r0 != null) goto L57;
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x0147, code lost:
    
        if (r0 == null) goto L58;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x014b, code lost:
    
        r0 = co.hyperverge.hyperkyc.utils.extensions.LogExtsKt.ANON_CLASS_PATTERN.matcher(r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x015a, code lost:
    
        if (r0.find() == false) goto L61;
     */
    /* JADX WARN: Code restructure failed: missing block: B:55:0x015c, code lost:
    
        r8 = r0.replaceAll("");
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r8, "replaceAll(\"\")");
     */
    /* JADX WARN: Code restructure failed: missing block: B:57:0x0167, code lost:
    
        if (r8.length() <= 23) goto L67;
     */
    /* JADX WARN: Code restructure failed: missing block: B:59:0x016b, code lost:
    
        if (android.os.Build.VERSION.SDK_INT < 26) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:60:0x016e, code lost:
    
        r8 = r8.substring(0, 23);
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r8, "this as java.lang.String…ing(startIndex, endIndex)");
     */
    /* JADX WARN: Code restructure failed: missing block: B:61:0x0175, code lost:
    
        r0 = new java.lang.StringBuilder();
        r4 = "addDynamicVariables() called with: moduleId = " + r19;
     */
    /* JADX WARN: Code restructure failed: missing block: B:62:0x0189, code lost:
    
        if (r4 != null) goto L70;
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x018b, code lost:
    
        r4 = "null ";
     */
    /* JADX WARN: Code restructure failed: missing block: B:64:0x018d, code lost:
    
        r0.append(r4);
        r0.append(' ');
        r0.append("");
        android.util.Log.println(3, r8, r0.toString());
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x014a, code lost:
    
        r8 = r0;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final /* synthetic */ void addDynamicVariables(HashMap hashMap, String str) {
        String canonicalName;
        Class<?> cls;
        Object m1202constructorimpl;
        String str2;
        String str3;
        Class<?> cls2;
        String className;
        List<WorkflowModule.Variable> variables;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str4 = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            canonicalName = (hashMap == null || (cls = hashMap.getClass()) == null) ? null : cls.getCanonicalName();
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str5 = "addDynamicVariables() called with: moduleId = " + str;
        if (str5 == null) {
            str5 = "null ";
        }
        sb.append(str5);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str2 = null;
                    } else {
                        str2 = null;
                        str3 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    str3 = (hashMap == null || (cls2 = hashMap.getClass()) == null) ? str2 : cls2.getCanonicalName();
                }
            }
        }
        WorkflowModule moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(str);
        if (moduleForId$hyperkyc_release == null || (variables = moduleForId$hyperkyc_release.getVariables()) == null) {
            return;
        }
        for (WorkflowModule.Variable variable : variables) {
            hashMap.put(variable.getName(), injectFromResponse(str + FilenameUtils.EXTENSION_SEPARATOR + variable.getPath()));
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:105:0x042a, code lost:
    
        if (r0 != null) goto L179;
     */
    /* JADX WARN: Code restructure failed: missing block: B:67:0x0334, code lost:
    
        if (r10 != null) goto L139;
     */
    /* JADX WARN: Removed duplicated region for block: B:113:0x0451  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0489  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x011f  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x0128  */
    /* JADX WARN: Removed duplicated region for block: B:190:0x01e2  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01ec  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x01f4  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x033f  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0347  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x034a  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0344  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x035c  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0395  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x03b2 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final Map<String, Object> getAnalyticsForModule$hyperkyc_release(String currentModuleId, String eventType) {
        String canonicalName;
        String str;
        Object m1202constructorimpl;
        String str2;
        String str3;
        String canonicalName2;
        String className;
        WorkflowModule moduleForId$hyperkyc_release;
        int i;
        StackTraceElement stackTraceElement;
        Map<String, Object> map;
        String str4;
        Matcher matcher;
        String str5;
        Object m1202constructorimpl2;
        String str6;
        String str7;
        String str8;
        Matcher matcher2;
        String str9;
        int i2;
        String className2;
        String className3;
        HyperKycData.FaceData faceData$hyperkyc_release;
        Object obj;
        List<HyperKycData.DocData> docDataList;
        String className4;
        Intrinsics.checkNotNullParameter(currentModuleId, "currentModuleId");
        Intrinsics.checkNotNullParameter(eventType, "eventType");
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement2 == null || (className4 = stackTraceElement2.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher3.find()) {
            canonicalName = matcher3.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        Unit unit = Unit.INSTANCE;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str10 = "getAnalyticsForModule() called with: currentModuleId = " + currentModuleId + ", eventType = " + eventType + ", pos = " + this.currentFlowPos;
        if (str10 == null) {
            str10 = "null ";
        }
        sb.append(str10);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            str2 = "getInitialApplication";
            str3 = "android.app.AppGlobals";
            str = "null ";
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                str = "null ";
                try {
                    Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                } catch (Throwable th) {
                    th = th;
                    Result.Companion companion3 = Result.INSTANCE;
                    m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                    }
                    String packageName = (String) m1202constructorimpl;
                    if (CoreExtsKt.isDebug()) {
                    }
                    moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(currentModuleId);
                    if (moduleForId$hyperkyc_release != null) {
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                str = "null ";
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName2 = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                str2 = "getInitialApplication";
                str3 = "android.app.AppGlobals";
            } else {
                Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                str2 = "getInitialApplication";
                str3 = "android.app.AppGlobals";
                if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement3 == null || (className = stackTraceElement3.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = "N/A";
                        }
                    }
                    Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher4.find()) {
                        canonicalName2 = matcher4.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    Unit unit2 = Unit.INSTANCE;
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str11 = "getAnalyticsForModule() called with: currentModuleId = " + currentModuleId + ", eventType = " + eventType + ", pos = " + this.currentFlowPos;
                    if (str11 == null) {
                        str11 = str;
                    }
                    sb2.append(str11);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
            }
        }
        moduleForId$hyperkyc_release = getModuleForId$hyperkyc_release(currentModuleId);
        if (moduleForId$hyperkyc_release != null) {
            return new LinkedHashMap();
        }
        Map<String, Object> mutableMapOf = MapsKt.mutableMapOf(TuplesKt.to("moduleId", moduleForId$hyperkyc_release.getId()), TuplesKt.to(AnalyticsLogger.Keys.MODULE_TYPE, moduleForId$hyperkyc_release.getType()), TuplesKt.to("moduleSubType", moduleForId$hyperkyc_release.getSubType()), TuplesKt.to(AnalyticsLogger.Keys.SOURCE_ID, moduleForId$hyperkyc_release.getId()), TuplesKt.to(AnalyticsLogger.Keys.SOURCE_TYPE, "module"));
        switch (eventType.hashCode()) {
            case -457917747:
                if (eventType.equals(AnalyticsLogger.Events.MODULE_STARTED)) {
                    return mutableMapOf;
                }
                break;
            case -150511994:
                if (eventType.equals(AnalyticsLogger.Events.APP_BACKGROUND)) {
                    return mutableMapOf;
                }
                break;
            case -113428355:
                if (eventType.equals(AnalyticsLogger.Events.APP_FOREGROUND)) {
                    return mutableMapOf;
                }
                break;
            case -67213306:
                if (eventType.equals(AnalyticsLogger.Events.MODULE_ENDED)) {
                    long currentTimeMillis = System.currentTimeMillis();
                    long j = currentTimeMillis - this.previousTimeStamp;
                    this.previousTimeStamp = currentTimeMillis;
                    this.totalTimeSpent += j;
                    int i3 = this.currentFlowPos;
                    if (i3 > 0) {
                        List<WorkflowUIState> list = this.workflowUIStateList;
                        if (list == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                            list = null;
                        }
                        if (i3 < list.size()) {
                            List<WorkflowUIState> list2 = this.workflowUIStateList;
                            if (list2 == null) {
                                Intrinsics.throwUninitializedPropertyAccessException("workflowUIStateList");
                                list2 = null;
                            }
                            WorkflowUIState workflowUIState = list2.get(this.currentFlowPos);
                            if (!(workflowUIState instanceof WorkflowUIState.DocCapture)) {
                                if (workflowUIState instanceof WorkflowUIState.FaceCapture) {
                                    HyperKycData.FaceResult faceResult$hyperkyc_release = this.hyperKycData.getFaceResult$hyperkyc_release();
                                    i = Math.max(0, ((faceResult$hyperkyc_release == null || (faceData$hyperkyc_release = faceResult$hyperkyc_release.getFaceData$hyperkyc_release()) == null) ? 0 : faceData$hyperkyc_release.getAttemptsCount$hyperkyc_release()) - 1);
                                }
                            } else {
                                Iterator<T> it = this.hyperKycData.docResultList().iterator();
                                while (true) {
                                    if (it.hasNext()) {
                                        obj = it.next();
                                        if (Intrinsics.areEqual(((HyperKycData.DocResult) obj).getTag$hyperkyc_release(), currentModuleId)) {
                                        }
                                    } else {
                                        obj = null;
                                    }
                                }
                                HyperKycData.DocResult docResult = (HyperKycData.DocResult) obj;
                                if (docResult != null && (docDataList = docResult.docDataList()) != null) {
                                    Iterator<T> it2 = docDataList.iterator();
                                    i = 0;
                                    while (it2.hasNext()) {
                                        i += Math.max(0, ((HyperKycData.DocData) it2.next()).getAttemptsCount$hyperkyc_release() - 1);
                                    }
                                    Unit unit3 = Unit.INSTANCE;
                                }
                            }
                            HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                            HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                            StringBuilder sb3 = new StringBuilder();
                            StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                            stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                            if (stackTraceElement == null && (className3 = stackTraceElement.getClassName()) != null) {
                                map = mutableMapOf;
                                str4 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                break;
                            } else {
                                map = mutableMapOf;
                            }
                            Class<?> cls3 = getClass();
                            String canonicalName3 = cls3 == null ? cls3.getCanonicalName() : null;
                            str4 = canonicalName3 != null ? "N/A" : canonicalName3;
                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                            if (matcher.find()) {
                                str4 = matcher.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                            }
                            Unit unit4 = Unit.INSTANCE;
                            if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str4 = str4.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            sb3.append(str4);
                            sb3.append(" - ");
                            str5 = "getAnalyticsForModule: retake count = " + i;
                            if (str5 == null) {
                                str5 = str;
                            }
                            sb3.append(str5);
                            sb3.append(' ');
                            sb3.append("");
                            companion4.log(level2, sb3.toString());
                            if (!CoreExtsKt.isRelease()) {
                                try {
                                    Result.Companion companion5 = Result.INSTANCE;
                                    Object invoke2 = Class.forName(str3).getMethod(str2, new Class[0]).invoke(null, new Object[0]);
                                    Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                                    m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                                } catch (Throwable th3) {
                                    Result.Companion companion6 = Result.INSTANCE;
                                    m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
                                }
                                if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                                    m1202constructorimpl2 = "";
                                }
                                String packageName3 = (String) m1202constructorimpl2;
                                if (CoreExtsKt.isDebug()) {
                                    Intrinsics.checkNotNullExpressionValue(packageName3, "packageName");
                                    if (StringsKt.contains$default((CharSequence) packageName3, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                        if (stackTraceElement4 != null && (className2 = stackTraceElement4.getClassName()) != null) {
                                            str6 = null;
                                            str7 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                            break;
                                        } else {
                                            str6 = null;
                                        }
                                        Class<?> cls4 = getClass();
                                        str7 = cls4 != null ? cls4.getCanonicalName() : str6;
                                        if (str7 == null) {
                                            str8 = "N/A";
                                            matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                                            if (matcher2.find()) {
                                                str8 = matcher2.replaceAll("");
                                                Intrinsics.checkNotNullExpressionValue(str8, "replaceAll(\"\")");
                                            }
                                            Unit unit5 = Unit.INSTANCE;
                                            if (str8.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                str8 = str8.substring(0, 23);
                                                Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                                            }
                                            StringBuilder sb4 = new StringBuilder();
                                            str9 = "getAnalyticsForModule: retake count = " + i;
                                            if (str9 == null) {
                                                str9 = str;
                                            }
                                            sb4.append(str9);
                                            sb4.append(' ');
                                            sb4.append("");
                                            i2 = 3;
                                            Log.println(3, str8, sb4.toString());
                                            Pair[] pairArr = new Pair[i2];
                                            pairArr[0] = TuplesKt.to(AnalyticsLogger.Keys.NEXTSTEP, moduleForId$hyperkyc_release.getNext());
                                            pairArr[1] = TuplesKt.to("timeSpent", Long.valueOf(j));
                                            pairArr[2] = TuplesKt.to(AnalyticsLogger.Keys.RETAKE_ATTEMPTS, Integer.valueOf(i));
                                            Map<String, Object> map2 = map;
                                            map2.putAll(MapsKt.mutableMapOf(pairArr));
                                            return map2;
                                        }
                                        str8 = str7;
                                        matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str8);
                                        if (matcher2.find()) {
                                        }
                                        Unit unit52 = Unit.INSTANCE;
                                        if (str8.length() > 23) {
                                            str8 = str8.substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str8, "this as java.lang.String…ing(startIndex, endIndex)");
                                        }
                                        StringBuilder sb42 = new StringBuilder();
                                        str9 = "getAnalyticsForModule: retake count = " + i;
                                        if (str9 == null) {
                                        }
                                        sb42.append(str9);
                                        sb42.append(' ');
                                        sb42.append("");
                                        i2 = 3;
                                        Log.println(3, str8, sb42.toString());
                                        Pair[] pairArr2 = new Pair[i2];
                                        pairArr2[0] = TuplesKt.to(AnalyticsLogger.Keys.NEXTSTEP, moduleForId$hyperkyc_release.getNext());
                                        pairArr2[1] = TuplesKt.to("timeSpent", Long.valueOf(j));
                                        pairArr2[2] = TuplesKt.to(AnalyticsLogger.Keys.RETAKE_ATTEMPTS, Integer.valueOf(i));
                                        Map<String, Object> map22 = map;
                                        map22.putAll(MapsKt.mutableMapOf(pairArr2));
                                        return map22;
                                    }
                                }
                            }
                            i2 = 3;
                            Pair[] pairArr22 = new Pair[i2];
                            pairArr22[0] = TuplesKt.to(AnalyticsLogger.Keys.NEXTSTEP, moduleForId$hyperkyc_release.getNext());
                            pairArr22[1] = TuplesKt.to("timeSpent", Long.valueOf(j));
                            pairArr22[2] = TuplesKt.to(AnalyticsLogger.Keys.RETAKE_ATTEMPTS, Integer.valueOf(i));
                            Map<String, Object> map222 = map;
                            map222.putAll(MapsKt.mutableMapOf(pairArr22));
                            return map222;
                        }
                    }
                    i = 0;
                    HyperLogger.Level level22 = HyperLogger.Level.DEBUG;
                    HyperLogger companion42 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb32 = new StringBuilder();
                    StackTraceElement[] stackTrace32 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace32, "Throwable().stackTrace");
                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace32);
                    if (stackTraceElement == null) {
                    }
                    map = mutableMapOf;
                    Class<?> cls32 = getClass();
                    if (cls32 == null) {
                    }
                    if (canonicalName3 != null) {
                    }
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                    if (matcher.find()) {
                    }
                    Unit unit42 = Unit.INSTANCE;
                    if (str4.length() > 23) {
                        str4 = str4.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb32.append(str4);
                    sb32.append(" - ");
                    str5 = "getAnalyticsForModule: retake count = " + i;
                    if (str5 == null) {
                    }
                    sb32.append(str5);
                    sb32.append(' ');
                    sb32.append("");
                    companion42.log(level22, sb32.toString());
                    if (!CoreExtsKt.isRelease()) {
                    }
                    i2 = 3;
                    Pair[] pairArr222 = new Pair[i2];
                    pairArr222[0] = TuplesKt.to(AnalyticsLogger.Keys.NEXTSTEP, moduleForId$hyperkyc_release.getNext());
                    pairArr222[1] = TuplesKt.to("timeSpent", Long.valueOf(j));
                    pairArr222[2] = TuplesKt.to(AnalyticsLogger.Keys.RETAKE_ATTEMPTS, Integer.valueOf(i));
                    Map<String, Object> map2222 = map;
                    map2222.putAll(MapsKt.mutableMapOf(pairArr222));
                    return map2222;
                }
                break;
            case 1974549899:
                if (eventType.equals(AnalyticsLogger.Events.MODULE_USER_BACK_PRESS)) {
                    return mutableMapOf;
                }
                break;
        }
        return new LinkedHashMap();
    }

    /* JADX WARN: Code restructure failed: missing block: B:45:0x0143, code lost:
    
        if (r0 != null) goto L55;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x0153, code lost:
    
        if (r0 == null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:50:0x0157, code lost:
    
        r0 = co.hyperverge.hyperkyc.utils.extensions.LogExtsKt.ANON_CLASS_PATTERN.matcher(r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x0166, code lost:
    
        if (r0.find() == false) goto L59;
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x0168, code lost:
    
        r8 = r0.replaceAll("");
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r8, "replaceAll(\"\")");
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x0175, code lost:
    
        if (r8.length() <= 23) goto L65;
     */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x017b, code lost:
    
        if (android.os.Build.VERSION.SDK_INT < 26) goto L64;
     */
    /* JADX WARN: Code restructure failed: missing block: B:57:0x017e, code lost:
    
        r8 = r8.substring(0, 23);
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r8, "this as java.lang.String…ing(startIndex, endIndex)");
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x0185, code lost:
    
        r0 = new java.lang.StringBuilder();
        r4 = "getAnalyticsForCondition() called with: currentConditionId = " + r18 + ", nextStep = " + r19 + ", eventType = " + r20;
     */
    /* JADX WARN: Code restructure failed: missing block: B:59:0x01a5, code lost:
    
        if (r4 != null) goto L68;
     */
    /* JADX WARN: Code restructure failed: missing block: B:60:0x01a7, code lost:
    
        r4 = "null ";
     */
    /* JADX WARN: Code restructure failed: missing block: B:61:0x01a9, code lost:
    
        r0.append(r4);
        r0.append(' ');
        r0.append("");
        android.util.Log.println(3, r8, r0.toString());
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x0156, code lost:
    
        r8 = r0;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final Map<String, Object> getAnalyticsForCondition(String currentConditionId, String nextStep, String eventType) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String className;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str3 = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str4 = "getAnalyticsForCondition() called with: currentConditionId = " + currentConditionId + ", nextStep = " + nextStep + ", eventType = " + eventType;
        if (str4 == null) {
            str4 = "null ";
        }
        sb.append(str4);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str = null;
                    } else {
                        str = null;
                        str2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str2 = cls2 != null ? cls2.getCanonicalName() : str;
                }
            }
        }
        if (Intrinsics.areEqual(eventType, AnalyticsLogger.Events.CONDITION_STARTED)) {
            return MapsKt.mutableMapOf(TuplesKt.to("moduleId", currentConditionId), TuplesKt.to(AnalyticsLogger.Keys.SOURCE_ID, currentConditionId), TuplesKt.to(AnalyticsLogger.Keys.SOURCE_TYPE, AnalyticsLogger.Keys.CONDITION));
        }
        if (Intrinsics.areEqual(eventType, AnalyticsLogger.Events.CONDITION_ENDED)) {
            return MapsKt.mutableMapOf(TuplesKt.to("moduleId", currentConditionId), TuplesKt.to(AnalyticsLogger.Keys.SOURCE_ID, currentConditionId), TuplesKt.to(AnalyticsLogger.Keys.SOURCE_TYPE, AnalyticsLogger.Keys.CONDITION), TuplesKt.to(AnalyticsLogger.Keys.NEXTSTEP, nextStep));
        }
        return new LinkedHashMap();
    }

    public final Flow<NetworkUIState<TransactionStateResponse>> fetchTransactionState$hyperkyc_release(Map<String, ? extends Object> inputs, String workflowConfigHash) {
        String canonicalName;
        Object m1202constructorimpl;
        String className;
        String substringAfterLast$default;
        String className2;
        Intrinsics.checkNotNullParameter(inputs, "inputs");
        Intrinsics.checkNotNullParameter(workflowConfigHash, "workflowConfigHash");
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "fetchTransactionState() called with: inputs = [" + inputs + "], workflowConfigHash = [" + workflowConfigHash + ']';
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 != null) {
                            str = canonicalName2;
                        }
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "fetchTransactionState() called with: inputs = [" + inputs + "], workflowConfigHash = [" + workflowConfigHash + ']';
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        return FlowKt.flowOn(NetworkRepo.INSTANCE.fetchTransactionState$hyperkyc_release(new TransactionStateRequest(inputs, workflowConfigHash), MapsKt.plus(getDefaultHeaders(), getAuthHeaders())), Dispatchers.getIO());
    }

    /* JADX WARN: Code restructure failed: missing block: B:61:0x0124, code lost:
    
        if (r0 == null) goto L52;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void pushLogsToRemote$hyperkyc_release() {
        String canonicalName;
        Object m1202constructorimpl;
        String canonicalName2;
        String className;
        File currentLogZipFile;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        HSRemoteConfig hSRemoteConfig = null;
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        sb.append("pushLogsToRemote() called");
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                    }
                    str = canonicalName2;
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    Log.println(3, str, "pushLogsToRemote() called ");
                }
            }
        }
        if (this.hyperKycConfig == null || (currentLogZipFile = HyperLogger.INSTANCE.getInstance().getCurrentLogZipFile()) == null) {
            return;
        }
        HSRemoteConfig hSRemoteConfig2 = this.remoteConfig;
        if (hSRemoteConfig2 == null) {
            BuildersKt__Builders_commonKt.launch$default(CoroutineScopeKt.MainScope(), Dispatchers.getIO(), null, new MainVM$pushLogsToRemote$4(this, "https://armxjib6ub.execute-api.ap-southeast-1.amazonaws.com/prod", currentLogZipFile, null), 2, null);
            return;
        }
        if (hSRemoteConfig2 == null) {
            Intrinsics.throwUninitializedPropertyAccessException(HyperKycConfig.ARG_REMOTE_CONFIG);
        } else {
            hSRemoteConfig = hSRemoteConfig2;
        }
        pushLogsToRemote$uploadLogsIfNeeded(this, "https://armxjib6ub.execute-api.ap-southeast-1.amazonaws.com/prod", currentLogZipFile, hSRemoteConfig.getUploadLogs());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final String getLogUploadBaseUrl(String baseS3Url, File logFile) {
        String canonicalName;
        Object m1202constructorimpl;
        String className;
        String substringAfterLast$default;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "getLogUploadBaseUrl() called with: baseS3Url = " + baseS3Url + ", logFile = " + logFile;
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 != null) {
                            str = canonicalName2;
                        }
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "getLogUploadBaseUrl() called with: baseS3Url = " + baseS3Url + ", logFile = " + logFile;
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        return baseS3Url + "/androidLogs/" + FilesKt.getNameWithoutExtension(logFile) + '_' + System.currentTimeMillis() + FilenameUtils.EXTENSION_SEPARATOR + FilesKt.getExtension(logFile);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:125:0x01c0  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x01ca  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x01ed  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0320  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x010a  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x0113  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void makeAPICallToPushLogsToRemote(String baseS3Url, File file) {
        String canonicalName;
        String str;
        Object m1202constructorimpl;
        CharSequence charSequence;
        String str2;
        String canonicalName2;
        String className;
        String canonicalName3;
        Object m1202constructorimpl2;
        String str3;
        String str4;
        Matcher matcher;
        String className2;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str5 = "makeAPICallToPushLogsToRemote() called with: baseS3Url = " + baseS3Url + ", file = " + file;
        if (str5 == null) {
            str5 = "null ";
        }
        sb.append(str5);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (CoreExtsKt.isRelease()) {
            charSequence = "co.hyperverge";
            str = "N/A";
        } else {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                str = "N/A";
                try {
                    Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                } catch (Throwable th) {
                    th = th;
                    Result.Companion companion3 = Result.INSTANCE;
                    m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                    }
                    String packageName = (String) m1202constructorimpl;
                    if (!CoreExtsKt.isDebug()) {
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                str = "N/A";
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName2 = (String) m1202constructorimpl;
            if (!CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                charSequence = "co.hyperverge";
                str2 = "packageName";
                if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = str;
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str6 = "makeAPICallToPushLogsToRemote() called with: baseS3Url = " + baseS3Url + ", file = " + file;
                    if (str6 == null) {
                        str6 = "null ";
                    }
                    sb2.append(str6);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
                if (!file.exists()) {
                    BuildersKt__Builders_commonKt.launch$default(CoroutineScopeKt.MainScope(), Dispatchers.getIO(), null, new MainVM$makeAPICallToPushLogsToRemote$2(baseS3Url, this, file, null), 2, null);
                    return;
                }
                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb3 = new StringBuilder();
                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                    Class<?> cls3 = getClass();
                    canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                    if (canonicalName3 == null) {
                        canonicalName3 = str;
                    }
                }
                Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                if (matcher4.find()) {
                    canonicalName3 = matcher4.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                }
                if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    canonicalName3 = canonicalName3.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb3.append(canonicalName3);
                sb3.append(" - ");
                sb3.append("makeAPICallToPushLogsToRemote() log file doesn't exist");
                sb3.append(' ');
                sb3.append("");
                companion4.log(level2, sb3.toString());
                if (CoreExtsKt.isRelease()) {
                    return;
                }
                try {
                    Result.Companion companion5 = Result.INSTANCE;
                    Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                } catch (Throwable th3) {
                    Result.Companion companion6 = Result.INSTANCE;
                    m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                    m1202constructorimpl2 = "";
                }
                String str7 = (String) m1202constructorimpl2;
                if (CoreExtsKt.isDebug()) {
                    Intrinsics.checkNotNullExpressionValue(str7, str2);
                    if (StringsKt.contains$default((CharSequence) str7, charSequence, false, 2, (Object) null)) {
                        StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                        if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                            str3 = null;
                        } else {
                            str3 = null;
                            String substringAfterLast$default = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                            if (substringAfterLast$default != null) {
                                str4 = substringAfterLast$default;
                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                                if (matcher.find()) {
                                    str4 = matcher.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                                }
                                if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    str4 = str4.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                Log.println(3, str4, "makeAPICallToPushLogsToRemote() log file doesn't exist ");
                                return;
                            }
                        }
                        Class<?> cls4 = getClass();
                        String canonicalName4 = cls4 != null ? cls4.getCanonicalName() : str3;
                        str4 = canonicalName4 == null ? str : canonicalName4;
                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                        if (matcher.find()) {
                        }
                        if (str4.length() > 23) {
                            str4 = str4.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        Log.println(3, str4, "makeAPICallToPushLogsToRemote() log file doesn't exist ");
                        return;
                    }
                    return;
                }
                return;
            }
            charSequence = "co.hyperverge";
        }
        str2 = "packageName";
        if (!file.exists()) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:93:0x01a1, code lost:
    
        if (r0 != null) goto L66;
     */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0282  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x029e A[EDGE_INSN: B:42:0x029e->B:43:0x029e BREAK  A[LOOP:0: B:31:0x027b->B:40:0x027b], SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x02bf A[LOOP:1: B:44:0x02b9->B:46:0x02bf, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x02ea  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0331  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0340 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x02e4 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0333  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void updateModuleDataMap(String moduleId, String action, List<String> requestIds, List<HyperKycData.ApiFlags> flags, Map<String, ? extends Object> variables) {
        String canonicalName;
        Object m1202constructorimpl;
        Object m1202constructorimpl2;
        String str;
        String str2;
        Object m1202constructorimpl3;
        String str3;
        String className;
        Iterator<Map.Entry<String, ? extends Object>> it;
        Object m1202constructorimpl4;
        boolean z;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        StringBuilder sb2 = new StringBuilder();
        sb2.append("updateModuleDataMap() called for currentFlowId = [");
        try {
            Result.Companion companion2 = Result.INSTANCE;
            MainVM mainVM = this;
            String str4 = this.currentFlowId;
            if (str4 == null) {
                Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                str4 = null;
            }
            m1202constructorimpl = Result.m1202constructorimpl(str4);
        } catch (Throwable th) {
            Result.Companion companion3 = Result.INSTANCE;
            m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
        }
        if (Result.m1208isFailureimpl(m1202constructorimpl)) {
            m1202constructorimpl = null;
        }
        sb2.append((String) m1202constructorimpl);
        sb2.append("] with: \nmoduleId = [");
        sb2.append(moduleId);
        sb2.append("], \naction = [");
        sb2.append(action);
        sb2.append("], \nrequestIds = [");
        sb2.append(requestIds);
        sb2.append("], \nflags = [");
        sb2.append(flags);
        sb2.append("], \nvariables = [");
        sb2.append(variables);
        sb2.append(']');
        String sb3 = sb2.toString();
        if (sb3 == null) {
            sb3 = "null ";
        }
        sb.append(sb3);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion4 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th2) {
                Result.Companion companion5 = Result.INSTANCE;
                m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                m1202constructorimpl2 = "";
            }
            String packageName = (String) m1202constructorimpl2;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str = null;
                    } else {
                        str = null;
                        str2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str2 = cls2 != null ? cls2.getCanonicalName() : str;
                    if (str2 == null) {
                        str2 = "N/A";
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str2);
                    if (matcher2.find()) {
                        str2 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str2, "replaceAll(\"\")");
                    }
                    if (str2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str2 = str2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    String str5 = str2;
                    StringBuilder sb4 = new StringBuilder();
                    StringBuilder sb5 = new StringBuilder();
                    sb5.append("updateModuleDataMap() called for currentFlowId = [");
                    try {
                        Result.Companion companion6 = Result.INSTANCE;
                        MainVM mainVM2 = this;
                        String str6 = this.currentFlowId;
                        if (str6 == null) {
                            Intrinsics.throwUninitializedPropertyAccessException("currentFlowId");
                            str6 = str;
                        }
                        m1202constructorimpl3 = Result.m1202constructorimpl(str6);
                    } catch (Throwable th3) {
                        Result.Companion companion7 = Result.INSTANCE;
                        m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                        m1202constructorimpl3 = str;
                    }
                    sb5.append((String) m1202constructorimpl3);
                    sb5.append("] with: \nmoduleId = [");
                    str3 = moduleId;
                    sb5.append(str3);
                    sb5.append("], \naction = [");
                    sb5.append(action);
                    sb5.append("], \nrequestIds = [");
                    sb5.append(requestIds);
                    sb5.append("], \nflags = [");
                    sb5.append(flags);
                    sb5.append("], \nvariables = [");
                    sb5.append(variables);
                    sb5.append(']');
                    String sb6 = sb5.toString();
                    sb4.append(sb6 != null ? sb6 : "null ");
                    sb4.append(' ');
                    sb4.append("");
                    Log.println(3, str5, sb4.toString());
                    HashMap<String, TransactionState.ModuleData> hashMap = this.moduleDataMap;
                    long expiryAt = getExpiryAt(moduleId);
                    LinkedHashMap linkedHashMap = new LinkedHashMap();
                    it = variables.entrySet().iterator();
                    while (true) {
                        if (it.hasNext()) {
                            break;
                        }
                        Map.Entry<String, ? extends Object> next = it.next();
                        if (next.getValue() != null) {
                            linkedHashMap.put(next.getKey(), next.getValue());
                        }
                    }
                    LinkedHashMap linkedHashMap2 = linkedHashMap;
                    LinkedHashMap linkedHashMap3 = new LinkedHashMap(MapsKt.mapCapacity(linkedHashMap2.size()));
                    for (Map.Entry entry : linkedHashMap2.entrySet()) {
                        Object key = entry.getKey();
                        Object value = entry.getValue();
                        Intrinsics.checkNotNull(value);
                        linkedHashMap3.put(key, value);
                    }
                    LinkedHashMap linkedHashMap4 = new LinkedHashMap();
                    for (Map.Entry entry2 : linkedHashMap3.entrySet()) {
                        try {
                            Result.Companion companion8 = Result.INSTANCE;
                            MainVM mainVM3 = this;
                        } catch (Throwable th4) {
                            Result.Companion companion9 = Result.INSTANCE;
                            m1202constructorimpl4 = Result.m1202constructorimpl(ResultKt.createFailure(th4));
                        }
                        if (getHyperKycConfig$hyperkyc_release().isServerSideResumeEnabled$hyperkyc_release() && new File(entry2.getValue().toString()).isFile()) {
                            z = false;
                            m1202constructorimpl4 = Result.m1202constructorimpl(Boolean.valueOf(z));
                            if (Result.m1205exceptionOrNullimpl(m1202constructorimpl4) == null) {
                                m1202constructorimpl4 = false;
                            }
                            if (!((Boolean) m1202constructorimpl4).booleanValue()) {
                                linkedHashMap4.put(entry2.getKey(), entry2.getValue());
                            }
                        }
                        z = true;
                        m1202constructorimpl4 = Result.m1202constructorimpl(Boolean.valueOf(z));
                        if (Result.m1205exceptionOrNullimpl(m1202constructorimpl4) == null) {
                        }
                        if (!((Boolean) m1202constructorimpl4).booleanValue()) {
                        }
                    }
                    hashMap.put(str3, new TransactionState.ModuleData(expiryAt, action, requestIds, flags, linkedHashMap4, getLastParentModuleId()));
                }
            }
        }
        str3 = moduleId;
        HashMap<String, TransactionState.ModuleData> hashMap2 = this.moduleDataMap;
        long expiryAt2 = getExpiryAt(moduleId);
        LinkedHashMap linkedHashMap5 = new LinkedHashMap();
        it = variables.entrySet().iterator();
        while (true) {
            if (it.hasNext()) {
            }
        }
        LinkedHashMap linkedHashMap22 = linkedHashMap5;
        LinkedHashMap linkedHashMap32 = new LinkedHashMap(MapsKt.mapCapacity(linkedHashMap22.size()));
        while (r0.hasNext()) {
        }
        LinkedHashMap linkedHashMap42 = new LinkedHashMap();
        while (r3.hasNext()) {
        }
        hashMap2.put(str3, new TransactionState.ModuleData(expiryAt2, action, requestIds, flags, linkedHashMap42, getLastParentModuleId()));
    }

    /* JADX WARN: Code restructure failed: missing block: B:60:0x015f, code lost:
    
        if (r0 != 0) goto L55;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:23:0x01f3  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0225 A[ADDED_TO_REGION, ORIG_RETURN, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0186  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01da  */
    /* JADX WARN: Type inference failed for: r0v15 */
    /* JADX WARN: Type inference failed for: r0v23 */
    /* JADX WARN: Type inference failed for: r0v24 */
    /* JADX WARN: Type inference failed for: r0v27, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r0v47 */
    /* JADX WARN: Type inference failed for: r10v3 */
    /* JADX WARN: Type inference failed for: r10v4, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r10v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void enqueueStatePush$hyperkyc_release(String status) {
        String canonicalName;
        Object m1202constructorimpl;
        TransactionState.TransactionMetadata transactionMetadata;
        ?? r0;
        String str;
        Matcher matcher;
        String str2;
        String className;
        TransactionState.TransactionMetadata transactionMetadata2;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str3 = "enqueueStatePush() called for \nisPushingState:" + this.isPushingState + ",\nstatus:" + status + ",\nresumeFrom:" + this.resumeFrom + ",\nmoduleDataMap: " + this.moduleDataMap + ",\nmoduleExecutionOrder: " + this.moduleExecutionOrder;
        if (str3 == null) {
            str3 = "null ";
        }
        sb.append(str3);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        transactionMetadata = null;
                    } else {
                        transactionMetadata = null;
                        r0 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    r0 = cls2 != null ? cls2.getCanonicalName() : transactionMetadata;
                    if (r0 == 0) {
                        str = "N/A";
                        matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                        if (matcher.find()) {
                            str = matcher.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                        }
                        if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            str = str.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        StringBuilder sb2 = new StringBuilder();
                        str2 = "enqueueStatePush() called for \nisPushingState:" + this.isPushingState + ",\nstatus:" + status + ",\nresumeFrom:" + this.resumeFrom + ",\nmoduleDataMap: " + this.moduleDataMap + ",\nmoduleExecutionOrder: " + this.moduleExecutionOrder;
                        if (str2 == null) {
                            str2 = "null ";
                        }
                        sb2.append(str2);
                        sb2.append(' ');
                        sb2.append("");
                        Log.println(3, str, sb2.toString());
                        if (this.hyperKycConfig == null || !getHyperKycConfig$hyperkyc_release().isServerSideResumeEnabled$hyperkyc_release() || this.isPushingState) {
                            return;
                        }
                        this.isPushingState = true;
                        if (status != null) {
                            try {
                                transactionMetadata2 = new TransactionState.TransactionMetadata(status, CollectionsKt.contains(this.moduleExecutionOrder, this.resumeFrom) ? this.resumeFrom : transactionMetadata);
                            } catch (Throwable th2) {
                                throw th2;
                            }
                        } else {
                            transactionMetadata2 = transactionMetadata;
                        }
                        pushTransactionState(transactionMetadata2);
                        return;
                    }
                    str = r0;
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher.find()) {
                    }
                    if (str.length() > 23) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb22 = new StringBuilder();
                    str2 = "enqueueStatePush() called for \nisPushingState:" + this.isPushingState + ",\nstatus:" + status + ",\nresumeFrom:" + this.resumeFrom + ",\nmoduleDataMap: " + this.moduleDataMap + ",\nmoduleExecutionOrder: " + this.moduleExecutionOrder;
                    if (str2 == null) {
                    }
                    sb22.append(str2);
                    sb22.append(' ');
                    sb22.append("");
                    Log.println(3, str, sb22.toString());
                    if (this.hyperKycConfig == null) {
                        return;
                    } else {
                        return;
                    }
                }
            }
        }
        transactionMetadata = null;
        if (this.hyperKycConfig == null) {
        }
    }

    private final void pushTransactionState(TransactionState.TransactionMetadata transactionStateMetadata) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String canonicalName2;
        String className;
        String canonicalName3;
        Object m1202constructorimpl2;
        String str3;
        String className2;
        String substringAfterLast$default;
        String className3;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str4 = "pushTransactionState() called with: moduleExecutionOrder = [" + this.moduleExecutionOrder + "], moduleDataMap = [" + this.moduleDataMap + "], transactionStateMetadata = [" + transactionStateMetadata + ']';
        if (str4 == null) {
            str4 = "null ";
        }
        sb.append(str4);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "packageName";
                str2 = "N/A";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = str2;
                        }
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher2.find()) {
                        canonicalName2 = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str5 = "pushTransactionState() called with: moduleExecutionOrder = [" + this.moduleExecutionOrder + "], moduleDataMap = [" + this.moduleDataMap + "], transactionStateMetadata = [" + transactionStateMetadata + ']';
                    if (str5 == null) {
                        str5 = "null ";
                    }
                    sb2.append(str5);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, canonicalName2, sb2.toString());
                }
                if (this.moduleDataMap.isEmpty() || !this.moduleExecutionOrder.isEmpty()) {
                    Map mutableMap = MapsKt.toMutableMap(this.moduleDataMap);
                    BuildersKt__Builders_commonKt.launch$default(ViewModelKt.getViewModelScope(this), null, null, new MainVM$pushTransactionState$3(new TransactionState(null, transactionStateMetadata, this.moduleExecutionOrder, null, mutableMap, 8, null), MapsKt.plus(getDefaultHeaders(), getAuthHeaders()), this, mutableMap, null), 3, null);
                }
                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                HyperLogger companion4 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb3 = new StringBuilder();
                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                    Class<?> cls3 = getClass();
                    canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                    if (canonicalName3 == null) {
                        canonicalName3 = str2;
                    }
                }
                Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                if (matcher3.find()) {
                    canonicalName3 = matcher3.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                }
                if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    canonicalName3 = canonicalName3.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb3.append(canonicalName3);
                sb3.append(" - ");
                sb3.append("pushTransactionState: moduleDataMap is empty, moduleExecutionOrder is empty");
                sb3.append(' ');
                sb3.append("");
                companion4.log(level2, sb3.toString());
                if (!CoreExtsKt.isRelease()) {
                    try {
                        Result.Companion companion5 = Result.INSTANCE;
                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                    } catch (Throwable th2) {
                        Result.Companion companion6 = Result.INSTANCE;
                        m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                        m1202constructorimpl2 = "";
                    }
                    String str6 = (String) m1202constructorimpl2;
                    if (CoreExtsKt.isDebug()) {
                        Intrinsics.checkNotNullExpressionValue(str6, str);
                        if (StringsKt.contains$default((CharSequence) str6, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                            if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                Class<?> cls4 = getClass();
                                String canonicalName4 = cls4 != null ? cls4.getCanonicalName() : null;
                                str3 = canonicalName4 == null ? str2 : canonicalName4;
                            } else {
                                str3 = substringAfterLast$default;
                            }
                            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str3);
                            if (matcher4.find()) {
                                str3 = matcher4.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str3, "replaceAll(\"\")");
                            }
                            if (str3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str3 = str3.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            Log.println(3, str3, "pushTransactionState: moduleDataMap is empty, moduleExecutionOrder is empty ");
                        }
                    }
                }
                this.isPushingState = false;
                this.saveStateUIStateFlow.tryEmit(null);
                return;
            }
        }
        str = "packageName";
        str2 = "N/A";
        if (this.moduleDataMap.isEmpty()) {
        }
        Map mutableMap2 = MapsKt.toMutableMap(this.moduleDataMap);
        BuildersKt__Builders_commonKt.launch$default(ViewModelKt.getViewModelScope(this), null, null, new MainVM$pushTransactionState$3(new TransactionState(null, transactionStateMetadata, this.moduleExecutionOrder, null, mutableMap2, 8, null), MapsKt.plus(getDefaultHeaders(), getAuthHeaders()), this, mutableMap2, null), 3, null);
    }

    public final void saveStateLocally$hyperkyc_release(boolean shouldSave, TransactionState transactionState, boolean saveAsync) {
        String canonicalName;
        Object m1202constructorimpl;
        String className;
        String substringAfterLast$default;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        boolean z = false;
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str2 = "saveStateLocally() called with: shouldSave = [" + shouldSave + "], transactionState = [" + transactionState + ']';
        if (str2 == null) {
            str2 = "null ";
        }
        sb.append(str2);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 != null) {
                            str = canonicalName2;
                        }
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    StringBuilder sb2 = new StringBuilder();
                    String str3 = "saveStateLocally() called with: shouldSave = [" + shouldSave + "], transactionState = [" + transactionState + ']';
                    if (str3 == null) {
                        str3 = "null ";
                    }
                    sb2.append(str3);
                    sb2.append(' ');
                    sb2.append("");
                    Log.println(3, str, sb2.toString());
                }
            }
        }
        if (shouldSave || (isLocalWorkflowResumeEnabled() && HyperKycDataKt.isNotEmpty(this.hyperKycData) && this.currentFlowId != null)) {
            z = true;
        }
        if (!z || this.hyperKycConfig == null) {
            return;
        }
        TransactionState transactionState2 = transactionState == null ? new TransactionState(getStateMetadata(), null, this.moduleExecutionOrder, this.workflowExecutionOrder, this.moduleDataMap, 2, null) : transactionState;
        if (saveAsync) {
            BuildersKt__Builders_commonKt.launch$default(ViewModelKt.getViewModelScope(this), Dispatchers.getIO(), null, new MainVM$saveStateLocally$3(transactionState2, this, null), 2, null);
        } else {
            saveStateLocally$saveToFile(transactionState2, this);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(20:1|(3:142|(1:144)(1:147)|(1:146))|7|(1:9)|10|(1:14)|15|(6:109|110|111|(1:113)|114|(13:116|(7:118|(3:133|(1:135)(1:138)|(1:137))|124|(1:126)|127|(1:131)|132)|18|19|(1:24)|30|31|(18:33|(1:104)(1:37)|39|(1:41)(1:45)|(1:43)(1:44)|46|(1:48)|49|(1:53)|54|(1:56)|57|58|59|60|(1:62)|63|(2:65|(17:67|(1:99)(1:71)|73|(1:75)(1:97)|(12:77|78|(1:80)|81|(1:85)|86|(1:88)|89|90|(1:92)(1:96)|93|94)|98|78|(0)|81|(2:83|85)|86|(0)|89|90|(0)(0)|93|94)))(1:105)|100|90|(0)(0)|93|94))|17|18|19|(2:21|24)|30|31|(0)(0)|100|90|(0)(0)|93|94) */
    /* JADX WARN: Code restructure failed: missing block: B:107:0x01b2, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:108:0x01b3, code lost:
    
        r6 = kotlin.Result.INSTANCE;
        r0 = kotlin.Result.m1202constructorimpl(kotlin.ResultKt.createFailure(r0));
     */
    /* JADX WARN: Code restructure failed: missing block: B:27:0x01a9, code lost:
    
        if (r20.hsStateHandler.getIsActivityRecreated() == false) goto L72;
     */
    /* JADX WARN: Code restructure failed: missing block: B:29:0x01ac, code lost:
    
        r0 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:38:0x01f9, code lost:
    
        if (r7 != null) goto L94;
     */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x02e8, code lost:
    
        if (r0 != null) goto L132;
     */
    /* JADX WARN: Removed duplicated region for block: B:105:0x035d  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x01c4  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x030f  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0348  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x0366  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0368  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final TransactionState retrieveStateFromLocal() {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String canonicalName2;
        String className;
        Throwable m1205exceptionOrNullimpl;
        Object obj;
        String str2;
        String str3;
        String str4;
        Object m1202constructorimpl2;
        String str5;
        String str6;
        Matcher matcher;
        String className2;
        String className3;
        boolean z;
        List<String> moduleExecutionOrder;
        String className4;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher2.find()) {
            canonicalName = matcher2.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        sb.append("retrieveStateFromLocal() called");
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                str = "N/A";
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 == null) {
                            canonicalName2 = str;
                        }
                    }
                    Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                    if (matcher3.find()) {
                        canonicalName2 = matcher3.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                    }
                    if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        canonicalName2 = canonicalName2.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    Log.println(3, canonicalName2, "retrieveStateFromLocal() called ");
                }
                Result.Companion companion4 = Result.INSTANCE;
                MainVM mainVM = this;
                z = true;
                TransactionState transactionState = (TransactionState) getGson().fromJson(FilesKt.readText$default(getTransactionStateFile(), null, 1, null), TransactionState.class);
                moduleExecutionOrder = transactionState.getModuleExecutionOrder();
                if (moduleExecutionOrder != null && !moduleExecutionOrder.isEmpty()) {
                    z = false;
                }
                Object m1202constructorimpl3 = Result.m1202constructorimpl(transactionState);
                Object obj2 = m1202constructorimpl3;
                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj2);
                if (m1205exceptionOrNullimpl == null) {
                    HyperLogger.Level level2 = HyperLogger.Level.ERROR;
                    HyperLogger companion5 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb2 = new StringBuilder();
                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                    if (stackTraceElement3 == null || (className3 = stackTraceElement3.getClassName()) == null) {
                        str3 = "Throwable().stackTrace";
                        obj = obj2;
                    } else {
                        str3 = "Throwable().stackTrace";
                        obj = obj2;
                        str4 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls3 = getClass();
                    String canonicalName3 = cls3 != null ? cls3.getCanonicalName() : null;
                    str4 = canonicalName3 == null ? str : canonicalName3;
                    Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str4);
                    if (matcher4.find()) {
                        str4 = matcher4.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str4, "replaceAll(\"\")");
                    }
                    if (str4.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str4 = str4.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str4, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    sb2.append(str4);
                    sb2.append(" - ");
                    String str7 = "retrieveStateFromLocal(): failed reading saved transaction state json from file: " + m1205exceptionOrNullimpl.getMessage();
                    if (str7 == null) {
                        str7 = "null ";
                    }
                    sb2.append(str7);
                    sb2.append(' ');
                    sb2.append("");
                    companion5.log(level2, sb2.toString());
                    CoreExtsKt.isRelease();
                    try {
                        Result.Companion companion6 = Result.INSTANCE;
                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                    } catch (Throwable th2) {
                        Result.Companion companion7 = Result.INSTANCE;
                        m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                        m1202constructorimpl2 = "";
                    }
                    String packageName2 = (String) m1202constructorimpl2;
                    if (CoreExtsKt.isDebug()) {
                        Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                        if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace4, str3);
                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                            if (stackTraceElement4 == null || (className2 = stackTraceElement4.getClassName()) == null) {
                                str2 = null;
                            } else {
                                str2 = null;
                                str5 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                            }
                            Class<?> cls4 = getClass();
                            str5 = cls4 != null ? cls4.getCanonicalName() : str2;
                            if (str5 == null) {
                                str6 = str;
                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str6);
                                if (matcher.find()) {
                                    str6 = matcher.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(str6, "replaceAll(\"\")");
                                }
                                if (str6.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                    str6 = str6.substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str6, "this as java.lang.String…ing(startIndex, endIndex)");
                                }
                                StringBuilder sb3 = new StringBuilder();
                                String str8 = "retrieveStateFromLocal(): failed reading saved transaction state json from file: " + m1205exceptionOrNullimpl.getMessage();
                                sb3.append(str8 != null ? str8 : "null ");
                                sb3.append(' ');
                                sb3.append("");
                                Log.println(6, str6, sb3.toString());
                                return (TransactionState) (!Result.m1208isFailureimpl(obj) ? str2 : obj);
                            }
                            str6 = str5;
                            matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(str6);
                            if (matcher.find()) {
                            }
                            if (str6.length() > 23) {
                                str6 = str6.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str6, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            StringBuilder sb32 = new StringBuilder();
                            String str82 = "retrieveStateFromLocal(): failed reading saved transaction state json from file: " + m1205exceptionOrNullimpl.getMessage();
                            sb32.append(str82 != null ? str82 : "null ");
                            sb32.append(' ');
                            sb32.append("");
                            Log.println(6, str6, sb32.toString());
                            return (TransactionState) (!Result.m1208isFailureimpl(obj) ? str2 : obj);
                        }
                    }
                } else {
                    obj = obj2;
                }
                str2 = null;
                return (TransactionState) (!Result.m1208isFailureimpl(obj) ? str2 : obj);
            }
        }
        str = "N/A";
        Result.Companion companion42 = Result.INSTANCE;
        MainVM mainVM2 = this;
        z = true;
        TransactionState transactionState2 = (TransactionState) getGson().fromJson(FilesKt.readText$default(getTransactionStateFile(), null, 1, null), TransactionState.class);
        moduleExecutionOrder = transactionState2.getModuleExecutionOrder();
        if (moduleExecutionOrder != null) {
            z = false;
        }
        Object m1202constructorimpl32 = Result.m1202constructorimpl(transactionState2);
        Object obj22 = m1202constructorimpl32;
        m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj22);
        if (m1205exceptionOrNullimpl == null) {
        }
        str2 = null;
        return (TransactionState) (!Result.m1208isFailureimpl(obj) ? str2 : obj);
    }

    public final void deleteSavedTransactionStates$hyperkyc_release() {
        String canonicalName;
        Object m1202constructorimpl;
        String className;
        String substringAfterLast$default;
        String className2;
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        sb.append("deleteSavedTransactionStates() called");
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null || (substringAfterLast$default = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                        Class<?> cls2 = getClass();
                        String canonicalName2 = cls2 != null ? cls2.getCanonicalName() : null;
                        if (canonicalName2 != null) {
                            str = canonicalName2;
                        }
                    } else {
                        str = substringAfterLast$default;
                    }
                    Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                    if (matcher2.find()) {
                        str = matcher2.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                    }
                    if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                        str = str.substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                    }
                    Log.println(3, str, "deleteSavedTransactionStates() called ");
                }
            }
        }
        File[] listFiles = getTransactionStateDir().listFiles();
        if (listFiles != null) {
            for (File file : listFiles) {
                file.delete();
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:40:0x0145, code lost:
    
        if (r0 != null) goto L55;
     */
    /* JADX WARN: Code restructure failed: missing block: B:44:0x0155, code lost:
    
        if (r0 == null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:45:0x0159, code lost:
    
        r0 = co.hyperverge.hyperkyc.utils.extensions.LogExtsKt.ANON_CLASS_PATTERN.matcher(r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x0168, code lost:
    
        if (r0.find() == false) goto L59;
     */
    /* JADX WARN: Code restructure failed: missing block: B:47:0x016a, code lost:
    
        r8 = r0.replaceAll("");
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r8, "replaceAll(\"\")");
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x0175, code lost:
    
        if (r8.length() <= 23) goto L65;
     */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x017b, code lost:
    
        if (android.os.Build.VERSION.SDK_INT < 26) goto L64;
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x017e, code lost:
    
        r8 = r8.substring(0, 23);
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r8, "this as java.lang.String…ing(startIndex, endIndex)");
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x0185, code lost:
    
        r0 = new java.lang.StringBuilder();
        r4 = "getModuleTextConfig() called with: moduleId = " + r18 + ", subType = " + r19;
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x019f, code lost:
    
        if (r4 != null) goto L68;
     */
    /* JADX WARN: Code restructure failed: missing block: B:55:0x01a1, code lost:
    
        r4 = "null ";
     */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x01a3, code lost:
    
        r0.append(r4);
        r0.append(' ');
        r0.append("");
        android.util.Log.println(3, r8, r0.toString());
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x0158, code lost:
    
        r8 = r0;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final /* synthetic */ Map getModuleTextConfig$hyperkyc_release(String moduleId, String subType) {
        String canonicalName;
        Object m1202constructorimpl;
        String str;
        String str2;
        String className;
        String className2;
        Intrinsics.checkNotNullParameter(moduleId, "moduleId");
        Intrinsics.checkNotNullParameter(subType, "subType");
        HyperLogger.Level level = HyperLogger.Level.DEBUG;
        HyperLogger companion = HyperLogger.INSTANCE.getInstance();
        StringBuilder sb = new StringBuilder();
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
        StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
        String str3 = "N/A";
        if (stackTraceElement == null || (className2 = stackTraceElement.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
            Class<?> cls = getClass();
            canonicalName = cls != null ? cls.getCanonicalName() : null;
            if (canonicalName == null) {
                canonicalName = "N/A";
            }
        }
        Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
        if (matcher.find()) {
            canonicalName = matcher.replaceAll("");
            Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
        }
        if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
            canonicalName = canonicalName.substring(0, 23);
            Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
        }
        sb.append(canonicalName);
        sb.append(" - ");
        String str4 = "getModuleTextConfig() called with: moduleId = " + moduleId + ", subType = " + subType;
        if (str4 == null) {
            str4 = "null ";
        }
        sb.append(str4);
        sb.append(' ');
        sb.append("");
        companion.log(level, sb.toString());
        if (!CoreExtsKt.isRelease()) {
            try {
                Result.Companion companion2 = Result.INSTANCE;
                Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
            } catch (Throwable th) {
                Result.Companion companion3 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                m1202constructorimpl = "";
            }
            String packageName = (String) m1202constructorimpl;
            if (CoreExtsKt.isDebug()) {
                Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                    StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                    if (stackTraceElement2 == null || (className = stackTraceElement2.getClassName()) == null) {
                        str = null;
                    } else {
                        str = null;
                        str2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                    }
                    Class<?> cls2 = getClass();
                    str2 = cls2 != null ? cls2.getCanonicalName() : str;
                }
            }
        }
        Map<String, ? extends Object> map = this.textConfigData.get(moduleId + '_' + subType);
        return map == null ? this.textConfigData.get(subType) : map;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static final void saveStateLocally$saveToFile(TransactionState transactionState, MainVM mainVM) {
        Object m1202constructorimpl;
        String canonicalName;
        Class<?> cls;
        Object m1202constructorimpl2;
        String str;
        Class<?> cls2;
        String className;
        String className2;
        String canonicalName2;
        Class<?> cls3;
        String str2;
        Object m1202constructorimpl3;
        String canonicalName3;
        Class<?> cls4;
        String str3;
        String className3;
        String className4;
        synchronized (transactionState) {
            try {
                Result.Companion companion = Result.INSTANCE;
                String tStateJson = mainVM.getGson().toJson(transactionState, TransactionState.class);
                File transactionStateFile = mainVM.getTransactionStateFile();
                Intrinsics.checkNotNullExpressionValue(tStateJson, "tStateJson");
                byte[] bytes = tStateJson.getBytes(Charsets.UTF_8);
                Intrinsics.checkNotNullExpressionValue(bytes, "this as java.lang.String).getBytes(charset)");
                FilesKt.writeBytes(transactionStateFile, bytes);
                m1202constructorimpl = Result.m1202constructorimpl(Unit.INSTANCE);
            } catch (Throwable th) {
                Result.Companion companion2 = Result.INSTANCE;
                m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
            }
            Object obj = m1202constructorimpl;
            Throwable m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(obj);
            String str4 = null;
            if (m1205exceptionOrNullimpl != null) {
                HyperLogger.Level level = HyperLogger.Level.ERROR;
                HyperLogger companion3 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb = new StringBuilder();
                StackTraceElement[] stackTrace = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
                StackTraceElement stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
                if (stackTraceElement == null || (className4 = stackTraceElement.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                    canonicalName2 = (mainVM == null || (cls3 = mainVM.getClass()) == null) ? null : cls3.getCanonicalName();
                    if (canonicalName2 == null) {
                        canonicalName2 = "N/A";
                    }
                }
                Matcher matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName2);
                if (matcher.find()) {
                    canonicalName2 = matcher.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(canonicalName2, "replaceAll(\"\")");
                }
                if (canonicalName2.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    canonicalName2 = canonicalName2.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(canonicalName2, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb.append(canonicalName2);
                sb.append(" - ");
                sb.append("saveStateLocally() : failed saving transaction state json to file");
                sb.append(' ');
                String localizedMessage = m1205exceptionOrNullimpl != null ? m1205exceptionOrNullimpl.getLocalizedMessage() : null;
                if (localizedMessage != null) {
                    str2 = '\n' + localizedMessage;
                } else {
                    str2 = "";
                }
                sb.append(str2);
                companion3.log(level, sb.toString());
                CoreExtsKt.isRelease();
                try {
                    Result.Companion companion4 = Result.INSTANCE;
                    Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                    Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                    m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                } catch (Throwable th2) {
                    Result.Companion companion5 = Result.INSTANCE;
                    m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                    m1202constructorimpl3 = "";
                }
                String packageName = (String) m1202constructorimpl3;
                if (CoreExtsKt.isDebug()) {
                    Intrinsics.checkNotNullExpressionValue(packageName, "packageName");
                    if (StringsKt.contains$default((CharSequence) packageName, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                        StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                        if (stackTraceElement2 == null || (className3 = stackTraceElement2.getClassName()) == null || (canonicalName3 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                            canonicalName3 = (mainVM == null || (cls4 = mainVM.getClass()) == null) ? null : cls4.getCanonicalName();
                            if (canonicalName3 == null) {
                                canonicalName3 = "N/A";
                            }
                        }
                        Matcher matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName3);
                        if (matcher2.find()) {
                            canonicalName3 = matcher2.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "replaceAll(\"\")");
                        }
                        if (canonicalName3.length() > 23 && Build.VERSION.SDK_INT < 26) {
                            canonicalName3 = canonicalName3.substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(canonicalName3, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append("saveStateLocally() : failed saving transaction state json to file");
                        sb2.append(' ');
                        String localizedMessage2 = m1205exceptionOrNullimpl != null ? m1205exceptionOrNullimpl.getLocalizedMessage() : null;
                        if (localizedMessage2 != null) {
                            str3 = '\n' + localizedMessage2;
                        } else {
                            str3 = "";
                        }
                        sb2.append(str3);
                        Log.println(6, canonicalName3, sb2.toString());
                    }
                }
            }
            if (Result.m1209isSuccessimpl(obj)) {
                HyperLogger.Level level2 = HyperLogger.Level.DEBUG;
                HyperLogger companion6 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb3 = new StringBuilder();
                StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                StackTraceElement stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                if (stackTraceElement3 == null || (className2 = stackTraceElement3.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                    canonicalName = (mainVM == null || (cls = mainVM.getClass()) == null) ? null : cls.getCanonicalName();
                    if (canonicalName == null) {
                        canonicalName = "N/A";
                    }
                }
                Matcher matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher(canonicalName);
                if (matcher3.find()) {
                    canonicalName = matcher3.replaceAll("");
                    Intrinsics.checkNotNullExpressionValue(canonicalName, "replaceAll(\"\")");
                }
                if (canonicalName.length() > 23 && Build.VERSION.SDK_INT < 26) {
                    canonicalName = canonicalName.substring(0, 23);
                    Intrinsics.checkNotNullExpressionValue(canonicalName, "this as java.lang.String…ing(startIndex, endIndex)");
                }
                sb3.append(canonicalName);
                sb3.append(" - ");
                sb3.append("saveStateLocally: success");
                sb3.append(' ');
                sb3.append("");
                companion6.log(level2, sb3.toString());
                if (!CoreExtsKt.isRelease()) {
                    try {
                        Result.Companion companion7 = Result.INSTANCE;
                        Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                    } catch (Throwable th3) {
                        Result.Companion companion8 = Result.INSTANCE;
                        m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th3));
                    }
                    if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                        m1202constructorimpl2 = "";
                    }
                    String packageName2 = (String) m1202constructorimpl2;
                    if (CoreExtsKt.isDebug()) {
                        Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                        if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                            StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace4, "Throwable().stackTrace");
                            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                            if (stackTraceElement4 == null || (className = stackTraceElement4.getClassName()) == null || (str = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                if (mainVM != null && (cls2 = mainVM.getClass()) != null) {
                                    str4 = cls2.getCanonicalName();
                                }
                                str = str4 == null ? "N/A" : str4;
                            }
                            Matcher matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher(str);
                            if (matcher4.find()) {
                                str = matcher4.replaceAll("");
                                Intrinsics.checkNotNullExpressionValue(str, "replaceAll(\"\")");
                            }
                            if (str.length() > 23 && Build.VERSION.SDK_INT < 26) {
                                str = str.substring(0, 23);
                                Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
                            }
                            Log.println(3, str, "saveStateLocally: success ");
                        }
                    }
                }
            }
        }
    }
}

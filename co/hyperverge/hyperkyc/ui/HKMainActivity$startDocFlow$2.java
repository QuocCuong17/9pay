package co.hyperverge.hyperkyc.ui;

import android.app.Application;
import android.os.Build;
import android.util.Log;
import androidx.core.os.BundleKt;
import co.hyperverge.hyperkyc.core.hv.HSBridgeException;
import co.hyperverge.hyperkyc.core.hv.HyperSnapBridgeKt;
import co.hyperverge.hyperkyc.data.models.result.HyperKycData;
import co.hyperverge.hyperkyc.data.network.BaseResponse;
import co.hyperverge.hyperkyc.ui.models.WorkflowUIState;
import co.hyperverge.hyperkyc.ui.viewmodels.MainVM;
import co.hyperverge.hyperkyc.utils.HSStateHandler;
import co.hyperverge.hyperkyc.utils.HSStateHandler$retrieveState$3$type$1;
import co.hyperverge.hyperkyc.utils.extensions.ActivityExtsKt;
import co.hyperverge.hyperkyc.utils.extensions.CoreExtsKt;
import co.hyperverge.hyperkyc.utils.extensions.LogExtsKt;
import co.hyperverge.hyperlogger.HyperLogger;
import co.hyperverge.hypersnapsdk.objects.HVError;
import co.hyperverge.hypersnapsdk.objects.HVResponse;
import com.google.gson.Gson;
import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import kotlin.Metadata;
import kotlin.NotImplementedError;
import kotlin.Pair;
import kotlin.Result;
import kotlin.ResultKt;
import kotlin.Triple;
import kotlin.TuplesKt;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.intrinsics.IntrinsicsKt;
import kotlin.coroutines.jvm.internal.Boxing;
import kotlin.coroutines.jvm.internal.DebugMetadata;
import kotlin.coroutines.jvm.internal.SuspendLambda;
import kotlin.io.FilesKt;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlin.jvm.internal.Reflection;
import kotlin.reflect.KClass;
import kotlin.text.StringsKt;
import kotlinx.coroutines.CoroutineScope;
import org.apache.commons.io.FilenameUtils;
import org.json.JSONObject;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: HKMainActivity.kt */
@Metadata(d1 = {"\u0000\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u0002\n\u0002\u0018\u0002\u0010\u0000\u001a\b\u0012\u0004\u0012\u00020\u00020\u0001*\u00020\u0003H\u008a@"}, d2 = {"<anonymous>", "Lkotlin/Result;", "", "Lkotlinx/coroutines/CoroutineScope;"}, k = 3, mv = {1, 8, 0}, xi = 48)
@DebugMetadata(c = "co.hyperverge.hyperkyc.ui.HKMainActivity$startDocFlow$2", f = "HKMainActivity.kt", i = {}, l = {1462}, m = "invokeSuspend", n = {}, s = {})
/* loaded from: classes2.dex */
public final class HKMainActivity$startDocFlow$2 extends SuspendLambda implements Function2<CoroutineScope, Continuation<? super Result<? extends Unit>>, Object> {
    final /* synthetic */ WorkflowUIState.DocCapture $docFlowUIState;
    private /* synthetic */ Object L$0;
    Object L$1;
    int label;
    final /* synthetic */ HKMainActivity this$0;

    /* JADX INFO: Access modifiers changed from: package-private */
    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
    public HKMainActivity$startDocFlow$2(HKMainActivity hKMainActivity, WorkflowUIState.DocCapture docCapture, Continuation<? super HKMainActivity$startDocFlow$2> continuation) {
        super(2, continuation);
        this.this$0 = hKMainActivity;
        this.$docFlowUIState = docCapture;
    }

    @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
    public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
        HKMainActivity$startDocFlow$2 hKMainActivity$startDocFlow$2 = new HKMainActivity$startDocFlow$2(this.this$0, this.$docFlowUIState, continuation);
        hKMainActivity$startDocFlow$2.L$0 = obj;
        return hKMainActivity$startDocFlow$2;
    }

    @Override // kotlin.jvm.functions.Function2
    public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, Continuation<? super Result<? extends Unit>> continuation) {
        return invoke2(coroutineScope, (Continuation<? super Result<Unit>>) continuation);
    }

    /* renamed from: invoke, reason: avoid collision after fix types in other method */
    public final Object invoke2(CoroutineScope coroutineScope, Continuation<? super Result<Unit>> continuation) {
        return ((HKMainActivity$startDocFlow$2) create(coroutineScope, continuation)).invokeSuspend(Unit.INSTANCE);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(22:416|(1:636)(3:420|421|422)|(1:430)(1:427)|(1:429)|431|(1:433)|434|(18:439|440|441|442|443|444|(1:446)(1:629)|(1:448)(1:628)|449|450|451|452|453|454|455|(1:457)|458|(5:460|461|462|463|(13:465|(3:469|470|471)|(1:615)(1:612)|(1:614)|473|(1:475)|476|(8:481|482|483|484|485|(1:487)(1:602)|(1:489)(1:601)|490)|604|485|(0)(0)|(0)(0)|490)(1:616))(1:620))|632|444|(0)(0)|(0)(0)|449|450|451|452|453|454|455|(0)|458|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(24:383|384|(2:386|387)|(3:713|714|(22:716|717|718|(17:720|396|397|(1:399)|400|401|(10:406|407|(1:409)|410|(1:412)(9:642|643|644|645|646|647|(1:649)|650|(4:652|653|654|(13:656|657|658|659|(2:(1:686)(1:683)|(1:685))(1:665)|666|(1:668)|669|(4:674|675|(1:677)|678)|679|675|(0)|678)(1:688))(1:691))|413|414|(22:416|(1:636)(3:420|421|422)|(1:430)(1:427)|(1:429)|431|(1:433)|434|(18:439|440|441|442|443|444|(1:446)(1:629)|(1:448)(1:628)|449|450|451|452|453|454|455|(1:457)|458|(5:460|461|462|463|(13:465|(3:469|470|471)|(1:615)(1:612)|(1:614)|473|(1:475)|476|(8:481|482|483|484|485|(1:487)(1:602)|(1:489)(1:601)|490)|604|485|(0)(0)|(0)(0)|490)(1:616))(1:620))|632|444|(0)(0)|(0)(0)|449|450|451|452|453|454|455|(0)|458|(0)(0))(1:637)|491|(3:(3:495|(1:497)(2:592|(1:594)(2:595|(2:597|598)))|(48:499|(1:589)(2:503|504)|(1:513)(1:509)|(1:511)(1:512)|514|(1:516)|517|(44:522|523|524|525|526|527|(1:529)|530|(6:533|534|535|(1:537)|538|(5:540|541|542|543|(11:545|(2:(1:577)(1:574)|(9:576|553|(1:555)|556|(7:561|562|563|564|565|(1:567)(1:569)|568)|570|565|(0)(0)|568))|552|553|(0)|556|(8:558|561|562|563|564|565|(0)(0)|568)|570|565|(0)(0)|568)))|532|9|10|11|12|13|(1:15)(1:135)|16|17|18|19|20|(3:123|124|(21:128|23|(1:25)(1:122)|26|27|28|29|30|31|32|33|34|(1:111)(1:37)|38|39|(3:100|101|102)(1:(6:(1:43)(1:92)|44|(1:46)(1:91)|47|48|49)(2:93|(1:95)(2:(1:97)(1:99)|98)))|50|51|(4:53|(4:55|(10:57|(1:78)|(1:62)|63|(1:65)|68|(1:70)(1:77)|71|(3:73|(1:75)|76)|67)|79|(1:81))|82|(1:84)(1:85))|86|87))|22|23|(0)(0)|26|27|28|29|30|31|32|33|34|(0)|111|38|39|(0)(0)|50|51|(0)|86|87)|588|527|(0)|530|(0)|532|9|10|11|12|13|(0)(0)|16|17|18|19|20|(0)|22|23|(0)(0)|26|27|28|29|30|31|32|33|34|(0)|111|38|39|(0)(0)|50|51|(0)|86|87)(2:590|591))|322|323)(2:599|600))|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))|(1:712)(1:393)|(1:395)(1:711)|396|397|(0)|400|401|(11:403|406|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0)))|389|(1:391)|712|(0)(0)|396|397|(0)|400|401|(0)|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(38:1|(1:(4:4|5|6|7)(2:142|143))(12:144|(2:(1:972)(1:969)|(1:971))|150|(1:152)|153|(1:965)(1:157)|158|(1:160)(9:923|924|925|926|927|928|(1:930)|931|(2:933|(7:935|(2:(1:957)(1:954)|(1:956))|941|(1:943)|944|(1:950)(1:948)|949))(1:958))|161|162|163|(51:181|182|(1:917)(3:186|187|188)|(1:196)(1:193)|(1:195)|197|(1:199)|200|(46:205|206|207|208|209|210|(6:861|862|863|(1:865)|866|(41:868|869|870|871|(10:873|(3:877|878|879)|(1:904)(1:901)|(1:903)|881|(1:883)|884|(6:889|890|891|892|893|894)|897|894)(1:905)|213|214|215|216|(1:860)(3:220|221|222)|(1:231)(1:227)|(1:229)(1:230)|232|(1:234)|235|(29:240|241|242|243|244|245|(6:802|803|804|(1:806)|807|(23:809|810|811|(10:813|(2:817|818)|(1:844)(1:841)|(1:843)|820|(1:822)|823|(5:828|829|830|831|832)|834|832)(1:845)|248|(1:250)(1:801)|251|(1:800)(3:255|256|257)|(1:266)(1:262)|(1:264)(1:265)|267|(1:269)|270|(13:275|276|277|278|279|280|281|(1:283)|284|(1:286)(9:731|732|733|734|735|736|(1:738)|739|(5:741|742|743|744|(12:746|(1:782)(3:750|751|752)|(1:760)(1:757)|(1:759)|761|(1:763)|764|(7:769|770|771|772|773|(1:775)|776)|778|773|(0)|776)(1:783))(1:787))|287|288|(25:383|384|386|387|(3:713|714|(22:716|717|718|(17:720|396|397|(1:399)|400|401|(10:406|407|(1:409)|410|(1:412)(9:642|643|644|645|646|647|(1:649)|650|(4:652|653|654|(13:656|657|658|659|(2:(1:686)(1:683)|(1:685))(1:665)|666|(1:668)|669|(4:674|675|(1:677)|678)|679|675|(0)|678)(1:688))(1:691))|413|414|(22:416|(1:636)(3:420|421|422)|(1:430)(1:427)|(1:429)|431|(1:433)|434|(18:439|440|441|442|443|444|(1:446)(1:629)|(1:448)(1:628)|449|450|451|452|453|454|455|(1:457)|458|(5:460|461|462|463|(13:465|(3:469|470|471)|(1:615)(1:612)|(1:614)|473|(1:475)|476|(8:481|482|483|484|485|(1:487)(1:602)|(1:489)(1:601)|490)|604|485|(0)(0)|(0)(0)|490)(1:616))(1:620))|632|444|(0)(0)|(0)(0)|449|450|451|452|453|454|455|(0)|458|(0)(0))(1:637)|491|(3:(3:495|(1:497)(2:592|(1:594)(2:595|(2:597|598)))|(48:499|(1:589)(2:503|504)|(1:513)(1:509)|(1:511)(1:512)|514|(1:516)|517|(44:522|523|524|525|526|527|(1:529)|530|(6:533|534|535|(1:537)|538|(5:540|541|542|543|(11:545|(2:(1:577)(1:574)|(9:576|553|(1:555)|556|(7:561|562|563|564|565|(1:567)(1:569)|568)|570|565|(0)(0)|568))|552|553|(0)|556|(8:558|561|562|563|564|565|(0)(0)|568)|570|565|(0)(0)|568)))|532|9|10|11|12|13|(1:15)(1:135)|16|17|18|19|20|(3:123|124|(21:128|23|(1:25)(1:122)|26|27|28|29|30|31|32|33|34|(1:111)(1:37)|38|39|(3:100|101|102)(1:(6:(1:43)(1:92)|44|(1:46)(1:91)|47|48|49)(2:93|(1:95)(2:(1:97)(1:99)|98)))|50|51|(4:53|(4:55|(10:57|(1:78)|(1:62)|63|(1:65)|68|(1:70)(1:77)|71|(3:73|(1:75)|76)|67)|79|(1:81))|82|(1:84)(1:85))|86|87))|22|23|(0)(0)|26|27|28|29|30|31|32|33|34|(0)|111|38|39|(0)(0)|50|51|(0)|86|87)|588|527|(0)|530|(0)|532|9|10|11|12|13|(0)(0)|16|17|18|19|20|(0)|22|23|(0)(0)|26|27|28|29|30|31|32|33|34|(0)|111|38|39|(0)(0)|50|51|(0)|86|87)(2:590|591))|322|323)(2:599|600))|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))|(1:712)(1:393)|(1:395)(1:711)|396|397|(0)|400|401|(11:403|406|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0)))|389|(1:391)|712|(0)(0)|396|397|(0)|400|401|(0)|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))(15:290|(1:382)(2:294|295)|(1:303)(1:300)|(1:302)|304|(1:306)|307|(11:312|313|314|315|316|317|(1:319)|320|(6:324|325|326|(1:328)|329|(5:331|332|333|334|(10:336|(2:(1:368)(1:365)|(1:367))(1:343)|344|(1:346)|347|(7:352|353|354|355|356|(1:358)(1:360)|359)|361|356|(0)(0)|359)))|322|323)|381|317|(0)|320|(0)|322|323))|797|280|281|(0)|284|(0)(0)|287|288|(0)(0)))|247|248|(0)(0)|251|(1:253)|800|(1:260)|266|(0)(0)|267|(0)|270|(14:272|275|276|277|278|279|280|281|(0)|284|(0)(0)|287|288|(0)(0))|797|280|281|(0)|284|(0)(0)|287|288|(0)(0))|855|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0)))|212|213|214|215|216|(1:218)|860|(1:225)|231|(0)(0)|232|(0)|235|(30:237|240|241|242|243|244|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0))|855|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0))|913|210|(0)|212|213|214|215|216|(0)|860|(0)|231|(0)(0)|232|(0)|235|(0)|855|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0))(11:165|166|167|168|169|170|171|172|173|174|(1:176)(1:177)))|8|9|10|11|12|13|(0)(0)|16|17|18|19|20|(0)|22|23|(0)(0)|26|27|28|29|30|31|32|33|34|(0)|111|38|39|(0)(0)|50|51|(0)|86|87|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(51:181|182|(1:917)(3:186|187|188)|(1:196)(1:193)|(1:195)|197|(1:199)|200|(46:205|206|207|208|209|210|(6:861|862|863|(1:865)|866|(41:868|869|870|871|(10:873|(3:877|878|879)|(1:904)(1:901)|(1:903)|881|(1:883)|884|(6:889|890|891|892|893|894)|897|894)(1:905)|213|214|215|216|(1:860)(3:220|221|222)|(1:231)(1:227)|(1:229)(1:230)|232|(1:234)|235|(29:240|241|242|243|244|245|(6:802|803|804|(1:806)|807|(23:809|810|811|(10:813|(2:817|818)|(1:844)(1:841)|(1:843)|820|(1:822)|823|(5:828|829|830|831|832)|834|832)(1:845)|248|(1:250)(1:801)|251|(1:800)(3:255|256|257)|(1:266)(1:262)|(1:264)(1:265)|267|(1:269)|270|(13:275|276|277|278|279|280|281|(1:283)|284|(1:286)(9:731|732|733|734|735|736|(1:738)|739|(5:741|742|743|744|(12:746|(1:782)(3:750|751|752)|(1:760)(1:757)|(1:759)|761|(1:763)|764|(7:769|770|771|772|773|(1:775)|776)|778|773|(0)|776)(1:783))(1:787))|287|288|(25:383|384|386|387|(3:713|714|(22:716|717|718|(17:720|396|397|(1:399)|400|401|(10:406|407|(1:409)|410|(1:412)(9:642|643|644|645|646|647|(1:649)|650|(4:652|653|654|(13:656|657|658|659|(2:(1:686)(1:683)|(1:685))(1:665)|666|(1:668)|669|(4:674|675|(1:677)|678)|679|675|(0)|678)(1:688))(1:691))|413|414|(22:416|(1:636)(3:420|421|422)|(1:430)(1:427)|(1:429)|431|(1:433)|434|(18:439|440|441|442|443|444|(1:446)(1:629)|(1:448)(1:628)|449|450|451|452|453|454|455|(1:457)|458|(5:460|461|462|463|(13:465|(3:469|470|471)|(1:615)(1:612)|(1:614)|473|(1:475)|476|(8:481|482|483|484|485|(1:487)(1:602)|(1:489)(1:601)|490)|604|485|(0)(0)|(0)(0)|490)(1:616))(1:620))|632|444|(0)(0)|(0)(0)|449|450|451|452|453|454|455|(0)|458|(0)(0))(1:637)|491|(3:(3:495|(1:497)(2:592|(1:594)(2:595|(2:597|598)))|(48:499|(1:589)(2:503|504)|(1:513)(1:509)|(1:511)(1:512)|514|(1:516)|517|(44:522|523|524|525|526|527|(1:529)|530|(6:533|534|535|(1:537)|538|(5:540|541|542|543|(11:545|(2:(1:577)(1:574)|(9:576|553|(1:555)|556|(7:561|562|563|564|565|(1:567)(1:569)|568)|570|565|(0)(0)|568))|552|553|(0)|556|(8:558|561|562|563|564|565|(0)(0)|568)|570|565|(0)(0)|568)))|532|9|10|11|12|13|(1:15)(1:135)|16|17|18|19|20|(3:123|124|(21:128|23|(1:25)(1:122)|26|27|28|29|30|31|32|33|34|(1:111)(1:37)|38|39|(3:100|101|102)(1:(6:(1:43)(1:92)|44|(1:46)(1:91)|47|48|49)(2:93|(1:95)(2:(1:97)(1:99)|98)))|50|51|(4:53|(4:55|(10:57|(1:78)|(1:62)|63|(1:65)|68|(1:70)(1:77)|71|(3:73|(1:75)|76)|67)|79|(1:81))|82|(1:84)(1:85))|86|87))|22|23|(0)(0)|26|27|28|29|30|31|32|33|34|(0)|111|38|39|(0)(0)|50|51|(0)|86|87)|588|527|(0)|530|(0)|532|9|10|11|12|13|(0)(0)|16|17|18|19|20|(0)|22|23|(0)(0)|26|27|28|29|30|31|32|33|34|(0)|111|38|39|(0)(0)|50|51|(0)|86|87)(2:590|591))|322|323)(2:599|600))|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))|(1:712)(1:393)|(1:395)(1:711)|396|397|(0)|400|401|(11:403|406|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0)))|389|(1:391)|712|(0)(0)|396|397|(0)|400|401|(0)|708|407|(0)|410|(0)(0)|413|414|(0)(0)|491|(0)(0))(15:290|(1:382)(2:294|295)|(1:303)(1:300)|(1:302)|304|(1:306)|307|(11:312|313|314|315|316|317|(1:319)|320|(6:324|325|326|(1:328)|329|(5:331|332|333|334|(10:336|(2:(1:368)(1:365)|(1:367))(1:343)|344|(1:346)|347|(7:352|353|354|355|356|(1:358)(1:360)|359)|361|356|(0)(0)|359)))|322|323)|381|317|(0)|320|(0)|322|323))|797|280|281|(0)|284|(0)(0)|287|288|(0)(0)))|247|248|(0)(0)|251|(1:253)|800|(1:260)|266|(0)(0)|267|(0)|270|(14:272|275|276|277|278|279|280|281|(0)|284|(0)(0)|287|288|(0)(0))|797|280|281|(0)|284|(0)(0)|287|288|(0)(0))|855|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0)))|212|213|214|215|216|(1:218)|860|(1:225)|231|(0)(0)|232|(0)|235|(30:237|240|241|242|243|244|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0))|855|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0))|913|210|(0)|212|213|214|215|216|(0)|860|(0)|231|(0)(0)|232|(0)|235|(0)|855|245|(0)|247|248|(0)(0)|251|(0)|800|(0)|266|(0)(0)|267|(0)|270|(0)|797|280|281|(0)|284|(0)(0)|287|288|(0)(0)) */
    /* JADX WARN: Code restructure failed: missing block: B:108:0x11e6, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:112:0x11f8, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:133:0x11fb, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:134:0x11fc, code lost:
    
        r9 = r7;
        r6 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:137:0x11ff, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x1200, code lost:
    
        r6 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:189:0x024f, code lost:
    
        if (r2 != 0) goto L106;
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x0438, code lost:
    
        if (r4 != null) goto L196;
     */
    /* JADX WARN: Code restructure failed: missing block: B:258:0x061c, code lost:
    
        if (r15 != null) goto L281;
     */
    /* JADX WARN: Code restructure failed: missing block: B:296:0x0f16, code lost:
    
        if (r3 != 0) goto L702;
     */
    /* JADX WARN: Code restructure failed: missing block: B:423:0x0a74, code lost:
    
        if (r2 != 0) goto L491;
     */
    /* JADX WARN: Code restructure failed: missing block: B:472:0x0b99, code lost:
    
        if (r9 != 0) goto L550;
     */
    /* JADX WARN: Code restructure failed: missing block: B:505:0x0cec, code lost:
    
        if (r14 != null) goto L606;
     */
    /* JADX WARN: Code restructure failed: missing block: B:622:0x0b3b, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:623:0x0b40, code lost:
    
        r2 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:624:0x0b41, code lost:
    
        r9 = kotlin.Result.INSTANCE;
        r2 = kotlin.Result.m1202constructorimpl(kotlin.ResultKt.createFailure(r2));
     */
    /* JADX WARN: Code restructure failed: missing block: B:626:0x0b3d, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:627:0x0b3e, code lost:
    
        r4 = r33;
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x127a, code lost:
    
        if (r6 == null) goto L891;
     */
    /* JADX WARN: Code restructure failed: missing block: B:709:0x0a12, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:710:0x0a13, code lost:
    
        r11 = r25;
        r10 = r30;
        r4 = r32;
     */
    /* JADX WARN: Code restructure failed: missing block: B:729:0x0f19, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:730:0x0f1a, code lost:
    
        r2 = r34;
        r1 = r0;
        r15 = "getInitialApplication";
     */
    /* JADX WARN: Code restructure failed: missing block: B:753:0x0750, code lost:
    
        if (r10 != 0) goto L340;
     */
    /* JADX WARN: Code restructure failed: missing block: B:819:0x0546, code lost:
    
        if (r4 != 0) goto L243;
     */
    /* JADX WARN: Code restructure failed: missing block: B:880:0x035f, code lost:
    
        if (r3 != 0) goto L156;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:0x11be A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x1181  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x1167 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:135:0x1148  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x1147  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x10ea  */
    /* JADX WARN: Removed duplicated region for block: B:181:0x0211 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:218:0x0424 A[Catch: all -> 0x10e1, TRY_LEAVE, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:225:0x044a A[Catch: all -> 0x10e1, TRY_ENTER, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:229:0x0458  */
    /* JADX WARN: Removed duplicated region for block: B:230:0x045b  */
    /* JADX WARN: Removed duplicated region for block: B:234:0x0470 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:237:0x0485 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:250:0x05db  */
    /* JADX WARN: Removed duplicated region for block: B:253:0x0608 A[Catch: all -> 0x10e1, TRY_LEAVE, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:25:0x117f  */
    /* JADX WARN: Removed duplicated region for block: B:260:0x062e A[Catch: all -> 0x10e1, TRY_ENTER, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:264:0x063c  */
    /* JADX WARN: Removed duplicated region for block: B:265:0x063f  */
    /* JADX WARN: Removed duplicated region for block: B:269:0x0654 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:272:0x0669 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:283:0x06a7  */
    /* JADX WARN: Removed duplicated region for block: B:286:0x06c0  */
    /* JADX WARN: Removed duplicated region for block: B:290:0x0ed5 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:319:0x0f9b  */
    /* JADX WARN: Removed duplicated region for block: B:324:0x0fb5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:358:0x10a6  */
    /* JADX WARN: Removed duplicated region for block: B:360:0x10a9  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x11b3 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:383:0x07f9 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:395:0x0874  */
    /* JADX WARN: Removed duplicated region for block: B:399:0x088c A[Catch: all -> 0x0867, TRY_ENTER, TRY_LEAVE, TryCatch #24 {all -> 0x0867, blocks: (B:718:0x0848, B:399:0x088c, B:403:0x08a1, B:406:0x08a8, B:391:0x085c, B:393:0x0862), top: B:717:0x0848 }] */
    /* JADX WARN: Removed duplicated region for block: B:403:0x08a1 A[Catch: all -> 0x0867, TRY_ENTER, TryCatch #24 {all -> 0x0867, blocks: (B:718:0x0848, B:399:0x088c, B:403:0x08a1, B:406:0x08a8, B:391:0x085c, B:393:0x0862), top: B:717:0x0848 }] */
    /* JADX WARN: Removed duplicated region for block: B:409:0x08d2  */
    /* JADX WARN: Removed duplicated region for block: B:412:0x08ec  */
    /* JADX WARN: Removed duplicated region for block: B:416:0x0a36 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x11c7  */
    /* JADX WARN: Removed duplicated region for block: B:446:0x0aef A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:448:0x0af7 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:457:0x0b51  */
    /* JADX WARN: Removed duplicated region for block: B:460:0x0b5a A[Catch: all -> 0x10e1, TRY_LEAVE, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:487:0x0c06 A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:489:0x0c0e A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:493:0x0c5d  */
    /* JADX WARN: Removed duplicated region for block: B:529:0x0d68  */
    /* JADX WARN: Removed duplicated region for block: B:533:0x0d84 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x1225  */
    /* JADX WARN: Removed duplicated region for block: B:555:0x0e2b A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:567:0x0e70  */
    /* JADX WARN: Removed duplicated region for block: B:569:0x0e73  */
    /* JADX WARN: Removed duplicated region for block: B:599:0x0ecf A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:601:0x0c20  */
    /* JADX WARN: Removed duplicated region for block: B:602:0x0c0b  */
    /* JADX WARN: Removed duplicated region for block: B:620:0x0c38  */
    /* JADX WARN: Removed duplicated region for block: B:628:0x0b09  */
    /* JADX WARN: Removed duplicated region for block: B:629:0x0af4  */
    /* JADX WARN: Removed duplicated region for block: B:637:0x0c3d  */
    /* JADX WARN: Removed duplicated region for block: B:642:0x08f4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:649:0x092e  */
    /* JADX WARN: Removed duplicated region for block: B:652:0x0937  */
    /* JADX WARN: Removed duplicated region for block: B:677:0x09e4  */
    /* JADX WARN: Removed duplicated region for block: B:691:0x0a01  */
    /* JADX WARN: Removed duplicated region for block: B:711:0x0877  */
    /* JADX WARN: Removed duplicated region for block: B:731:0x06ca A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:738:0x0704  */
    /* JADX WARN: Removed duplicated region for block: B:741:0x070d A[Catch: all -> 0x10e1, TRY_LEAVE, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:775:0x07c9  */
    /* JADX WARN: Removed duplicated region for block: B:787:0x07ed  */
    /* JADX WARN: Removed duplicated region for block: B:801:0x05dc A[Catch: all -> 0x10e1, TryCatch #20 {all -> 0x10e1, blocks: (B:182:0x0211, B:184:0x023b, B:191:0x0263, B:193:0x0269, B:197:0x0273, B:199:0x0287, B:200:0x0290, B:202:0x029c, B:205:0x02a3, B:209:0x02ac, B:210:0x02bd, B:213:0x03e2, B:216:0x03ee, B:218:0x0424, B:225:0x044a, B:227:0x0450, B:232:0x045c, B:234:0x0470, B:235:0x0479, B:237:0x0485, B:240:0x048c, B:244:0x0495, B:245:0x04a4, B:248:0x05b9, B:251:0x05e0, B:253:0x0608, B:260:0x062e, B:262:0x0634, B:267:0x0640, B:269:0x0654, B:270:0x065d, B:272:0x0669, B:275:0x0670, B:279:0x0679, B:280:0x0688, B:284:0x06a8, B:287:0x07f3, B:414:0x0a30, B:416:0x0a36, B:418:0x0a60, B:425:0x0a86, B:427:0x0a8c, B:431:0x0a96, B:433:0x0aaa, B:434:0x0ab3, B:436:0x0abf, B:439:0x0ac6, B:443:0x0acf, B:444:0x0add, B:446:0x0aef, B:448:0x0af7, B:449:0x0b0a, B:455:0x0b4b, B:458:0x0b52, B:460:0x0b5a, B:465:0x0b6e, B:467:0x0b8b, B:473:0x0bb4, B:475:0x0bc8, B:476:0x0bd1, B:478:0x0bdd, B:481:0x0be4, B:484:0x0bed, B:485:0x0bf5, B:487:0x0c06, B:489:0x0c0e, B:490:0x0c21, B:491:0x0c3f, B:322:0x10c6, B:323:0x10d9, B:495:0x0c61, B:497:0x0c73, B:499:0x0ca9, B:501:0x0cda, B:507:0x0cf5, B:509:0x0cfb, B:514:0x0d07, B:516:0x0d1b, B:517:0x0d24, B:519:0x0d30, B:522:0x0d37, B:526:0x0d40, B:527:0x0d4f, B:530:0x0d6a, B:535:0x0db2, B:538:0x0db9, B:540:0x0dc1, B:545:0x0dd5, B:547:0x0df2, B:553:0x0e17, B:555:0x0e2b, B:556:0x0e34, B:558:0x0e40, B:561:0x0e47, B:564:0x0e50, B:565:0x0e58, B:568:0x0e74, B:570:0x0e54, B:572:0x0e05, B:574:0x0e0b, B:584:0x0da8, B:588:0x0d4b, B:590:0x0e99, B:591:0x0ea0, B:592:0x0c81, B:594:0x0c8d, B:595:0x0c9b, B:597:0x0ea1, B:598:0x0ece, B:599:0x0ecf, B:600:0x0ed4, B:604:0x0bf1, B:610:0x0ba4, B:612:0x0baa, B:624:0x0b41, B:632:0x0ad9, B:641:0x0a26, B:290:0x0ed5, B:292:0x0f02, B:298:0x0f28, B:300:0x0f2e, B:304:0x0f38, B:306:0x0f4c, B:307:0x0f55, B:309:0x0f61, B:312:0x0f68, B:316:0x0f71, B:317:0x0f80, B:320:0x0f9d, B:326:0x0fe7, B:329:0x0fee, B:331:0x0ff6, B:336:0x100a, B:338:0x1027, B:344:0x104b, B:346:0x105f, B:347:0x1068, B:349:0x1074, B:352:0x107b, B:355:0x1084, B:356:0x108c, B:359:0x10aa, B:361:0x1088, B:363:0x103b, B:365:0x1041, B:376:0x0fdd, B:381:0x0f7c, B:736:0x06fe, B:739:0x0705, B:741:0x070d, B:746:0x0723, B:748:0x0740, B:755:0x075e, B:757:0x0764, B:761:0x076e, B:763:0x0782, B:764:0x078b, B:766:0x0797, B:769:0x079e, B:772:0x07a7, B:773:0x07af, B:776:0x07cb, B:778:0x07ab, B:791:0x06f4, B:797:0x0684, B:801:0x05dc, B:804:0x04f8, B:807:0x04ff, B:809:0x0507, B:813:0x051b, B:815:0x0538, B:820:0x055b, B:822:0x056f, B:823:0x0578, B:825:0x0584, B:828:0x058b, B:831:0x0594, B:832:0x059c, B:834:0x0598, B:839:0x054b, B:841:0x0551, B:852:0x04ee, B:855:0x04a0, B:863:0x0311, B:866:0x0318, B:868:0x0320, B:873:0x0334, B:875:0x0351, B:881:0x037b, B:883:0x038f, B:884:0x0398, B:886:0x03a4, B:889:0x03ab, B:893:0x03b4, B:894:0x03bc, B:897:0x03b8, B:899:0x036b, B:901:0x0371, B:909:0x0307, B:913:0x02b9, B:534:0x0d84, B:325:0x0fb5, B:803:0x04ca, B:862:0x02e3), top: B:181:0x0211, inners: #2, #19, #25, #37 }] */
    /* JADX WARN: Removed duplicated region for block: B:802:0x04ca A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:861:0x02e3 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:930:0x0141  */
    /* JADX WARN: Removed duplicated region for block: B:933:0x014a  */
    /* JADX WARN: Removed duplicated region for block: B:958:0x01f9  */
    /* JADX WARN: Type inference failed for: r10v12, types: [T] */
    /* JADX WARN: Type inference failed for: r10v22, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r10v23 */
    /* JADX WARN: Type inference failed for: r10v24 */
    /* JADX WARN: Type inference failed for: r10v25 */
    /* JADX WARN: Type inference failed for: r10v29, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r10v51, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r10v86 */
    /* JADX WARN: Type inference failed for: r13v10, types: [T] */
    /* JADX WARN: Type inference failed for: r13v15, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r13v17 */
    /* JADX WARN: Type inference failed for: r13v5 */
    /* JADX WARN: Type inference failed for: r13v6 */
    /* JADX WARN: Type inference failed for: r13v7 */
    /* JADX WARN: Type inference failed for: r14v15, types: [T] */
    /* JADX WARN: Type inference failed for: r14v17 */
    /* JADX WARN: Type inference failed for: r14v18 */
    /* JADX WARN: Type inference failed for: r14v34, types: [T] */
    /* JADX WARN: Type inference failed for: r14v40 */
    /* JADX WARN: Type inference failed for: r14v41 */
    /* JADX WARN: Type inference failed for: r14v45 */
    /* JADX WARN: Type inference failed for: r14v46 */
    /* JADX WARN: Type inference failed for: r15v17, types: [T] */
    /* JADX WARN: Type inference failed for: r15v24 */
    /* JADX WARN: Type inference failed for: r15v25, types: [T] */
    /* JADX WARN: Type inference failed for: r15v26 */
    /* JADX WARN: Type inference failed for: r15v36 */
    /* JADX WARN: Type inference failed for: r15v37 */
    /* JADX WARN: Type inference failed for: r15v38 */
    /* JADX WARN: Type inference failed for: r15v40, types: [T] */
    /* JADX WARN: Type inference failed for: r15v41 */
    /* JADX WARN: Type inference failed for: r15v42 */
    /* JADX WARN: Type inference failed for: r15v43 */
    /* JADX WARN: Type inference failed for: r15v64 */
    /* JADX WARN: Type inference failed for: r15v65 */
    /* JADX WARN: Type inference failed for: r1v106, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v105, types: [T] */
    /* JADX WARN: Type inference failed for: r2v153, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v154 */
    /* JADX WARN: Type inference failed for: r2v155 */
    /* JADX WARN: Type inference failed for: r2v156 */
    /* JADX WARN: Type inference failed for: r2v161, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v17, types: [T] */
    /* JADX WARN: Type inference failed for: r2v176, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v185, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v186 */
    /* JADX WARN: Type inference failed for: r2v187 */
    /* JADX WARN: Type inference failed for: r2v188 */
    /* JADX WARN: Type inference failed for: r2v193, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v215 */
    /* JADX WARN: Type inference failed for: r2v216 */
    /* JADX WARN: Type inference failed for: r3v14 */
    /* JADX WARN: Type inference failed for: r3v15 */
    /* JADX WARN: Type inference failed for: r3v158, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v16 */
    /* JADX WARN: Type inference failed for: r3v19, types: [T] */
    /* JADX WARN: Type inference failed for: r3v212, types: [T] */
    /* JADX WARN: Type inference failed for: r3v252, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v253 */
    /* JADX WARN: Type inference failed for: r3v254 */
    /* JADX WARN: Type inference failed for: r3v255 */
    /* JADX WARN: Type inference failed for: r3v259, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v265, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v285 */
    /* JADX WARN: Type inference failed for: r3v286 */
    /* JADX WARN: Type inference failed for: r3v287 */
    /* JADX WARN: Type inference failed for: r3v29, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v31, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v50 */
    /* JADX WARN: Type inference failed for: r3v51 */
    /* JADX WARN: Type inference failed for: r3v52 */
    /* JADX WARN: Type inference failed for: r3v55, types: [T] */
    /* JADX WARN: Type inference failed for: r3v65, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v67, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v104, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v139 */
    /* JADX WARN: Type inference failed for: r4v140 */
    /* JADX WARN: Type inference failed for: r4v15 */
    /* JADX WARN: Type inference failed for: r4v16 */
    /* JADX WARN: Type inference failed for: r4v164 */
    /* JADX WARN: Type inference failed for: r4v165 */
    /* JADX WARN: Type inference failed for: r4v17 */
    /* JADX WARN: Type inference failed for: r4v20, types: [T] */
    /* JADX WARN: Type inference failed for: r4v30, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v32, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v7, types: [T] */
    /* JADX WARN: Type inference failed for: r6v39, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r6v61 */
    /* JADX WARN: Type inference failed for: r6v62, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r6v67, types: [T] */
    /* JADX WARN: Type inference failed for: r6v78 */
    /* JADX WARN: Type inference failed for: r6v79 */
    /* JADX WARN: Type inference failed for: r6v80 */
    /* JADX WARN: Type inference failed for: r6v81 */
    /* JADX WARN: Type inference failed for: r9v101, types: [T] */
    /* JADX WARN: Type inference failed for: r9v111, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v113, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v145 */
    /* JADX WARN: Type inference failed for: r9v146 */
    /* JADX WARN: Type inference failed for: r9v62 */
    /* JADX WARN: Type inference failed for: r9v63 */
    /* JADX WARN: Type inference failed for: r9v64 */
    /* JADX WARN: Type inference failed for: r9v67, types: [T] */
    /* JADX WARN: Type inference failed for: r9v77, types: [T, java.lang.Object, java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v79, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v96 */
    /* JADX WARN: Type inference failed for: r9v97 */
    /* JADX WARN: Type inference failed for: r9v98 */
    @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final Object invokeSuspend(Object obj) {
        ?? canonicalName;
        Class<?> cls;
        String str;
        Object obj2;
        Object obj3;
        Object m1202constructorimpl;
        String str2;
        CharSequence charSequence;
        ?? canonicalName2;
        Class<?> cls2;
        String str3;
        String className;
        HKMainActivity hKMainActivity;
        HKMainActivity$startDocFlow$2 hKMainActivity$startDocFlow$2;
        HyperLogger.Level level;
        HyperLogger companion;
        StringBuilder sb;
        Ref.ObjectRef objectRef;
        HKMainActivity hKMainActivity2;
        String str4;
        String str5;
        Object obj4;
        Throwable th;
        ?? r2;
        String str6;
        boolean z;
        Object m1202constructorimpl2;
        String str7;
        String str8;
        ?? canonicalName3;
        Class<?> cls3;
        String str9;
        String className2;
        Object obj5;
        HSStateHandler hsStateHandler;
        String tag;
        Ref.ObjectRef objectRef2;
        StackTraceElement stackTraceElement;
        String str10;
        String str11;
        String str12;
        ?? r4;
        Matcher matcher;
        String str13;
        Object m1202constructorimpl3;
        String str14;
        String str15;
        ?? canonicalName4;
        Class<?> cls4;
        String str16;
        String className3;
        File file;
        Ref.ObjectRef objectRef3;
        StackTraceElement stackTraceElement2;
        String str17;
        String str18;
        String str19;
        ?? r15;
        Matcher matcher2;
        String str20;
        String str21;
        String sb2;
        String str22;
        Object m1202constructorimpl4;
        String str23;
        String str24;
        String str25;
        ?? r10;
        String str26;
        String str27;
        Class<?> cls5;
        String className4;
        String str28;
        String str29;
        Throwable th2;
        Object obj6;
        Object m1202constructorimpl5;
        Throwable m1205exceptionOrNullimpl;
        Object obj7;
        HVError hVError;
        String str30;
        String str31;
        ?? r14;
        String str32;
        String str33;
        Object m1202constructorimpl6;
        String canonicalName5;
        ?? r152;
        Class<?> cls6;
        Matcher matcher3;
        String str34;
        String className5;
        final HyperKycData.DocData docData;
        WorkflowUIState.DocCapture docCapture;
        final HKMainActivity hKMainActivity3;
        Class<?> cls7;
        String className6;
        String str35;
        String str36;
        String str37;
        ?? r22;
        String str38;
        String localizedMessage;
        String str39;
        Object m1202constructorimpl7;
        ?? canonicalName6;
        Class<?> cls8;
        String str40;
        String localizedMessage2;
        String str41;
        String className7;
        Class<?> cls9;
        String className8;
        HyperLogger.Level level2;
        HyperLogger companion2;
        StringBuilder sb3;
        Ref.ObjectRef objectRef4;
        StackTraceElement stackTraceElement3;
        String className9;
        String str42;
        String str43;
        String substringAfterLast$default;
        ?? r142;
        Matcher matcher4;
        String str44;
        String str45;
        Object m1202constructorimpl8;
        ?? canonicalName7;
        Class<?> cls10;
        String str46;
        String str47;
        String className10;
        Class<?> cls11;
        String str48;
        String str49;
        String str50;
        ?? r3;
        String str51;
        String str52;
        Object m1202constructorimpl9;
        ?? canonicalName8;
        Class<?> cls12;
        String str53;
        String className11;
        String substringAfterLast$default2;
        Class<?> cls13;
        String className12;
        Class<?> cls14;
        String className13;
        Class<?> cls15;
        String className14;
        Class<?> cls16;
        String className15;
        Object performDocCapture;
        String className16;
        Object m1202constructorimpl10;
        Throwable m1205exceptionOrNullimpl2;
        Gson gson;
        ?? r6;
        Map<String, Object> textConfigs;
        BaseResponse responseBody;
        BaseResponse.Result result;
        List details;
        int size;
        Gson gson2;
        Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        int i = this.label;
        boolean z2 = true;
        if (i == 0) {
            ResultKt.throwOnFailure(obj);
            CoroutineScope coroutineScope = (CoroutineScope) this.L$0;
            HyperLogger.Level level3 = HyperLogger.Level.DEBUG;
            HyperLogger companion3 = HyperLogger.INSTANCE.getInstance();
            StringBuilder sb4 = new StringBuilder();
            Ref.ObjectRef objectRef5 = new Ref.ObjectRef();
            StackTraceElement[] stackTrace = new Throwable().getStackTrace();
            Intrinsics.checkNotNullExpressionValue(stackTrace, "Throwable().stackTrace");
            StackTraceElement stackTraceElement4 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace);
            if (stackTraceElement4 == null || (className16 = stackTraceElement4.getClassName()) == null || (canonicalName = StringsKt.substringAfterLast$default(className16, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == 0) {
                canonicalName = (coroutineScope == null || (cls = coroutineScope.getClass()) == null) ? 0 : cls.getCanonicalName();
                if (canonicalName == 0) {
                    canonicalName = "N/A";
                }
            }
            objectRef5.element = canonicalName;
            Matcher matcher5 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef5.element);
            if (matcher5.find()) {
                ?? replaceAll = matcher5.replaceAll("");
                Intrinsics.checkNotNullExpressionValue(replaceAll, "replaceAll(\"\")");
                objectRef5.element = replaceAll;
            }
            if (((String) objectRef5.element).length() <= 23 || Build.VERSION.SDK_INT >= 26) {
                str = (String) objectRef5.element;
            } else {
                str = ((String) objectRef5.element).substring(0, 23);
                Intrinsics.checkNotNullExpressionValue(str, "this as java.lang.String…ing(startIndex, endIndex)");
            }
            sb4.append(str);
            sb4.append(" - ");
            sb4.append("startDocFlow() called");
            sb4.append(' ');
            sb4.append("");
            companion3.log(level3, sb4.toString());
            if (CoreExtsKt.isRelease()) {
                str2 = "retrieveState: state targetFile exists : ";
                obj2 = coroutine_suspended;
                charSequence = "co.hyperverge";
                obj3 = "N/A";
            } else {
                try {
                    Result.Companion companion4 = Result.INSTANCE;
                    obj2 = coroutine_suspended;
                    obj3 = "N/A";
                    try {
                        Object invoke = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                        Intrinsics.checkNotNull(invoke, "null cannot be cast to non-null type android.app.Application");
                        m1202constructorimpl = Result.m1202constructorimpl(((Application) invoke).getPackageName());
                    } catch (Throwable th3) {
                        th = th3;
                        Result.Companion companion5 = Result.INSTANCE;
                        m1202constructorimpl = Result.m1202constructorimpl(ResultKt.createFailure(th));
                        if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                        }
                        String packageName = (String) m1202constructorimpl;
                        if (CoreExtsKt.isDebug()) {
                        }
                        hKMainActivity = this.this$0;
                        WorkflowUIState.DocCapture docCapture2 = this.$docFlowUIState;
                        Result.Companion companion6 = Result.INSTANCE;
                        if (hKMainActivity.getMainVM().getHsStateHandler().getIsActivityRecreated()) {
                        }
                    }
                } catch (Throwable th4) {
                    th = th4;
                    obj2 = coroutine_suspended;
                    obj3 = "N/A";
                }
                if (Result.m1208isFailureimpl(m1202constructorimpl)) {
                    m1202constructorimpl = "";
                }
                String packageName2 = (String) m1202constructorimpl;
                if (CoreExtsKt.isDebug()) {
                    str2 = "retrieveState: state targetFile exists : ";
                    charSequence = "co.hyperverge";
                } else {
                    Intrinsics.checkNotNullExpressionValue(packageName2, "packageName");
                    str2 = "retrieveState: state targetFile exists : ";
                    charSequence = "co.hyperverge";
                    if (StringsKt.contains$default((CharSequence) packageName2, (CharSequence) "co.hyperverge", false, 2, (Object) null)) {
                        Ref.ObjectRef objectRef6 = new Ref.ObjectRef();
                        StackTraceElement[] stackTrace2 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace2, "Throwable().stackTrace");
                        StackTraceElement stackTraceElement5 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace2);
                        if (stackTraceElement5 == null || (className = stackTraceElement5.getClassName()) == null || (canonicalName2 = StringsKt.substringAfterLast$default(className, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == 0) {
                            canonicalName2 = (coroutineScope == null || (cls2 = coroutineScope.getClass()) == null) ? 0 : cls2.getCanonicalName();
                            if (canonicalName2 == 0) {
                                canonicalName2 = obj3;
                            }
                        }
                        objectRef6.element = canonicalName2;
                        Matcher matcher6 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef6.element);
                        if (matcher6.find()) {
                            ?? replaceAll2 = matcher6.replaceAll("");
                            Intrinsics.checkNotNullExpressionValue(replaceAll2, "replaceAll(\"\")");
                            objectRef6.element = replaceAll2;
                        }
                        if (((String) objectRef6.element).length() <= 23 || Build.VERSION.SDK_INT >= 26) {
                            str3 = (String) objectRef6.element;
                        } else {
                            str3 = ((String) objectRef6.element).substring(0, 23);
                            Intrinsics.checkNotNullExpressionValue(str3, "this as java.lang.String…ing(startIndex, endIndex)");
                        }
                        Log.println(3, str3, "startDocFlow() called ");
                    }
                }
            }
            hKMainActivity = this.this$0;
            WorkflowUIState.DocCapture docCapture22 = this.$docFlowUIState;
            try {
                Result.Companion companion62 = Result.INSTANCE;
            } catch (Throwable th5) {
                th = th5;
                hKMainActivity$startDocFlow$2 = this;
            }
            if (hKMainActivity.getMainVM().getHsStateHandler().getIsActivityRecreated()) {
                try {
                    HKMainActivity hKMainActivity4 = hKMainActivity;
                    String transactionId$hyperkyc_release = hKMainActivity.getHyperKycConfig().getTransactionId$hyperkyc_release();
                    hKMainActivity$startDocFlow$2 = this;
                    try {
                        hKMainActivity$startDocFlow$2.L$0 = hKMainActivity;
                        docCapture = docCapture22;
                        hKMainActivity$startDocFlow$2.L$1 = docCapture;
                        z2 = true;
                    } catch (Throwable th6) {
                        th = th6;
                        z2 = true;
                        z = false;
                        obj4 = null;
                        th = th;
                        Result.Companion companion7 = Result.INSTANCE;
                        m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                        HKMainActivity hKMainActivity5 = hKMainActivity$startDocFlow$2.this$0;
                        WorkflowUIState.DocCapture docCapture3 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                        if (m1205exceptionOrNullimpl2 != null) {
                        }
                        return Result.m1201boximpl(m1202constructorimpl10);
                    }
                    try {
                        hKMainActivity$startDocFlow$2.label = 1;
                        performDocCapture = HyperSnapBridgeKt.performDocCapture(hKMainActivity4, transactionId$hyperkyc_release, docCapture, hKMainActivity$startDocFlow$2);
                        Object obj8 = obj2;
                        if (performDocCapture == obj8) {
                            return obj8;
                        }
                        hKMainActivity3 = hKMainActivity;
                    } catch (Throwable th7) {
                        th = th7;
                        z = false;
                        obj4 = null;
                        th = th;
                        Result.Companion companion72 = Result.INSTANCE;
                        m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                        HKMainActivity hKMainActivity52 = hKMainActivity$startDocFlow$2.this$0;
                        WorkflowUIState.DocCapture docCapture32 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                        if (m1205exceptionOrNullimpl2 != null) {
                        }
                        return Result.m1201boximpl(m1202constructorimpl10);
                    }
                } catch (Throwable th8) {
                    th = th8;
                    hKMainActivity$startDocFlow$2 = this;
                    z2 = true;
                    z = false;
                    obj4 = null;
                    th = th;
                    Result.Companion companion722 = Result.INSTANCE;
                    m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    HKMainActivity hKMainActivity522 = hKMainActivity$startDocFlow$2.this$0;
                    WorkflowUIState.DocCapture docCapture322 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                    m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                    if (m1205exceptionOrNullimpl2 != null) {
                    }
                    return Result.m1201boximpl(m1202constructorimpl10);
                }
            } else {
                try {
                    level = HyperLogger.Level.DEBUG;
                    companion = HyperLogger.INSTANCE.getInstance();
                    sb = new StringBuilder();
                    objectRef = new Ref.ObjectRef();
                    StackTraceElement[] stackTrace3 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace3, "Throwable().stackTrace");
                    StackTraceElement stackTraceElement6 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace3);
                    if (stackTraceElement6 == null || (className15 = stackTraceElement6.getClassName()) == null) {
                        hKMainActivity2 = hKMainActivity;
                        str4 = "packageName";
                        str5 = "Throwable().stackTrace";
                    } else {
                        hKMainActivity2 = hKMainActivity;
                        str4 = "packageName";
                        str5 = "Throwable().stackTrace";
                        try {
                            r2 = StringsKt.substringAfterLast$default(className15, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                        } catch (Throwable th9) {
                            hKMainActivity$startDocFlow$2 = this;
                            th = th9;
                            obj4 = null;
                            z2 = true;
                            z = false;
                            Result.Companion companion7222 = Result.INSTANCE;
                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                            HKMainActivity hKMainActivity5222 = hKMainActivity$startDocFlow$2.this$0;
                            WorkflowUIState.DocCapture docCapture3222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                            if (m1205exceptionOrNullimpl2 != null) {
                            }
                            return Result.m1201boximpl(m1202constructorimpl10);
                        }
                    }
                    r2 = (coroutineScope == null || (cls16 = coroutineScope.getClass()) == null) ? 0 : cls16.getCanonicalName();
                    if (r2 == 0) {
                        r2 = obj3;
                    }
                    objectRef.element = r2;
                    Matcher matcher7 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef.element);
                    if (matcher7.find()) {
                        ?? replaceAll3 = matcher7.replaceAll("");
                        Intrinsics.checkNotNullExpressionValue(replaceAll3, "replaceAll(\"\")");
                        objectRef.element = replaceAll3;
                    }
                } catch (Throwable th10) {
                    th = th10;
                    hKMainActivity$startDocFlow$2 = this;
                    th = th;
                    z2 = true;
                    z = false;
                    obj4 = null;
                    Result.Companion companion72222 = Result.INSTANCE;
                    m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                    HKMainActivity hKMainActivity52222 = hKMainActivity$startDocFlow$2.this$0;
                    WorkflowUIState.DocCapture docCapture32222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                    m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                    if (m1205exceptionOrNullimpl2 != null) {
                    }
                    return Result.m1201boximpl(m1202constructorimpl10);
                }
                if (((String) objectRef.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                    try {
                        str6 = ((String) objectRef.element).substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str6, "this as java.lang.String…ing(startIndex, endIndex)");
                        sb.append(str6);
                        sb.append(" - ");
                        sb.append("startDocFlow: retrieving saved docData state");
                        sb.append(' ');
                        sb.append("");
                        companion.log(level, sb.toString());
                    } catch (Throwable th11) {
                        th = th11;
                        z = false;
                        z2 = true;
                        obj4 = null;
                        hKMainActivity$startDocFlow$2 = this;
                        Result.Companion companion722222 = Result.INSTANCE;
                        m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                        HKMainActivity hKMainActivity522222 = hKMainActivity$startDocFlow$2.this$0;
                        WorkflowUIState.DocCapture docCapture322222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                        if (m1205exceptionOrNullimpl2 != null) {
                        }
                        return Result.m1201boximpl(m1202constructorimpl10);
                    }
                    if (!CoreExtsKt.isRelease()) {
                        try {
                            Result.Companion companion8 = Result.INSTANCE;
                            Object invoke2 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                            Intrinsics.checkNotNull(invoke2, "null cannot be cast to non-null type android.app.Application");
                            m1202constructorimpl2 = Result.m1202constructorimpl(((Application) invoke2).getPackageName());
                        } catch (Throwable th12) {
                            Result.Companion companion9 = Result.INSTANCE;
                            m1202constructorimpl2 = Result.m1202constructorimpl(ResultKt.createFailure(th12));
                        }
                        if (Result.m1208isFailureimpl(m1202constructorimpl2)) {
                            m1202constructorimpl2 = "";
                        }
                        String str54 = (String) m1202constructorimpl2;
                        if (CoreExtsKt.isDebug()) {
                            str7 = str4;
                            Intrinsics.checkNotNullExpressionValue(str54, str7);
                            z = false;
                            Object obj9 = null;
                            try {
                                if (StringsKt.contains$default((CharSequence) str54, charSequence, false, 2, (Object) null)) {
                                    Ref.ObjectRef objectRef7 = new Ref.ObjectRef();
                                    StackTraceElement[] stackTrace4 = new Throwable().getStackTrace();
                                    str8 = str5;
                                    Intrinsics.checkNotNullExpressionValue(stackTrace4, str8);
                                    StackTraceElement stackTraceElement7 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace4);
                                    if (stackTraceElement7 != null && (className2 = stackTraceElement7.getClassName()) != null) {
                                        obj5 = null;
                                        try {
                                            canonicalName3 = StringsKt.substringAfterLast$default(className2, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                        } catch (Throwable th13) {
                                            hKMainActivity$startDocFlow$2 = this;
                                            th = th13;
                                            obj4 = obj5;
                                            z2 = true;
                                            z = false;
                                            Result.Companion companion7222222 = Result.INSTANCE;
                                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                            HKMainActivity hKMainActivity5222222 = hKMainActivity$startDocFlow$2.this$0;
                                            WorkflowUIState.DocCapture docCapture3222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                            if (m1205exceptionOrNullimpl2 != null) {
                                            }
                                            return Result.m1201boximpl(m1202constructorimpl10);
                                        }
                                    }
                                    canonicalName3 = (coroutineScope == null || (cls3 = coroutineScope.getClass()) == null) ? 0 : cls3.getCanonicalName();
                                    if (canonicalName3 == 0) {
                                        canonicalName3 = obj3;
                                    }
                                    objectRef7.element = canonicalName3;
                                    Matcher matcher8 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef7.element);
                                    if (matcher8.find()) {
                                        ?? replaceAll4 = matcher8.replaceAll("");
                                        Intrinsics.checkNotNullExpressionValue(replaceAll4, "replaceAll(\"\")");
                                        objectRef7.element = replaceAll4;
                                    }
                                    if (((String) objectRef7.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                        try {
                                            str9 = ((String) objectRef7.element).substring(0, 23);
                                            Intrinsics.checkNotNullExpressionValue(str9, "this as java.lang.String…ing(startIndex, endIndex)");
                                            Log.println(3, str9, "startDocFlow: retrieving saved docData state ");
                                        } catch (Throwable th14) {
                                            hKMainActivity$startDocFlow$2 = this;
                                            th = th14;
                                            z = false;
                                            z2 = true;
                                            obj4 = null;
                                            Result.Companion companion72222222 = Result.INSTANCE;
                                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                            HKMainActivity hKMainActivity52222222 = hKMainActivity$startDocFlow$2.this$0;
                                            WorkflowUIState.DocCapture docCapture32222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                            if (m1205exceptionOrNullimpl2 != null) {
                                            }
                                            return Result.m1201boximpl(m1202constructorimpl10);
                                        }
                                    }
                                    str9 = (String) objectRef7.element;
                                    Log.println(3, str9, "startDocFlow: retrieving saved docData state ");
                                } else {
                                    str8 = str5;
                                }
                                hKMainActivity2.getMainVM().getHsStateHandler().setActivityRecreated(false);
                                hsStateHandler = hKMainActivity2.getMainVM().getHsStateHandler();
                                tag = docCapture22.getTag();
                                HyperLogger.Level level4 = HyperLogger.Level.DEBUG;
                                HyperLogger companion10 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb5 = new StringBuilder();
                                objectRef2 = new Ref.ObjectRef();
                                StackTraceElement[] stackTrace5 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace5, str8);
                                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace5);
                                if (stackTraceElement != null || (className14 = stackTraceElement.getClassName()) == null) {
                                    str10 = str7;
                                    str11 = tag;
                                    str12 = str8;
                                } else {
                                    str10 = str7;
                                    str11 = tag;
                                    str12 = str8;
                                    try {
                                        String substringAfterLast$default3 = StringsKt.substringAfterLast$default(className14, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                        r4 = substringAfterLast$default3;
                                    } catch (Throwable th15) {
                                        th = th15;
                                        obj4 = null;
                                        z2 = true;
                                        z = false;
                                        hKMainActivity$startDocFlow$2 = this;
                                        Result.Companion companion722222222 = Result.INSTANCE;
                                        m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                        HKMainActivity hKMainActivity522222222 = hKMainActivity$startDocFlow$2.this$0;
                                        WorkflowUIState.DocCapture docCapture322222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                        if (m1205exceptionOrNullimpl2 != null) {
                                        }
                                        return Result.m1201boximpl(m1202constructorimpl10);
                                    }
                                }
                                String canonicalName9 = (hsStateHandler != null || (cls15 = hsStateHandler.getClass()) == null) ? null : cls15.getCanonicalName();
                                r4 = canonicalName9 == null ? obj3 : canonicalName9;
                                objectRef2.element = r4;
                                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef2.element);
                                if (matcher.find()) {
                                    ?? replaceAll5 = matcher.replaceAll("");
                                    Intrinsics.checkNotNullExpressionValue(replaceAll5, "replaceAll(\"\")");
                                    objectRef2.element = replaceAll5;
                                }
                            } catch (Throwable th16) {
                                hKMainActivity$startDocFlow$2 = this;
                                th = th16;
                                obj4 = obj9;
                                z2 = true;
                                Result.Companion companion7222222222 = Result.INSTANCE;
                                m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                HKMainActivity hKMainActivity5222222222 = hKMainActivity$startDocFlow$2.this$0;
                                WorkflowUIState.DocCapture docCapture3222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                if (m1205exceptionOrNullimpl2 != null) {
                                }
                                return Result.m1201boximpl(m1202constructorimpl10);
                            }
                            if (((String) objectRef2.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                boolean z3 = false;
                                try {
                                    str13 = ((String) objectRef2.element).substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str13, "this as java.lang.String…ing(startIndex, endIndex)");
                                    sb5.append(str13);
                                    sb5.append(" - ");
                                    sb5.append("retrieveState() called");
                                    sb5.append(' ');
                                    sb5.append("");
                                    companion10.log(level4, sb5.toString());
                                } catch (Throwable th17) {
                                    hKMainActivity$startDocFlow$2 = this;
                                    th = th17;
                                    z = z3;
                                    z2 = true;
                                    obj4 = null;
                                    Result.Companion companion72222222222 = Result.INSTANCE;
                                    m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                    HKMainActivity hKMainActivity52222222222 = hKMainActivity$startDocFlow$2.this$0;
                                    WorkflowUIState.DocCapture docCapture32222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                    m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                    if (m1205exceptionOrNullimpl2 != null) {
                                    }
                                    return Result.m1201boximpl(m1202constructorimpl10);
                                }
                                if (!CoreExtsKt.isRelease()) {
                                    try {
                                        Result.Companion companion11 = Result.INSTANCE;
                                        Object invoke3 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                        Intrinsics.checkNotNull(invoke3, "null cannot be cast to non-null type android.app.Application");
                                        m1202constructorimpl3 = Result.m1202constructorimpl(((Application) invoke3).getPackageName());
                                    } catch (Throwable th18) {
                                        Result.Companion companion12 = Result.INSTANCE;
                                        m1202constructorimpl3 = Result.m1202constructorimpl(ResultKt.createFailure(th18));
                                    }
                                    if (Result.m1208isFailureimpl(m1202constructorimpl3)) {
                                        m1202constructorimpl3 = "";
                                    }
                                    String str55 = (String) m1202constructorimpl3;
                                    if (CoreExtsKt.isDebug()) {
                                        str14 = str10;
                                        Intrinsics.checkNotNullExpressionValue(str55, str14);
                                        z = false;
                                        obj9 = null;
                                        if (StringsKt.contains$default((CharSequence) str55, charSequence, false, 2, (Object) null)) {
                                            Ref.ObjectRef objectRef8 = new Ref.ObjectRef();
                                            StackTraceElement[] stackTrace6 = new Throwable().getStackTrace();
                                            str15 = str12;
                                            Intrinsics.checkNotNullExpressionValue(stackTrace6, str15);
                                            StackTraceElement stackTraceElement8 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace6);
                                            if (stackTraceElement8 != null && (className3 = stackTraceElement8.getClassName()) != null) {
                                                obj5 = null;
                                                canonicalName4 = StringsKt.substringAfterLast$default(className3, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                            }
                                            canonicalName4 = (hsStateHandler == null || (cls4 = hsStateHandler.getClass()) == null) ? 0 : cls4.getCanonicalName();
                                            if (canonicalName4 == 0) {
                                                canonicalName4 = obj3;
                                            }
                                            objectRef8.element = canonicalName4;
                                            Matcher matcher9 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef8.element);
                                            if (matcher9.find()) {
                                                ?? replaceAll6 = matcher9.replaceAll("");
                                                Intrinsics.checkNotNullExpressionValue(replaceAll6, "replaceAll(\"\")");
                                                objectRef8.element = replaceAll6;
                                            }
                                            if (((String) objectRef8.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                z3 = false;
                                                str16 = ((String) objectRef8.element).substring(0, 23);
                                                Intrinsics.checkNotNullExpressionValue(str16, "this as java.lang.String…ing(startIndex, endIndex)");
                                                Log.println(3, str16, "retrieveState() called ");
                                            }
                                            str16 = (String) objectRef8.element;
                                            Log.println(3, str16, "retrieveState() called ");
                                        } else {
                                            str15 = str12;
                                        }
                                        file = new File(hsStateHandler.getResultDataDir(), str11 + ".json");
                                        if (file.exists()) {
                                            file = hsStateHandler.getHsDataFile();
                                        }
                                        HyperLogger.Level level5 = HyperLogger.Level.DEBUG;
                                        HyperLogger companion13 = HyperLogger.INSTANCE.getInstance();
                                        StringBuilder sb6 = new StringBuilder();
                                        objectRef3 = new Ref.ObjectRef();
                                        StackTraceElement[] stackTrace7 = new Throwable().getStackTrace();
                                        Intrinsics.checkNotNullExpressionValue(stackTrace7, str15);
                                        stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace7);
                                        if (stackTraceElement2 != null || (className13 = stackTraceElement2.getClassName()) == null) {
                                            str17 = str14;
                                            str18 = str15;
                                            str19 = "null cannot be cast to non-null type android.app.Application";
                                        } else {
                                            str17 = str14;
                                            str18 = str15;
                                            str19 = "null cannot be cast to non-null type android.app.Application";
                                            try {
                                                String substringAfterLast$default4 = StringsKt.substringAfterLast$default(className13, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                r15 = substringAfterLast$default4;
                                            } catch (Throwable th19) {
                                                hKMainActivity$startDocFlow$2 = this;
                                                th = th19;
                                                obj4 = null;
                                                z2 = true;
                                                z = false;
                                                Result.Companion companion722222222222 = Result.INSTANCE;
                                                m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                HKMainActivity hKMainActivity522222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                WorkflowUIState.DocCapture docCapture322222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                if (m1205exceptionOrNullimpl2 != null) {
                                                }
                                                return Result.m1201boximpl(m1202constructorimpl10);
                                            }
                                        }
                                        String canonicalName10 = (hsStateHandler != null || (cls14 = hsStateHandler.getClass()) == null) ? null : cls14.getCanonicalName();
                                        r15 = canonicalName10 != null ? obj3 : canonicalName10;
                                        objectRef3.element = r15;
                                        matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef3.element);
                                        if (matcher2.find()) {
                                            ?? replaceAll7 = matcher2.replaceAll("");
                                            Intrinsics.checkNotNullExpressionValue(replaceAll7, "replaceAll(\"\")");
                                            objectRef3.element = replaceAll7;
                                        }
                                        if (((String) objectRef3.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                            boolean z4 = false;
                                            try {
                                                str20 = ((String) objectRef3.element).substring(0, 23);
                                                Intrinsics.checkNotNullExpressionValue(str20, "this as java.lang.String…ing(startIndex, endIndex)");
                                                sb6.append(str20);
                                                sb6.append(" - ");
                                                StringBuilder sb7 = new StringBuilder();
                                                str21 = str2;
                                                sb7.append(str21);
                                                sb7.append(file.exists());
                                                sb2 = sb7.toString();
                                                if (sb2 == null) {
                                                    sb2 = "null ";
                                                }
                                                sb6.append(sb2);
                                                sb6.append(' ');
                                                sb6.append("");
                                                companion13.log(level5, sb6.toString());
                                                if (CoreExtsKt.isRelease()) {
                                                    try {
                                                        Result.Companion companion14 = Result.INSTANCE;
                                                        Object invoke4 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                                        str22 = str19;
                                                        try {
                                                            Intrinsics.checkNotNull(invoke4, str22);
                                                            m1202constructorimpl4 = Result.m1202constructorimpl(((Application) invoke4).getPackageName());
                                                        } catch (Throwable th20) {
                                                            th = th20;
                                                            Throwable th21 = th;
                                                            Result.Companion companion15 = Result.INSTANCE;
                                                            m1202constructorimpl4 = Result.m1202constructorimpl(ResultKt.createFailure(th21));
                                                            if (Result.m1208isFailureimpl(m1202constructorimpl4)) {
                                                            }
                                                            String str56 = (String) m1202constructorimpl4;
                                                            if (CoreExtsKt.isDebug()) {
                                                            }
                                                            if (file.exists()) {
                                                            }
                                                        }
                                                    } catch (Throwable th22) {
                                                        th = th22;
                                                        str22 = str19;
                                                    }
                                                    if (Result.m1208isFailureimpl(m1202constructorimpl4)) {
                                                        m1202constructorimpl4 = "";
                                                    }
                                                    String str562 = (String) m1202constructorimpl4;
                                                    if (CoreExtsKt.isDebug()) {
                                                        str23 = "null ";
                                                        str24 = str18;
                                                        str25 = str17;
                                                    } else {
                                                        String str57 = str17;
                                                        Intrinsics.checkNotNullExpressionValue(str562, str57);
                                                        str23 = "null ";
                                                        try {
                                                            if (StringsKt.contains$default((CharSequence) str562, charSequence, false, 2, (Object) null)) {
                                                                Ref.ObjectRef objectRef9 = new Ref.ObjectRef();
                                                                StackTraceElement[] stackTrace8 = new Throwable().getStackTrace();
                                                                str24 = str18;
                                                                Intrinsics.checkNotNullExpressionValue(stackTrace8, str24);
                                                                StackTraceElement stackTraceElement9 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace8);
                                                                if (stackTraceElement9 == null || (className4 = stackTraceElement9.getClassName()) == null) {
                                                                    str25 = str57;
                                                                } else {
                                                                    str25 = str57;
                                                                    try {
                                                                        r10 = StringsKt.substringAfterLast$default(className4, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                                    } catch (Throwable th23) {
                                                                        hKMainActivity$startDocFlow$2 = this;
                                                                        th = th23;
                                                                        obj4 = null;
                                                                        z2 = true;
                                                                        z = false;
                                                                        Result.Companion companion7222222222222 = Result.INSTANCE;
                                                                        m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                        HKMainActivity hKMainActivity5222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                        WorkflowUIState.DocCapture docCapture3222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                        if (m1205exceptionOrNullimpl2 != null) {
                                                                        }
                                                                        return Result.m1201boximpl(m1202constructorimpl10);
                                                                    }
                                                                }
                                                                r10 = (hsStateHandler == null || (cls5 = hsStateHandler.getClass()) == null) ? 0 : cls5.getCanonicalName();
                                                                if (r10 == 0) {
                                                                    r10 = obj3;
                                                                }
                                                                objectRef9.element = r10;
                                                                Matcher matcher10 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef9.element);
                                                                if (matcher10.find()) {
                                                                    ?? replaceAll8 = matcher10.replaceAll("");
                                                                    Intrinsics.checkNotNullExpressionValue(replaceAll8, "replaceAll(\"\")");
                                                                    objectRef9.element = replaceAll8;
                                                                }
                                                                if (((String) objectRef9.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                    z4 = false;
                                                                    str26 = ((String) objectRef9.element).substring(0, 23);
                                                                    Intrinsics.checkNotNullExpressionValue(str26, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                    StringBuilder sb8 = new StringBuilder();
                                                                    str27 = str21 + file.exists();
                                                                    if (str27 == null) {
                                                                        str27 = str23;
                                                                    }
                                                                    sb8.append(str27);
                                                                    sb8.append(' ');
                                                                    sb8.append("");
                                                                    Log.println(3, str26, sb8.toString());
                                                                }
                                                                str26 = (String) objectRef9.element;
                                                                StringBuilder sb82 = new StringBuilder();
                                                                str27 = str21 + file.exists();
                                                                if (str27 == null) {
                                                                }
                                                                sb82.append(str27);
                                                                sb82.append(' ');
                                                                sb82.append("");
                                                                Log.println(3, str26, sb82.toString());
                                                            } else {
                                                                str24 = str18;
                                                                str25 = str57;
                                                            }
                                                        } catch (Throwable th24) {
                                                            hKMainActivity$startDocFlow$2 = this;
                                                            th = th24;
                                                            z = false;
                                                            z2 = true;
                                                            obj4 = null;
                                                            Result.Companion companion72222222222222 = Result.INSTANCE;
                                                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                            HKMainActivity hKMainActivity52222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                            WorkflowUIState.DocCapture docCapture32222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                            if (m1205exceptionOrNullimpl2 != null) {
                                                            }
                                                            return Result.m1201boximpl(m1202constructorimpl10);
                                                        }
                                                    }
                                                } else {
                                                    str23 = "null ";
                                                    str24 = str18;
                                                    str25 = str17;
                                                    str22 = str19;
                                                }
                                            } catch (Throwable th25) {
                                                hKMainActivity$startDocFlow$2 = this;
                                                th = th25;
                                                z = z4;
                                                z2 = true;
                                                obj4 = null;
                                                Result.Companion companion722222222222222 = Result.INSTANCE;
                                                m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                HKMainActivity hKMainActivity522222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                WorkflowUIState.DocCapture docCapture322222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                if (m1205exceptionOrNullimpl2 != null) {
                                                }
                                                return Result.m1201boximpl(m1202constructorimpl10);
                                            }
                                            if (file.exists()) {
                                                try {
                                                    Result.Companion companion16 = Result.INSTANCE;
                                                    obj6 = hsStateHandler.getGson().fromJson(FilesKt.readText$default(file, null, 1, null), new HSStateHandler$retrieveState$3$type$1().getType());
                                                    try {
                                                        level2 = HyperLogger.Level.DEBUG;
                                                        companion2 = HyperLogger.INSTANCE.getInstance();
                                                        sb3 = new StringBuilder();
                                                        objectRef4 = new Ref.ObjectRef();
                                                        StackTraceElement[] stackTrace9 = new Throwable().getStackTrace();
                                                        Intrinsics.checkNotNullExpressionValue(stackTrace9, str24);
                                                        stackTraceElement3 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace9);
                                                    } catch (Throwable th26) {
                                                        th = th26;
                                                        str28 = str24;
                                                    }
                                                } catch (Throwable th27) {
                                                    str28 = str24;
                                                    str29 = str25;
                                                    th2 = th27;
                                                    obj6 = null;
                                                }
                                                if (stackTraceElement3 != null) {
                                                    try {
                                                        className9 = stackTraceElement3.getClassName();
                                                    } catch (Throwable th28) {
                                                        th2 = th28;
                                                        str28 = str24;
                                                        str29 = str25;
                                                        Result.Companion companion17 = Result.INSTANCE;
                                                        m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                                        m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                        if (m1205exceptionOrNullimpl != null) {
                                                        }
                                                        Object obj10 = obj7;
                                                        Intrinsics.checkNotNull(obj10, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                        Triple triple = (Triple) obj10;
                                                        hVError = (HVError) triple.component1();
                                                        HVResponse hVResponse = (HVResponse) triple.component2();
                                                        Object obj11 = (JSONObject) triple.component3();
                                                        if (hVError == null) {
                                                        }
                                                    }
                                                    if (className9 != null) {
                                                        str42 = str22;
                                                        str43 = str24;
                                                        try {
                                                            substringAfterLast$default = StringsKt.substringAfterLast$default(className9, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                        } catch (Throwable th29) {
                                                            th2 = th29;
                                                            str28 = str43;
                                                            str29 = str25;
                                                            str22 = str42;
                                                            Result.Companion companion172 = Result.INSTANCE;
                                                            m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                                            m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                            if (m1205exceptionOrNullimpl != null) {
                                                            }
                                                            Object obj102 = obj7;
                                                            Intrinsics.checkNotNull(obj102, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                            Triple triple2 = (Triple) obj102;
                                                            hVError = (HVError) triple2.component1();
                                                            HVResponse hVResponse2 = (HVResponse) triple2.component2();
                                                            Object obj112 = (JSONObject) triple2.component3();
                                                            if (hVError == null) {
                                                            }
                                                        }
                                                        if (substringAfterLast$default != null) {
                                                            r142 = substringAfterLast$default;
                                                            objectRef4.element = r142;
                                                            matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef4.element);
                                                            if (matcher4.find()) {
                                                                ?? replaceAll9 = matcher4.replaceAll("");
                                                                Intrinsics.checkNotNullExpressionValue(replaceAll9, "replaceAll(\"\")");
                                                                objectRef4.element = replaceAll9;
                                                            }
                                                            if (((String) objectRef4.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                str44 = ((String) objectRef4.element).substring(0, 23);
                                                                Intrinsics.checkNotNullExpressionValue(str44, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                sb3.append(str44);
                                                                sb3.append(" - ");
                                                                str45 = "retrieveState: hvData from file: " + obj6;
                                                                if (str45 == null) {
                                                                    str45 = str23;
                                                                }
                                                                sb3.append(str45);
                                                                sb3.append(' ');
                                                                sb3.append("");
                                                                companion2.log(level2, sb3.toString());
                                                                if (CoreExtsKt.isRelease()) {
                                                                    str28 = str43;
                                                                    str29 = str25;
                                                                    str22 = str42;
                                                                } else {
                                                                    try {
                                                                        Result.Companion companion18 = Result.INSTANCE;
                                                                        Object invoke5 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                                                        str22 = str42;
                                                                        try {
                                                                            Intrinsics.checkNotNull(invoke5, str22);
                                                                            m1202constructorimpl8 = Result.m1202constructorimpl(((Application) invoke5).getPackageName());
                                                                        } catch (Throwable th30) {
                                                                            th = th30;
                                                                            Throwable th31 = th;
                                                                            try {
                                                                                Result.Companion companion19 = Result.INSTANCE;
                                                                                m1202constructorimpl8 = Result.m1202constructorimpl(ResultKt.createFailure(th31));
                                                                                if (Result.m1208isFailureimpl(m1202constructorimpl8)) {
                                                                                }
                                                                                String str58 = (String) m1202constructorimpl8;
                                                                                if (CoreExtsKt.isDebug()) {
                                                                                }
                                                                                m1202constructorimpl5 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                                            } catch (Throwable th32) {
                                                                                th = th32;
                                                                                str28 = str43;
                                                                                str29 = str25;
                                                                                th2 = th;
                                                                                Result.Companion companion1722 = Result.INSTANCE;
                                                                                m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                                                                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                                                if (m1205exceptionOrNullimpl != null) {
                                                                                }
                                                                                Object obj1022 = obj7;
                                                                                Intrinsics.checkNotNull(obj1022, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                                                Triple triple22 = (Triple) obj1022;
                                                                                hVError = (HVError) triple22.component1();
                                                                                HVResponse hVResponse22 = (HVResponse) triple22.component2();
                                                                                Object obj1122 = (JSONObject) triple22.component3();
                                                                                if (hVError == null) {
                                                                                }
                                                                            }
                                                                            m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                                            if (m1205exceptionOrNullimpl != null) {
                                                                            }
                                                                            Object obj10222 = obj7;
                                                                            Intrinsics.checkNotNull(obj10222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                                            Triple triple222 = (Triple) obj10222;
                                                                            hVError = (HVError) triple222.component1();
                                                                            HVResponse hVResponse222 = (HVResponse) triple222.component2();
                                                                            Object obj11222 = (JSONObject) triple222.component3();
                                                                            if (hVError == null) {
                                                                            }
                                                                        }
                                                                    } catch (Throwable th33) {
                                                                        th = th33;
                                                                        str22 = str42;
                                                                    }
                                                                    if (Result.m1208isFailureimpl(m1202constructorimpl8)) {
                                                                        m1202constructorimpl8 = "";
                                                                    }
                                                                    String str582 = (String) m1202constructorimpl8;
                                                                    if (CoreExtsKt.isDebug()) {
                                                                        str28 = str43;
                                                                        str29 = str25;
                                                                    } else {
                                                                        str29 = str25;
                                                                        try {
                                                                            Intrinsics.checkNotNullExpressionValue(str582, str29);
                                                                            if (StringsKt.contains$default((CharSequence) str582, charSequence, false, 2, (Object) null)) {
                                                                                Ref.ObjectRef objectRef10 = new Ref.ObjectRef();
                                                                                StackTraceElement[] stackTrace10 = new Throwable().getStackTrace();
                                                                                str28 = str43;
                                                                                try {
                                                                                    Intrinsics.checkNotNullExpressionValue(stackTrace10, str28);
                                                                                    StackTraceElement stackTraceElement10 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace10);
                                                                                    if (stackTraceElement10 == null || (className10 = stackTraceElement10.getClassName()) == null || (canonicalName7 = StringsKt.substringAfterLast$default(className10, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == 0) {
                                                                                        canonicalName7 = (hsStateHandler == null || (cls10 = hsStateHandler.getClass()) == null) ? 0 : cls10.getCanonicalName();
                                                                                        if (canonicalName7 == 0) {
                                                                                            canonicalName7 = obj3;
                                                                                        }
                                                                                    }
                                                                                    objectRef10.element = canonicalName7;
                                                                                    Matcher matcher11 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef10.element);
                                                                                    if (matcher11.find()) {
                                                                                        ?? replaceAll10 = matcher11.replaceAll("");
                                                                                        Intrinsics.checkNotNullExpressionValue(replaceAll10, "replaceAll(\"\")");
                                                                                        objectRef10.element = replaceAll10;
                                                                                    }
                                                                                    if (((String) objectRef10.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                                        str46 = ((String) objectRef10.element).substring(0, 23);
                                                                                        Intrinsics.checkNotNullExpressionValue(str46, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                                        StringBuilder sb9 = new StringBuilder();
                                                                                        str47 = "retrieveState: hvData from file: " + obj6;
                                                                                        if (str47 == null) {
                                                                                            str47 = str23;
                                                                                        }
                                                                                        sb9.append(str47);
                                                                                        sb9.append(' ');
                                                                                        sb9.append("");
                                                                                        Log.println(3, str46, sb9.toString());
                                                                                    }
                                                                                    str46 = (String) objectRef10.element;
                                                                                    StringBuilder sb92 = new StringBuilder();
                                                                                    str47 = "retrieveState: hvData from file: " + obj6;
                                                                                    if (str47 == null) {
                                                                                    }
                                                                                    sb92.append(str47);
                                                                                    sb92.append(' ');
                                                                                    sb92.append("");
                                                                                    Log.println(3, str46, sb92.toString());
                                                                                } catch (Throwable th34) {
                                                                                    th = th34;
                                                                                    th2 = th;
                                                                                    Result.Companion companion17222 = Result.INSTANCE;
                                                                                    m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                                                                    m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                                                    if (m1205exceptionOrNullimpl != null) {
                                                                                    }
                                                                                    Object obj102222 = obj7;
                                                                                    Intrinsics.checkNotNull(obj102222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                                                    Triple triple2222 = (Triple) obj102222;
                                                                                    hVError = (HVError) triple2222.component1();
                                                                                    HVResponse hVResponse2222 = (HVResponse) triple2222.component2();
                                                                                    Object obj112222 = (JSONObject) triple2222.component3();
                                                                                    if (hVError == null) {
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                str28 = str43;
                                                                            }
                                                                        } catch (Throwable th35) {
                                                                            th = th35;
                                                                            str28 = str43;
                                                                            th2 = th;
                                                                            Result.Companion companion172222 = Result.INSTANCE;
                                                                            m1202constructorimpl5 = Result.m1202constructorimpl(ResultKt.createFailure(th2));
                                                                            m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                                            if (m1205exceptionOrNullimpl != null) {
                                                                            }
                                                                            Object obj1022222 = obj7;
                                                                            Intrinsics.checkNotNull(obj1022222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                                            Triple triple22222 = (Triple) obj1022222;
                                                                            hVError = (HVError) triple22222.component1();
                                                                            HVResponse hVResponse22222 = (HVResponse) triple22222.component2();
                                                                            Object obj1122222 = (JSONObject) triple22222.component3();
                                                                            if (hVError == null) {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                m1202constructorimpl5 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                                if (m1205exceptionOrNullimpl != null) {
                                                                    HyperLogger.Level level6 = HyperLogger.Level.ERROR;
                                                                    HyperLogger companion20 = HyperLogger.INSTANCE.getInstance();
                                                                    StringBuilder sb10 = new StringBuilder();
                                                                    Ref.ObjectRef objectRef11 = new Ref.ObjectRef();
                                                                    obj7 = obj6;
                                                                    StackTraceElement[] stackTrace11 = new Throwable().getStackTrace();
                                                                    Intrinsics.checkNotNullExpressionValue(stackTrace11, str28);
                                                                    StackTraceElement stackTraceElement11 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace11);
                                                                    if (stackTraceElement11 == null || (className8 = stackTraceElement11.getClassName()) == null) {
                                                                        str35 = str22;
                                                                        str36 = str29;
                                                                        str37 = str28;
                                                                    } else {
                                                                        str35 = str22;
                                                                        str36 = str29;
                                                                        str37 = str28;
                                                                        try {
                                                                            r22 = StringsKt.substringAfterLast$default(className8, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                                        } catch (Throwable th36) {
                                                                            hKMainActivity$startDocFlow$2 = this;
                                                                            th = th36;
                                                                            obj4 = null;
                                                                            z2 = true;
                                                                            z = false;
                                                                            Result.Companion companion7222222222222222 = Result.INSTANCE;
                                                                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                            HKMainActivity hKMainActivity5222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                            WorkflowUIState.DocCapture docCapture3222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                            if (m1205exceptionOrNullimpl2 != null) {
                                                                            }
                                                                            return Result.m1201boximpl(m1202constructorimpl10);
                                                                        }
                                                                    }
                                                                    r22 = (hsStateHandler == null || (cls9 = hsStateHandler.getClass()) == null) ? 0 : cls9.getCanonicalName();
                                                                    if (r22 == 0) {
                                                                        r22 = obj3;
                                                                    }
                                                                    objectRef11.element = r22;
                                                                    Matcher matcher12 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef11.element);
                                                                    if (matcher12.find()) {
                                                                        ?? replaceAll11 = matcher12.replaceAll("");
                                                                        Intrinsics.checkNotNullExpressionValue(replaceAll11, "replaceAll(\"\")");
                                                                        objectRef11.element = replaceAll11;
                                                                    }
                                                                    if (((String) objectRef11.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                        String str59 = (String) objectRef11.element;
                                                                        z = false;
                                                                        try {
                                                                            str38 = str59.substring(0, 23);
                                                                            Intrinsics.checkNotNullExpressionValue(str38, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                            sb10.append(str38);
                                                                            sb10.append(" - ");
                                                                            sb10.append("unable to retrieve hv_data state json from file");
                                                                            sb10.append(' ');
                                                                            localizedMessage = m1205exceptionOrNullimpl == null ? m1205exceptionOrNullimpl.getLocalizedMessage() : null;
                                                                            if (localizedMessage == null) {
                                                                                str39 = '\n' + localizedMessage;
                                                                            } else {
                                                                                str39 = "";
                                                                            }
                                                                            sb10.append(str39);
                                                                            companion20.log(level6, sb10.toString());
                                                                            CoreExtsKt.isRelease();
                                                                            Result.Companion companion21 = Result.INSTANCE;
                                                                            Object invoke6 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                                                            str22 = str35;
                                                                            Intrinsics.checkNotNull(invoke6, str22);
                                                                            m1202constructorimpl7 = Result.m1202constructorimpl(((Application) invoke6).getPackageName());
                                                                            if (Result.m1208isFailureimpl(m1202constructorimpl7)) {
                                                                                m1202constructorimpl7 = "";
                                                                            }
                                                                            String str60 = (String) m1202constructorimpl7;
                                                                            if (CoreExtsKt.isDebug()) {
                                                                                str29 = str36;
                                                                                Intrinsics.checkNotNullExpressionValue(str60, str29);
                                                                                try {
                                                                                    if (StringsKt.contains$default((CharSequence) str60, charSequence, false, 2, (Object) null)) {
                                                                                        Ref.ObjectRef objectRef12 = new Ref.ObjectRef();
                                                                                        StackTraceElement[] stackTrace12 = new Throwable().getStackTrace();
                                                                                        str28 = str37;
                                                                                        Intrinsics.checkNotNullExpressionValue(stackTrace12, str28);
                                                                                        StackTraceElement stackTraceElement12 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace12);
                                                                                        if (stackTraceElement12 != null && (className7 = stackTraceElement12.getClassName()) != null) {
                                                                                            obj4 = null;
                                                                                            try {
                                                                                                canonicalName6 = StringsKt.substringAfterLast$default(className7, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                                                            } catch (Throwable th37) {
                                                                                                hKMainActivity$startDocFlow$2 = this;
                                                                                                th = th37;
                                                                                                z2 = true;
                                                                                                z = false;
                                                                                                Result.Companion companion72222222222222222 = Result.INSTANCE;
                                                                                                m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                                                HKMainActivity hKMainActivity52222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                                                WorkflowUIState.DocCapture docCapture32222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                                                m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                                                if (m1205exceptionOrNullimpl2 != null) {
                                                                                                }
                                                                                                return Result.m1201boximpl(m1202constructorimpl10);
                                                                                            }
                                                                                        }
                                                                                        canonicalName6 = (hsStateHandler == null || (cls8 = hsStateHandler.getClass()) == null) ? 0 : cls8.getCanonicalName();
                                                                                        if (canonicalName6 == 0) {
                                                                                            canonicalName6 = obj3;
                                                                                        }
                                                                                        objectRef12.element = canonicalName6;
                                                                                        Matcher matcher13 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef12.element);
                                                                                        if (matcher13.find()) {
                                                                                            ?? replaceAll12 = matcher13.replaceAll("");
                                                                                            Intrinsics.checkNotNullExpressionValue(replaceAll12, "replaceAll(\"\")");
                                                                                            objectRef12.element = replaceAll12;
                                                                                        }
                                                                                        if (((String) objectRef12.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                                            z = false;
                                                                                            str40 = ((String) objectRef12.element).substring(0, 23);
                                                                                            Intrinsics.checkNotNullExpressionValue(str40, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                                            StringBuilder sb11 = new StringBuilder();
                                                                                            sb11.append("unable to retrieve hv_data state json from file");
                                                                                            sb11.append(' ');
                                                                                            localizedMessage2 = m1205exceptionOrNullimpl == null ? m1205exceptionOrNullimpl.getLocalizedMessage() : null;
                                                                                            if (localizedMessage2 == null) {
                                                                                                str41 = '\n' + localizedMessage2;
                                                                                            } else {
                                                                                                str41 = "";
                                                                                            }
                                                                                            sb11.append(str41);
                                                                                            Log.println(6, str40, sb11.toString());
                                                                                        }
                                                                                        str40 = (String) objectRef12.element;
                                                                                        StringBuilder sb112 = new StringBuilder();
                                                                                        sb112.append("unable to retrieve hv_data state json from file");
                                                                                        sb112.append(' ');
                                                                                        if (m1205exceptionOrNullimpl == null) {
                                                                                        }
                                                                                        if (localizedMessage2 == null) {
                                                                                        }
                                                                                        sb112.append(str41);
                                                                                        Log.println(6, str40, sb112.toString());
                                                                                    } else {
                                                                                        str28 = str37;
                                                                                    }
                                                                                } catch (Throwable th38) {
                                                                                    hKMainActivity$startDocFlow$2 = this;
                                                                                    th = th38;
                                                                                    z = false;
                                                                                    obj4 = null;
                                                                                    z2 = true;
                                                                                    Result.Companion companion722222222222222222 = Result.INSTANCE;
                                                                                    m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                                    HKMainActivity hKMainActivity522222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                                    WorkflowUIState.DocCapture docCapture322222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                                    m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                                    if (m1205exceptionOrNullimpl2 != null) {
                                                                                    }
                                                                                    return Result.m1201boximpl(m1202constructorimpl10);
                                                                                }
                                                                            } else {
                                                                                str28 = str37;
                                                                                str29 = str36;
                                                                            }
                                                                        } catch (Throwable th39) {
                                                                            hKMainActivity$startDocFlow$2 = this;
                                                                            th = th39;
                                                                            z2 = true;
                                                                            obj4 = null;
                                                                            Result.Companion companion7222222222222222222 = Result.INSTANCE;
                                                                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                            HKMainActivity hKMainActivity5222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                            WorkflowUIState.DocCapture docCapture3222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                            if (m1205exceptionOrNullimpl2 != null) {
                                                                            }
                                                                            return Result.m1201boximpl(m1202constructorimpl10);
                                                                        }
                                                                    }
                                                                    str38 = (String) objectRef11.element;
                                                                    sb10.append(str38);
                                                                    sb10.append(" - ");
                                                                    sb10.append("unable to retrieve hv_data state json from file");
                                                                    sb10.append(' ');
                                                                    if (m1205exceptionOrNullimpl == null) {
                                                                    }
                                                                    if (localizedMessage == null) {
                                                                    }
                                                                    sb10.append(str39);
                                                                    companion20.log(level6, sb10.toString());
                                                                    CoreExtsKt.isRelease();
                                                                    Result.Companion companion212 = Result.INSTANCE;
                                                                    Object invoke62 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                                                    str22 = str35;
                                                                    Intrinsics.checkNotNull(invoke62, str22);
                                                                    m1202constructorimpl7 = Result.m1202constructorimpl(((Application) invoke62).getPackageName());
                                                                    if (Result.m1208isFailureimpl(m1202constructorimpl7)) {
                                                                    }
                                                                    String str602 = (String) m1202constructorimpl7;
                                                                    if (CoreExtsKt.isDebug()) {
                                                                    }
                                                                } else {
                                                                    obj7 = obj6;
                                                                }
                                                                Object obj10222222 = obj7;
                                                                Intrinsics.checkNotNull(obj10222222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                                Triple triple222222 = (Triple) obj10222222;
                                                                hVError = (HVError) triple222222.component1();
                                                                HVResponse hVResponse222222 = (HVResponse) triple222222.component2();
                                                                Object obj11222222 = (JSONObject) triple222222.component3();
                                                                if (hVError == null) {
                                                                    throw new HSBridgeException(hVError, hVResponse222222);
                                                                }
                                                                if (hVResponse222222 != null || obj11222222 != null) {
                                                                    KClass orCreateKotlinClass = Reflection.getOrCreateKotlinClass(HyperKycData.DocData.class);
                                                                    if (Intrinsics.areEqual(orCreateKotlinClass, Reflection.getOrCreateKotlinClass(HyperKycData.FaceData.class))) {
                                                                        HyperKycData.FaceData.Companion companion22 = HyperKycData.FaceData.INSTANCE;
                                                                        Gson gson3 = hsStateHandler.getGson();
                                                                        Intrinsics.checkNotNull(hVResponse222222);
                                                                        obj11222222 = companion22.from$hyperkyc_release(gson3, hVResponse222222);
                                                                    } else if (Intrinsics.areEqual(orCreateKotlinClass, Reflection.getOrCreateKotlinClass(HyperKycData.DocData.class))) {
                                                                        HyperKycData.DocData.Companion companion23 = HyperKycData.DocData.INSTANCE;
                                                                        Gson gson4 = hsStateHandler.getGson();
                                                                        Intrinsics.checkNotNull(hVResponse222222);
                                                                        obj11222222 = companion23.from$hyperkyc_release(gson4, "", hVResponse222222);
                                                                    } else if (!Intrinsics.areEqual(orCreateKotlinClass, Reflection.getOrCreateKotlinClass(JSONObject.class))) {
                                                                        throw new NotImplementedError("An operation is not implemented: " + ("Not supported - " + HyperKycData.DocData.class.getCanonicalName()));
                                                                    }
                                                                    if (obj11222222 != null) {
                                                                        HyperKycData.DocData docData2 = (HyperKycData.DocData) obj11222222;
                                                                        docData2.setSide$hyperkyc_release(docCapture22.getSide());
                                                                        HyperLogger.Level level7 = HyperLogger.Level.DEBUG;
                                                                        HyperLogger companion24 = HyperLogger.INSTANCE.getInstance();
                                                                        StringBuilder sb12 = new StringBuilder();
                                                                        Ref.ObjectRef objectRef13 = new Ref.ObjectRef();
                                                                        StackTraceElement[] stackTrace13 = new Throwable().getStackTrace();
                                                                        Intrinsics.checkNotNullExpressionValue(stackTrace13, str28);
                                                                        StackTraceElement stackTraceElement13 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace13);
                                                                        if (stackTraceElement13 == null || (className6 = stackTraceElement13.getClassName()) == null) {
                                                                            str30 = str29;
                                                                            str31 = str28;
                                                                        } else {
                                                                            str30 = str29;
                                                                            str31 = str28;
                                                                            String substringAfterLast$default5 = StringsKt.substringAfterLast$default(className6, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                                            r14 = substringAfterLast$default5;
                                                                        }
                                                                        String canonicalName11 = (coroutineScope == null || (cls7 = coroutineScope.getClass()) == null) ? null : cls7.getCanonicalName();
                                                                        r14 = canonicalName11 == null ? obj3 : canonicalName11;
                                                                        objectRef13.element = r14;
                                                                        Matcher matcher14 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef13.element);
                                                                        if (matcher14.find()) {
                                                                            ?? replaceAll13 = matcher14.replaceAll("");
                                                                            Intrinsics.checkNotNullExpressionValue(replaceAll13, "replaceAll(\"\")");
                                                                            objectRef13.element = replaceAll13;
                                                                        }
                                                                        if (((String) objectRef13.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                            try {
                                                                                str32 = ((String) objectRef13.element).substring(0, 23);
                                                                                Intrinsics.checkNotNullExpressionValue(str32, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                                sb12.append(str32);
                                                                                sb12.append(" - ");
                                                                                str33 = "startDocFlow: docData : " + docData2;
                                                                                if (str33 == null) {
                                                                                    str33 = str23;
                                                                                }
                                                                                sb12.append(str33);
                                                                                sb12.append(' ');
                                                                                sb12.append("");
                                                                                companion24.log(level7, sb12.toString());
                                                                                if (!CoreExtsKt.isRelease()) {
                                                                                    try {
                                                                                        Result.Companion companion25 = Result.INSTANCE;
                                                                                        Object invoke7 = Class.forName("android.app.AppGlobals").getMethod("getInitialApplication", new Class[0]).invoke(null, new Object[0]);
                                                                                        Intrinsics.checkNotNull(invoke7, str22);
                                                                                        m1202constructorimpl6 = Result.m1202constructorimpl(((Application) invoke7).getPackageName());
                                                                                    } catch (Throwable th40) {
                                                                                        Result.Companion companion26 = Result.INSTANCE;
                                                                                        m1202constructorimpl6 = Result.m1202constructorimpl(ResultKt.createFailure(th40));
                                                                                    }
                                                                                    if (Result.m1208isFailureimpl(m1202constructorimpl6)) {
                                                                                        m1202constructorimpl6 = "";
                                                                                    }
                                                                                    String str61 = (String) m1202constructorimpl6;
                                                                                    if (CoreExtsKt.isDebug()) {
                                                                                        Intrinsics.checkNotNullExpressionValue(str61, str30);
                                                                                        try {
                                                                                            if (StringsKt.contains$default((CharSequence) str61, charSequence, false, 2, (Object) null)) {
                                                                                                Ref.ObjectRef objectRef14 = new Ref.ObjectRef();
                                                                                                StackTraceElement[] stackTrace14 = new Throwable().getStackTrace();
                                                                                                Intrinsics.checkNotNullExpressionValue(stackTrace14, str31);
                                                                                                StackTraceElement stackTraceElement14 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace14);
                                                                                                if (stackTraceElement14 == null || (className5 = stackTraceElement14.getClassName()) == null || (canonicalName5 = StringsKt.substringAfterLast$default(className5, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                                                                                    canonicalName5 = (coroutineScope == null || (cls6 = coroutineScope.getClass()) == null) ? null : cls6.getCanonicalName();
                                                                                                    if (canonicalName5 == null) {
                                                                                                        r152 = obj3;
                                                                                                        objectRef14.element = r152;
                                                                                                        matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef14.element);
                                                                                                        if (matcher3.find()) {
                                                                                                            ?? replaceAll14 = matcher3.replaceAll("");
                                                                                                            Intrinsics.checkNotNullExpressionValue(replaceAll14, "replaceAll(\"\")");
                                                                                                            objectRef14.element = replaceAll14;
                                                                                                        }
                                                                                                        if (((String) objectRef14.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                                                            str34 = ((String) objectRef14.element).substring(0, 23);
                                                                                                            Intrinsics.checkNotNullExpressionValue(str34, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                                                            StringBuilder sb13 = new StringBuilder();
                                                                                                            String str62 = "startDocFlow: docData : " + docData2;
                                                                                                            sb13.append(str62 != null ? str23 : str62);
                                                                                                            sb13.append(' ');
                                                                                                            sb13.append("");
                                                                                                            Log.println(3, str34, sb13.toString());
                                                                                                        }
                                                                                                        str34 = (String) objectRef14.element;
                                                                                                        StringBuilder sb132 = new StringBuilder();
                                                                                                        String str622 = "startDocFlow: docData : " + docData2;
                                                                                                        sb132.append(str622 != null ? str23 : str622);
                                                                                                        sb132.append(' ');
                                                                                                        sb132.append("");
                                                                                                        Log.println(3, str34, sb132.toString());
                                                                                                    }
                                                                                                }
                                                                                                r152 = canonicalName5;
                                                                                                objectRef14.element = r152;
                                                                                                matcher3 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef14.element);
                                                                                                if (matcher3.find()) {
                                                                                                }
                                                                                                if (((String) objectRef14.element).length() > 23) {
                                                                                                    str34 = ((String) objectRef14.element).substring(0, 23);
                                                                                                    Intrinsics.checkNotNullExpressionValue(str34, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                                                    StringBuilder sb1322 = new StringBuilder();
                                                                                                    String str6222 = "startDocFlow: docData : " + docData2;
                                                                                                    sb1322.append(str6222 != null ? str23 : str6222);
                                                                                                    sb1322.append(' ');
                                                                                                    sb1322.append("");
                                                                                                    Log.println(3, str34, sb1322.toString());
                                                                                                }
                                                                                                str34 = (String) objectRef14.element;
                                                                                                StringBuilder sb13222 = new StringBuilder();
                                                                                                String str62222 = "startDocFlow: docData : " + docData2;
                                                                                                sb13222.append(str62222 != null ? str23 : str62222);
                                                                                                sb13222.append(' ');
                                                                                                sb13222.append("");
                                                                                                Log.println(3, str34, sb13222.toString());
                                                                                            }
                                                                                        } catch (Throwable th41) {
                                                                                            hKMainActivity$startDocFlow$2 = this;
                                                                                            th = th41;
                                                                                            z = false;
                                                                                            obj4 = null;
                                                                                            z2 = true;
                                                                                            Result.Companion companion72222222222222222222 = Result.INSTANCE;
                                                                                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                                            HKMainActivity hKMainActivity52222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                                            WorkflowUIState.DocCapture docCapture32222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                                            if (m1205exceptionOrNullimpl2 != null) {
                                                                                            }
                                                                                            return Result.m1201boximpl(m1202constructorimpl10);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                docData = docData2;
                                                                                docCapture = docCapture22;
                                                                                hKMainActivity3 = hKMainActivity2;
                                                                                hKMainActivity$startDocFlow$2 = this;
                                                                                z = false;
                                                                                MainVM.updateDocData$hyperkyc_release$default(hKMainActivity3.getMainVM(), docCapture, docData, false, 4, null);
                                                                                HKMainActivity hKMainActivity6 = hKMainActivity3;
                                                                                LoadingFragment loadingFragment = new LoadingFragment();
                                                                                Pair[] pairArr = new Pair[1];
                                                                                textConfigs = docCapture.getTextConfigs();
                                                                                if (!(textConfigs instanceof Map)) {
                                                                                    textConfigs = null;
                                                                                }
                                                                                boolean z5 = false;
                                                                                pairArr[0] = TuplesKt.to("textConfigs", textConfigs);
                                                                                ActivityExtsKt.replaceContent$default(hKMainActivity6, loadingFragment, BundleKt.bundleOf(pairArr), false, null, 0, 28, null);
                                                                                responseBody = docData.getResponseBody();
                                                                            } catch (Throwable th42) {
                                                                                hKMainActivity$startDocFlow$2 = this;
                                                                                th = th42;
                                                                                z = false;
                                                                                z2 = true;
                                                                                obj4 = null;
                                                                                Result.Companion companion722222222222222222222 = Result.INSTANCE;
                                                                                m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                                HKMainActivity hKMainActivity522222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                                WorkflowUIState.DocCapture docCapture322222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                                m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                                if (m1205exceptionOrNullimpl2 != null) {
                                                                                }
                                                                                return Result.m1201boximpl(m1202constructorimpl10);
                                                                            }
                                                                            if (responseBody != null) {
                                                                                try {
                                                                                    result = responseBody.getResult();
                                                                                } catch (Throwable th43) {
                                                                                    th = th43;
                                                                                    th = th;
                                                                                    z2 = true;
                                                                                    z = false;
                                                                                    obj4 = null;
                                                                                    Result.Companion companion7222222222222222222222 = Result.INSTANCE;
                                                                                    m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                                    HKMainActivity hKMainActivity5222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                                    WorkflowUIState.DocCapture docCapture3222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                                    m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                                    if (m1205exceptionOrNullimpl2 != null) {
                                                                                    }
                                                                                    return Result.m1201boximpl(m1202constructorimpl10);
                                                                                }
                                                                                if (result != null && (details = result.getDetails()) != null) {
                                                                                    size = details.size();
                                                                                    boolean z6 = size <= 1;
                                                                                    z5 = false;
                                                                                    z2 = true;
                                                                                    boolean areEqual = Intrinsics.areEqual(hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.getShowEndState(), Boxing.boxBoolean(false)), Boxing.boxBoolean(true));
                                                                                    obj4 = null;
                                                                                    Boolean asBoolean$hyperkyc_release = hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.isSuccess(), null);
                                                                                    boolean z7 = (docData.isSuccess(docCapture.getAllowedStatusCodes()) || z6) ? false : true;
                                                                                    if (!docCapture.getDisableOCR()) {
                                                                                        try {
                                                                                            hKMainActivity3.flowForwardOrFinish();
                                                                                            z = false;
                                                                                        } catch (Throwable th44) {
                                                                                            th = th44;
                                                                                            z = false;
                                                                                            Result.Companion companion72222222222222222222222 = Result.INSTANCE;
                                                                                            m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                                            HKMainActivity hKMainActivity52222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                                            WorkflowUIState.DocCapture docCapture32222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                                            if (m1205exceptionOrNullimpl2 != null) {
                                                                                            }
                                                                                            return Result.m1201boximpl(m1202constructorimpl10);
                                                                                        }
                                                                                    } else if (areEqual) {
                                                                                        boolean z8 = z7;
                                                                                        final boolean z9 = z6;
                                                                                        z = false;
                                                                                        hKMainActivity3.updateEndState$hyperkyc_release(false, asBoolean$hyperkyc_release, z8, new Function0<Unit>() { // from class: co.hyperverge.hyperkyc.ui.HKMainActivity$startDocFlow$2$2$1
                                                                                            /* JADX INFO: Access modifiers changed from: package-private */
                                                                                            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                                                                                            {
                                                                                                super(0);
                                                                                            }

                                                                                            @Override // kotlin.jvm.functions.Function0
                                                                                            public /* bridge */ /* synthetic */ Unit invoke() {
                                                                                                invoke2();
                                                                                                return Unit.INSTANCE;
                                                                                            }

                                                                                            /* renamed from: invoke, reason: avoid collision after fix types in other method */
                                                                                            public final void invoke2() {
                                                                                                HKMainActivity$startDocFlow$2.invokeSuspend$lambda$5$failWithError(HKMainActivity.this, docData, z9);
                                                                                            }
                                                                                        });
                                                                                    } else {
                                                                                        z = false;
                                                                                        if (z7) {
                                                                                            hKMainActivity3.flowForwardOrFinish();
                                                                                        } else {
                                                                                            invokeSuspend$lambda$5$failWithError(hKMainActivity3, docData, z6);
                                                                                        }
                                                                                    }
                                                                                    m1202constructorimpl10 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                                                    HKMainActivity hKMainActivity522222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                                    WorkflowUIState.DocCapture docCapture322222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                                    m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                                    if (m1205exceptionOrNullimpl2 != null) {
                                                                                        Ref.ObjectRef objectRef15 = new Ref.ObjectRef();
                                                                                        Ref.IntRef intRef = new Ref.IntRef();
                                                                                        intRef.element = 104;
                                                                                        if (m1205exceptionOrNullimpl2 instanceof HSBridgeException) {
                                                                                            HSBridgeException hSBridgeException = (HSBridgeException) m1205exceptionOrNullimpl2;
                                                                                            HVResponse hvResponse = hSBridgeException.getHvResponse();
                                                                                            if (hvResponse != null) {
                                                                                                HyperKycData.DocData.Companion companion27 = HyperKycData.DocData.INSTANCE;
                                                                                                gson = hKMainActivity522222222222222222222222.getGson();
                                                                                                HyperKycData.DocData from$hyperkyc_release = companion27.from$hyperkyc_release(gson, docCapture322222222222222222222222.getSide(), hvResponse);
                                                                                                HVError hvError = hSBridgeException.getHvError();
                                                                                                if (hvError == null || hvError.getErrorCode() != 3) {
                                                                                                    z2 = z;
                                                                                                }
                                                                                                if (!z2) {
                                                                                                    MainVM.updateDocData$hyperkyc_release$default(hKMainActivity522222222222222222222222.getMainVM(), docCapture322222222222222222222222, from$hyperkyc_release, false, 4, null);
                                                                                                }
                                                                                                BaseResponse responseBody2 = from$hyperkyc_release.getResponseBody();
                                                                                                if (responseBody2 != null) {
                                                                                                    String errorMessage = responseBody2.errorMessage();
                                                                                                    r6 = errorMessage;
                                                                                                }
                                                                                                HVError hvError2 = hSBridgeException.getHvError();
                                                                                                String nullIfBlank = CoreExtsKt.nullIfBlank(hvError2 != null ? hvError2.getErrorMessage() : obj4);
                                                                                                r6 = nullIfBlank;
                                                                                                if (nullIfBlank == null) {
                                                                                                    StringBuilder sb14 = new StringBuilder();
                                                                                                    sb14.append("HV error ");
                                                                                                    HVError hvError3 = hSBridgeException.getHvError();
                                                                                                    if (hvError3 != null) {
                                                                                                        obj4 = Boxing.boxInt(hvError3.getErrorCode());
                                                                                                    }
                                                                                                    sb14.append(obj4);
                                                                                                    r6 = sb14.toString();
                                                                                                }
                                                                                                objectRef15.element = r6;
                                                                                                Unit unit = Unit.INSTANCE;
                                                                                            }
                                                                                            HVError hvError4 = hSBridgeException.getHvError();
                                                                                            if (hvError4 != null) {
                                                                                                intRef.element = hvError4.getErrorCode();
                                                                                                Unit unit2 = Unit.INSTANCE;
                                                                                            }
                                                                                        }
                                                                                        if (intRef.element == 12) {
                                                                                            hKMainActivity522222222222222222222222.handleDocModuleFailure(docCapture322222222222222222222222);
                                                                                        } else {
                                                                                            hKMainActivity522222222222222222222222.processHVBridgeError("startDocFlow", m1205exceptionOrNullimpl2, Boxing.boxInt(intRef.element), (String) objectRef15.element);
                                                                                        }
                                                                                    }
                                                                                    return Result.m1201boximpl(m1202constructorimpl10);
                                                                                }
                                                                            }
                                                                            size = 0;
                                                                            if (size <= 1) {
                                                                            }
                                                                            z5 = false;
                                                                            z2 = true;
                                                                            boolean areEqual2 = Intrinsics.areEqual(hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.getShowEndState(), Boxing.boxBoolean(false)), Boxing.boxBoolean(true));
                                                                            obj4 = null;
                                                                            Boolean asBoolean$hyperkyc_release2 = hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.isSuccess(), null);
                                                                            if (docData.isSuccess(docCapture.getAllowedStatusCodes())) {
                                                                            }
                                                                            if (!docCapture.getDisableOCR()) {
                                                                            }
                                                                            m1202constructorimpl10 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                                            HKMainActivity hKMainActivity5222222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                            WorkflowUIState.DocCapture docCapture3222222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                            m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                            if (m1205exceptionOrNullimpl2 != null) {
                                                                            }
                                                                            return Result.m1201boximpl(m1202constructorimpl10);
                                                                        }
                                                                        str32 = (String) objectRef13.element;
                                                                        sb12.append(str32);
                                                                        sb12.append(" - ");
                                                                        str33 = "startDocFlow: docData : " + docData2;
                                                                        if (str33 == null) {
                                                                        }
                                                                        sb12.append(str33);
                                                                        sb12.append(' ');
                                                                        sb12.append("");
                                                                        companion24.log(level7, sb12.toString());
                                                                        if (!CoreExtsKt.isRelease()) {
                                                                        }
                                                                        docData = docData2;
                                                                        docCapture = docCapture22;
                                                                        hKMainActivity3 = hKMainActivity2;
                                                                        hKMainActivity$startDocFlow$2 = this;
                                                                        z = false;
                                                                        MainVM.updateDocData$hyperkyc_release$default(hKMainActivity3.getMainVM(), docCapture, docData, false, 4, null);
                                                                        HKMainActivity hKMainActivity62 = hKMainActivity3;
                                                                        LoadingFragment loadingFragment2 = new LoadingFragment();
                                                                        Pair[] pairArr2 = new Pair[1];
                                                                        textConfigs = docCapture.getTextConfigs();
                                                                        if (!(textConfigs instanceof Map)) {
                                                                        }
                                                                        boolean z52 = false;
                                                                        pairArr2[0] = TuplesKt.to("textConfigs", textConfigs);
                                                                        ActivityExtsKt.replaceContent$default(hKMainActivity62, loadingFragment2, BundleKt.bundleOf(pairArr2), false, null, 0, 28, null);
                                                                        responseBody = docData.getResponseBody();
                                                                        if (responseBody != null) {
                                                                        }
                                                                        size = 0;
                                                                        if (size <= 1) {
                                                                        }
                                                                        z52 = false;
                                                                        z2 = true;
                                                                        boolean areEqual22 = Intrinsics.areEqual(hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.getShowEndState(), Boxing.boxBoolean(false)), Boxing.boxBoolean(true));
                                                                        obj4 = null;
                                                                        Boolean asBoolean$hyperkyc_release22 = hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.isSuccess(), null);
                                                                        if (docData.isSuccess(docCapture.getAllowedStatusCodes())) {
                                                                        }
                                                                        if (!docCapture.getDisableOCR()) {
                                                                        }
                                                                        m1202constructorimpl10 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                                        HKMainActivity hKMainActivity52222222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                        WorkflowUIState.DocCapture docCapture32222222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                        if (m1205exceptionOrNullimpl2 != null) {
                                                                        }
                                                                        return Result.m1201boximpl(m1202constructorimpl10);
                                                                    }
                                                                    throw new NullPointerException("null cannot be cast to non-null type co.hyperverge.hyperkyc.data.models.result.HyperKycData.DocData");
                                                                }
                                                                throw new HSBridgeException(new HVError(117, "Workflow ended because of low memory"), new HVResponse());
                                                            }
                                                            str44 = (String) objectRef4.element;
                                                            sb3.append(str44);
                                                            sb3.append(" - ");
                                                            str45 = "retrieveState: hvData from file: " + obj6;
                                                            if (str45 == null) {
                                                            }
                                                            sb3.append(str45);
                                                            sb3.append(' ');
                                                            sb3.append("");
                                                            companion2.log(level2, sb3.toString());
                                                            if (CoreExtsKt.isRelease()) {
                                                            }
                                                            m1202constructorimpl5 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                            m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                            if (m1205exceptionOrNullimpl != null) {
                                                            }
                                                            Object obj102222222 = obj7;
                                                            Intrinsics.checkNotNull(obj102222222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                            Triple triple2222222 = (Triple) obj102222222;
                                                            hVError = (HVError) triple2222222.component1();
                                                            HVResponse hVResponse2222222 = (HVResponse) triple2222222.component2();
                                                            Object obj112222222 = (JSONObject) triple2222222.component3();
                                                            if (hVError == null) {
                                                            }
                                                        }
                                                        String canonicalName12 = (hsStateHandler != null || (cls11 = hsStateHandler.getClass()) == null) ? null : cls11.getCanonicalName();
                                                        r142 = canonicalName12 != null ? obj3 : canonicalName12;
                                                        objectRef4.element = r142;
                                                        matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef4.element);
                                                        if (matcher4.find()) {
                                                        }
                                                        if (((String) objectRef4.element).length() > 23) {
                                                            str44 = ((String) objectRef4.element).substring(0, 23);
                                                            Intrinsics.checkNotNullExpressionValue(str44, "this as java.lang.String…ing(startIndex, endIndex)");
                                                            sb3.append(str44);
                                                            sb3.append(" - ");
                                                            str45 = "retrieveState: hvData from file: " + obj6;
                                                            if (str45 == null) {
                                                            }
                                                            sb3.append(str45);
                                                            sb3.append(' ');
                                                            sb3.append("");
                                                            companion2.log(level2, sb3.toString());
                                                            if (CoreExtsKt.isRelease()) {
                                                            }
                                                            m1202constructorimpl5 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                            m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                            if (m1205exceptionOrNullimpl != null) {
                                                            }
                                                            Object obj1022222222 = obj7;
                                                            Intrinsics.checkNotNull(obj1022222222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                            Triple triple22222222 = (Triple) obj1022222222;
                                                            hVError = (HVError) triple22222222.component1();
                                                            HVResponse hVResponse22222222 = (HVResponse) triple22222222.component2();
                                                            Object obj1122222222 = (JSONObject) triple22222222.component3();
                                                            if (hVError == null) {
                                                            }
                                                        }
                                                        str44 = (String) objectRef4.element;
                                                        sb3.append(str44);
                                                        sb3.append(" - ");
                                                        str45 = "retrieveState: hvData from file: " + obj6;
                                                        if (str45 == null) {
                                                        }
                                                        sb3.append(str45);
                                                        sb3.append(' ');
                                                        sb3.append("");
                                                        companion2.log(level2, sb3.toString());
                                                        if (CoreExtsKt.isRelease()) {
                                                        }
                                                        m1202constructorimpl5 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                        m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                        if (m1205exceptionOrNullimpl != null) {
                                                        }
                                                        Object obj10222222222 = obj7;
                                                        Intrinsics.checkNotNull(obj10222222222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                        Triple triple222222222 = (Triple) obj10222222222;
                                                        hVError = (HVError) triple222222222.component1();
                                                        HVResponse hVResponse222222222 = (HVResponse) triple222222222.component2();
                                                        Object obj11222222222 = (JSONObject) triple222222222.component3();
                                                        if (hVError == null) {
                                                        }
                                                    }
                                                }
                                                str42 = str22;
                                                str43 = str24;
                                                if (hsStateHandler != null) {
                                                }
                                                if (canonicalName12 != null) {
                                                }
                                                objectRef4.element = r142;
                                                matcher4 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef4.element);
                                                if (matcher4.find()) {
                                                }
                                                if (((String) objectRef4.element).length() > 23) {
                                                }
                                                str44 = (String) objectRef4.element;
                                                sb3.append(str44);
                                                sb3.append(" - ");
                                                str45 = "retrieveState: hvData from file: " + obj6;
                                                if (str45 == null) {
                                                }
                                                sb3.append(str45);
                                                sb3.append(' ');
                                                sb3.append("");
                                                companion2.log(level2, sb3.toString());
                                                if (CoreExtsKt.isRelease()) {
                                                }
                                                m1202constructorimpl5 = Result.m1202constructorimpl(Unit.INSTANCE);
                                                m1205exceptionOrNullimpl = Result.m1205exceptionOrNullimpl(m1202constructorimpl5);
                                                if (m1205exceptionOrNullimpl != null) {
                                                }
                                                Object obj102222222222 = obj7;
                                                Intrinsics.checkNotNull(obj102222222222, "null cannot be cast to non-null type kotlin.Triple<co.hyperverge.hypersnapsdk.objects.HVError?, co.hyperverge.hypersnapsdk.objects.HVResponse?, org.json.JSONObject?>");
                                                Triple triple2222222222 = (Triple) obj102222222222;
                                                hVError = (HVError) triple2222222222.component1();
                                                HVResponse hVResponse2222222222 = (HVResponse) triple2222222222.component2();
                                                Object obj112222222222 = (JSONObject) triple2222222222.component3();
                                                if (hVError == null) {
                                                }
                                            } else {
                                                String str63 = str24;
                                                String str64 = str25;
                                                HyperLogger.Level level8 = HyperLogger.Level.DEBUG;
                                                HyperLogger companion28 = HyperLogger.INSTANCE.getInstance();
                                                StringBuilder sb15 = new StringBuilder();
                                                Ref.ObjectRef objectRef16 = new Ref.ObjectRef();
                                                StackTraceElement[] stackTrace15 = new Throwable().getStackTrace();
                                                Intrinsics.checkNotNullExpressionValue(stackTrace15, str63);
                                                StackTraceElement stackTraceElement15 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace15);
                                                if (stackTraceElement15 == null || (className12 = stackTraceElement15.getClassName()) == null) {
                                                    str48 = str22;
                                                    str49 = "getInitialApplication";
                                                    str50 = str63;
                                                } else {
                                                    str48 = str22;
                                                    str49 = "getInitialApplication";
                                                    str50 = str63;
                                                    r3 = StringsKt.substringAfterLast$default(className12, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null);
                                                }
                                                r3 = (hsStateHandler == null || (cls13 = hsStateHandler.getClass()) == null) ? 0 : cls13.getCanonicalName();
                                                if (r3 == 0) {
                                                    r3 = obj3;
                                                }
                                                objectRef16.element = r3;
                                                Matcher matcher15 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef16.element);
                                                if (matcher15.find()) {
                                                    ?? replaceAll15 = matcher15.replaceAll("");
                                                    Intrinsics.checkNotNullExpressionValue(replaceAll15, "replaceAll(\"\")");
                                                    objectRef16.element = replaceAll15;
                                                }
                                                if (((String) objectRef16.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                    try {
                                                        str51 = ((String) objectRef16.element).substring(0, 23);
                                                        Intrinsics.checkNotNullExpressionValue(str51, "this as java.lang.String…ing(startIndex, endIndex)");
                                                        sb15.append(str51);
                                                        sb15.append(" - ");
                                                        str52 = str21 + file.exists();
                                                        if (str52 == null) {
                                                            str52 = str23;
                                                        }
                                                        sb15.append(str52);
                                                        sb15.append(' ');
                                                        sb15.append("");
                                                        companion28.log(level8, sb15.toString());
                                                        if (!CoreExtsKt.isRelease()) {
                                                            try {
                                                                Result.Companion companion29 = Result.INSTANCE;
                                                                Object invoke8 = Class.forName("android.app.AppGlobals").getMethod(str49, new Class[0]).invoke(null, new Object[0]);
                                                                Intrinsics.checkNotNull(invoke8, str48);
                                                                m1202constructorimpl9 = Result.m1202constructorimpl(((Application) invoke8).getPackageName());
                                                            } catch (Throwable th45) {
                                                                Result.Companion companion30 = Result.INSTANCE;
                                                                m1202constructorimpl9 = Result.m1202constructorimpl(ResultKt.createFailure(th45));
                                                            }
                                                            if (Result.m1208isFailureimpl(m1202constructorimpl9)) {
                                                                m1202constructorimpl9 = "";
                                                            }
                                                            String str65 = (String) m1202constructorimpl9;
                                                            if (CoreExtsKt.isDebug()) {
                                                                Intrinsics.checkNotNullExpressionValue(str65, str64);
                                                                try {
                                                                    if (StringsKt.contains$default((CharSequence) str65, charSequence, false, 2, (Object) null)) {
                                                                        Ref.ObjectRef objectRef17 = new Ref.ObjectRef();
                                                                        StackTraceElement[] stackTrace16 = new Throwable().getStackTrace();
                                                                        Intrinsics.checkNotNullExpressionValue(stackTrace16, str50);
                                                                        StackTraceElement stackTraceElement16 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace16);
                                                                        if (stackTraceElement16 == null || (className11 = stackTraceElement16.getClassName()) == null || (substringAfterLast$default2 = StringsKt.substringAfterLast$default(className11, FilenameUtils.EXTENSION_SEPARATOR, (String) null, 2, (Object) null)) == null) {
                                                                            canonicalName8 = (hsStateHandler == null || (cls12 = hsStateHandler.getClass()) == null) ? 0 : cls12.getCanonicalName();
                                                                            if (canonicalName8 == 0) {
                                                                                canonicalName8 = obj3;
                                                                            }
                                                                        } else {
                                                                            canonicalName8 = substringAfterLast$default2;
                                                                        }
                                                                        objectRef17.element = canonicalName8;
                                                                        Matcher matcher16 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef17.element);
                                                                        if (matcher16.find()) {
                                                                            ?? replaceAll16 = matcher16.replaceAll("");
                                                                            Intrinsics.checkNotNullExpressionValue(replaceAll16, "replaceAll(\"\")");
                                                                            objectRef17.element = replaceAll16;
                                                                        }
                                                                        if (((String) objectRef17.element).length() > 23 && Build.VERSION.SDK_INT < 26) {
                                                                            str53 = ((String) objectRef17.element).substring(0, 23);
                                                                            Intrinsics.checkNotNullExpressionValue(str53, "this as java.lang.String…ing(startIndex, endIndex)");
                                                                            StringBuilder sb16 = new StringBuilder();
                                                                            String str66 = str21 + file.exists();
                                                                            sb16.append(str66 != null ? str23 : str66);
                                                                            sb16.append(' ');
                                                                            sb16.append("");
                                                                            Log.println(3, str53, sb16.toString());
                                                                        }
                                                                        str53 = (String) objectRef17.element;
                                                                        StringBuilder sb162 = new StringBuilder();
                                                                        String str662 = str21 + file.exists();
                                                                        sb162.append(str662 != null ? str23 : str662);
                                                                        sb162.append(' ');
                                                                        sb162.append("");
                                                                        Log.println(3, str53, sb162.toString());
                                                                    }
                                                                } catch (Throwable th46) {
                                                                    hKMainActivity$startDocFlow$2 = this;
                                                                    th = th46;
                                                                    z = false;
                                                                    obj4 = null;
                                                                    z2 = true;
                                                                    Result.Companion companion722222222222222222222222 = Result.INSTANCE;
                                                                    m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                                    HKMainActivity hKMainActivity522222222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                                    WorkflowUIState.DocCapture docCapture322222222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                                    m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                                    if (m1205exceptionOrNullimpl2 != null) {
                                                                    }
                                                                    return Result.m1201boximpl(m1202constructorimpl10);
                                                                }
                                                            }
                                                        }
                                                        throw new HSBridgeException(new HVError(117, "Workflow ended because of low memory"), new HVResponse());
                                                    } catch (Throwable th47) {
                                                        hKMainActivity$startDocFlow$2 = this;
                                                        th = th47;
                                                        z = false;
                                                        z2 = true;
                                                        obj4 = null;
                                                        Result.Companion companion7222222222222222222222222 = Result.INSTANCE;
                                                        m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                                                        HKMainActivity hKMainActivity5222222222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                                                        WorkflowUIState.DocCapture docCapture3222222222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                                                        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                                                        if (m1205exceptionOrNullimpl2 != null) {
                                                        }
                                                        return Result.m1201boximpl(m1202constructorimpl10);
                                                    }
                                                }
                                                str51 = (String) objectRef16.element;
                                                sb15.append(str51);
                                                sb15.append(" - ");
                                                str52 = str21 + file.exists();
                                                if (str52 == null) {
                                                }
                                                sb15.append(str52);
                                                sb15.append(' ');
                                                sb15.append("");
                                                companion28.log(level8, sb15.toString());
                                                if (!CoreExtsKt.isRelease()) {
                                                }
                                                throw new HSBridgeException(new HVError(117, "Workflow ended because of low memory"), new HVResponse());
                                            }
                                        }
                                        str20 = (String) objectRef3.element;
                                        sb6.append(str20);
                                        sb6.append(" - ");
                                        StringBuilder sb72 = new StringBuilder();
                                        str21 = str2;
                                        sb72.append(str21);
                                        sb72.append(file.exists());
                                        sb2 = sb72.toString();
                                        if (sb2 == null) {
                                        }
                                        sb6.append(sb2);
                                        sb6.append(' ');
                                        sb6.append("");
                                        companion13.log(level5, sb6.toString());
                                        if (CoreExtsKt.isRelease()) {
                                        }
                                        if (file.exists()) {
                                        }
                                    }
                                }
                                str15 = str12;
                                str14 = str10;
                                file = new File(hsStateHandler.getResultDataDir(), str11 + ".json");
                                if (file.exists()) {
                                }
                                HyperLogger.Level level52 = HyperLogger.Level.DEBUG;
                                HyperLogger companion132 = HyperLogger.INSTANCE.getInstance();
                                StringBuilder sb62 = new StringBuilder();
                                objectRef3 = new Ref.ObjectRef();
                                StackTraceElement[] stackTrace72 = new Throwable().getStackTrace();
                                Intrinsics.checkNotNullExpressionValue(stackTrace72, str15);
                                stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace72);
                                if (stackTraceElement2 != null) {
                                }
                                str17 = str14;
                                str18 = str15;
                                str19 = "null cannot be cast to non-null type android.app.Application";
                                if (hsStateHandler != null) {
                                }
                                if (canonicalName10 != null) {
                                }
                                objectRef3.element = r15;
                                matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef3.element);
                                if (matcher2.find()) {
                                }
                                if (((String) objectRef3.element).length() > 23) {
                                    boolean z42 = false;
                                    str20 = ((String) objectRef3.element).substring(0, 23);
                                    Intrinsics.checkNotNullExpressionValue(str20, "this as java.lang.String…ing(startIndex, endIndex)");
                                    sb62.append(str20);
                                    sb62.append(" - ");
                                    StringBuilder sb722 = new StringBuilder();
                                    str21 = str2;
                                    sb722.append(str21);
                                    sb722.append(file.exists());
                                    sb2 = sb722.toString();
                                    if (sb2 == null) {
                                    }
                                    sb62.append(sb2);
                                    sb62.append(' ');
                                    sb62.append("");
                                    companion132.log(level52, sb62.toString());
                                    if (CoreExtsKt.isRelease()) {
                                    }
                                    if (file.exists()) {
                                    }
                                }
                                str20 = (String) objectRef3.element;
                                sb62.append(str20);
                                sb62.append(" - ");
                                StringBuilder sb7222 = new StringBuilder();
                                str21 = str2;
                                sb7222.append(str21);
                                sb7222.append(file.exists());
                                sb2 = sb7222.toString();
                                if (sb2 == null) {
                                }
                                sb62.append(sb2);
                                sb62.append(' ');
                                sb62.append("");
                                companion132.log(level52, sb62.toString());
                                if (CoreExtsKt.isRelease()) {
                                }
                                if (file.exists()) {
                                }
                            }
                            str13 = (String) objectRef2.element;
                            sb5.append(str13);
                            sb5.append(" - ");
                            sb5.append("retrieveState() called");
                            sb5.append(' ');
                            sb5.append("");
                            companion10.log(level4, sb5.toString());
                            if (!CoreExtsKt.isRelease()) {
                            }
                            str15 = str12;
                            str14 = str10;
                            file = new File(hsStateHandler.getResultDataDir(), str11 + ".json");
                            if (file.exists()) {
                            }
                            HyperLogger.Level level522 = HyperLogger.Level.DEBUG;
                            HyperLogger companion1322 = HyperLogger.INSTANCE.getInstance();
                            StringBuilder sb622 = new StringBuilder();
                            objectRef3 = new Ref.ObjectRef();
                            StackTraceElement[] stackTrace722 = new Throwable().getStackTrace();
                            Intrinsics.checkNotNullExpressionValue(stackTrace722, str15);
                            stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace722);
                            if (stackTraceElement2 != null) {
                            }
                            str17 = str14;
                            str18 = str15;
                            str19 = "null cannot be cast to non-null type android.app.Application";
                            if (hsStateHandler != null) {
                            }
                            if (canonicalName10 != null) {
                            }
                            objectRef3.element = r15;
                            matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef3.element);
                            if (matcher2.find()) {
                            }
                            if (((String) objectRef3.element).length() > 23) {
                            }
                            str20 = (String) objectRef3.element;
                            sb622.append(str20);
                            sb622.append(" - ");
                            StringBuilder sb72222 = new StringBuilder();
                            str21 = str2;
                            sb72222.append(str21);
                            sb72222.append(file.exists());
                            sb2 = sb72222.toString();
                            if (sb2 == null) {
                            }
                            sb622.append(sb2);
                            sb622.append(' ');
                            sb622.append("");
                            companion1322.log(level522, sb622.toString());
                            if (CoreExtsKt.isRelease()) {
                            }
                            if (file.exists()) {
                            }
                        }
                    }
                    str8 = str5;
                    str7 = str4;
                    hKMainActivity2.getMainVM().getHsStateHandler().setActivityRecreated(false);
                    hsStateHandler = hKMainActivity2.getMainVM().getHsStateHandler();
                    tag = docCapture22.getTag();
                    HyperLogger.Level level42 = HyperLogger.Level.DEBUG;
                    HyperLogger companion102 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb52 = new StringBuilder();
                    objectRef2 = new Ref.ObjectRef();
                    StackTraceElement[] stackTrace52 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace52, str8);
                    stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace52);
                    if (stackTraceElement != null) {
                    }
                    str10 = str7;
                    str11 = tag;
                    str12 = str8;
                    if (hsStateHandler != null) {
                    }
                    if (canonicalName9 == null) {
                    }
                    objectRef2.element = r4;
                    matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef2.element);
                    if (matcher.find()) {
                    }
                    if (((String) objectRef2.element).length() > 23) {
                        boolean z32 = false;
                        str13 = ((String) objectRef2.element).substring(0, 23);
                        Intrinsics.checkNotNullExpressionValue(str13, "this as java.lang.String…ing(startIndex, endIndex)");
                        sb52.append(str13);
                        sb52.append(" - ");
                        sb52.append("retrieveState() called");
                        sb52.append(' ');
                        sb52.append("");
                        companion102.log(level42, sb52.toString());
                        if (!CoreExtsKt.isRelease()) {
                        }
                        str15 = str12;
                        str14 = str10;
                        file = new File(hsStateHandler.getResultDataDir(), str11 + ".json");
                        if (file.exists()) {
                        }
                        HyperLogger.Level level5222 = HyperLogger.Level.DEBUG;
                        HyperLogger companion13222 = HyperLogger.INSTANCE.getInstance();
                        StringBuilder sb6222 = new StringBuilder();
                        objectRef3 = new Ref.ObjectRef();
                        StackTraceElement[] stackTrace7222 = new Throwable().getStackTrace();
                        Intrinsics.checkNotNullExpressionValue(stackTrace7222, str15);
                        stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace7222);
                        if (stackTraceElement2 != null) {
                        }
                        str17 = str14;
                        str18 = str15;
                        str19 = "null cannot be cast to non-null type android.app.Application";
                        if (hsStateHandler != null) {
                        }
                        if (canonicalName10 != null) {
                        }
                        objectRef3.element = r15;
                        matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef3.element);
                        if (matcher2.find()) {
                        }
                        if (((String) objectRef3.element).length() > 23) {
                        }
                        str20 = (String) objectRef3.element;
                        sb6222.append(str20);
                        sb6222.append(" - ");
                        StringBuilder sb722222 = new StringBuilder();
                        str21 = str2;
                        sb722222.append(str21);
                        sb722222.append(file.exists());
                        sb2 = sb722222.toString();
                        if (sb2 == null) {
                        }
                        sb6222.append(sb2);
                        sb6222.append(' ');
                        sb6222.append("");
                        companion13222.log(level5222, sb6222.toString());
                        if (CoreExtsKt.isRelease()) {
                        }
                        if (file.exists()) {
                        }
                    }
                    str13 = (String) objectRef2.element;
                    sb52.append(str13);
                    sb52.append(" - ");
                    sb52.append("retrieveState() called");
                    sb52.append(' ');
                    sb52.append("");
                    companion102.log(level42, sb52.toString());
                    if (!CoreExtsKt.isRelease()) {
                    }
                    str15 = str12;
                    str14 = str10;
                    file = new File(hsStateHandler.getResultDataDir(), str11 + ".json");
                    if (file.exists()) {
                    }
                    HyperLogger.Level level52222 = HyperLogger.Level.DEBUG;
                    HyperLogger companion132222 = HyperLogger.INSTANCE.getInstance();
                    StringBuilder sb62222 = new StringBuilder();
                    objectRef3 = new Ref.ObjectRef();
                    StackTraceElement[] stackTrace72222 = new Throwable().getStackTrace();
                    Intrinsics.checkNotNullExpressionValue(stackTrace72222, str15);
                    stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace72222);
                    if (stackTraceElement2 != null) {
                    }
                    str17 = str14;
                    str18 = str15;
                    str19 = "null cannot be cast to non-null type android.app.Application";
                    if (hsStateHandler != null) {
                    }
                    if (canonicalName10 != null) {
                    }
                    objectRef3.element = r15;
                    matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef3.element);
                    if (matcher2.find()) {
                    }
                    if (((String) objectRef3.element).length() > 23) {
                    }
                    str20 = (String) objectRef3.element;
                    sb62222.append(str20);
                    sb62222.append(" - ");
                    StringBuilder sb7222222 = new StringBuilder();
                    str21 = str2;
                    sb7222222.append(str21);
                    sb7222222.append(file.exists());
                    sb2 = sb7222222.toString();
                    if (sb2 == null) {
                    }
                    sb62222.append(sb2);
                    sb62222.append(' ');
                    sb62222.append("");
                    companion132222.log(level52222, sb62222.toString());
                    if (CoreExtsKt.isRelease()) {
                    }
                    if (file.exists()) {
                    }
                }
                str6 = (String) objectRef.element;
                sb.append(str6);
                sb.append(" - ");
                sb.append("startDocFlow: retrieving saved docData state");
                sb.append(' ');
                sb.append("");
                companion.log(level, sb.toString());
                if (!CoreExtsKt.isRelease()) {
                }
                str8 = str5;
                str7 = str4;
                hKMainActivity2.getMainVM().getHsStateHandler().setActivityRecreated(false);
                hsStateHandler = hKMainActivity2.getMainVM().getHsStateHandler();
                tag = docCapture22.getTag();
                HyperLogger.Level level422 = HyperLogger.Level.DEBUG;
                HyperLogger companion1022 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb522 = new StringBuilder();
                objectRef2 = new Ref.ObjectRef();
                StackTraceElement[] stackTrace522 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace522, str8);
                stackTraceElement = (StackTraceElement) ArraysKt.firstOrNull(stackTrace522);
                if (stackTraceElement != null) {
                }
                str10 = str7;
                str11 = tag;
                str12 = str8;
                if (hsStateHandler != null) {
                }
                if (canonicalName9 == null) {
                }
                objectRef2.element = r4;
                matcher = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef2.element);
                if (matcher.find()) {
                }
                if (((String) objectRef2.element).length() > 23) {
                }
                str13 = (String) objectRef2.element;
                sb522.append(str13);
                sb522.append(" - ");
                sb522.append("retrieveState() called");
                sb522.append(' ');
                sb522.append("");
                companion1022.log(level422, sb522.toString());
                if (!CoreExtsKt.isRelease()) {
                }
                str15 = str12;
                str14 = str10;
                file = new File(hsStateHandler.getResultDataDir(), str11 + ".json");
                if (file.exists()) {
                }
                HyperLogger.Level level522222 = HyperLogger.Level.DEBUG;
                HyperLogger companion1322222 = HyperLogger.INSTANCE.getInstance();
                StringBuilder sb622222 = new StringBuilder();
                objectRef3 = new Ref.ObjectRef();
                StackTraceElement[] stackTrace722222 = new Throwable().getStackTrace();
                Intrinsics.checkNotNullExpressionValue(stackTrace722222, str15);
                stackTraceElement2 = (StackTraceElement) ArraysKt.firstOrNull(stackTrace722222);
                if (stackTraceElement2 != null) {
                }
                str17 = str14;
                str18 = str15;
                str19 = "null cannot be cast to non-null type android.app.Application";
                if (hsStateHandler != null) {
                }
                if (canonicalName10 != null) {
                }
                objectRef3.element = r15;
                matcher2 = LogExtsKt.ANON_CLASS_PATTERN.matcher((CharSequence) objectRef3.element);
                if (matcher2.find()) {
                }
                if (((String) objectRef3.element).length() > 23) {
                }
                str20 = (String) objectRef3.element;
                sb622222.append(str20);
                sb622222.append(" - ");
                StringBuilder sb72222222 = new StringBuilder();
                str21 = str2;
                sb72222222.append(str21);
                sb72222222.append(file.exists());
                sb2 = sb72222222.toString();
                if (sb2 == null) {
                }
                sb622222.append(sb2);
                sb622222.append(' ');
                sb622222.append("");
                companion1322222.log(level522222, sb622222.toString());
                if (CoreExtsKt.isRelease()) {
                }
                if (file.exists()) {
                }
            }
        } else {
            if (i != 1) {
                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
            WorkflowUIState.DocCapture docCapture4 = (WorkflowUIState.DocCapture) this.L$1;
            hKMainActivity3 = (HKMainActivity) this.L$0;
            try {
                ResultKt.throwOnFailure(obj);
                docCapture = docCapture4;
                hKMainActivity$startDocFlow$2 = this;
                performDocCapture = obj;
            } catch (Throwable th48) {
                th = th48;
                hKMainActivity$startDocFlow$2 = this;
                obj4 = null;
                z = false;
                th = th;
                Result.Companion companion72222222222222222222222222 = Result.INSTANCE;
                m1202constructorimpl10 = Result.m1202constructorimpl(ResultKt.createFailure(th));
                HKMainActivity hKMainActivity52222222222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
                WorkflowUIState.DocCapture docCapture32222222222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
                m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
                if (m1205exceptionOrNullimpl2 != null) {
                }
                return Result.m1201boximpl(m1202constructorimpl10);
            }
        }
        HyperKycData.DocData.Companion companion31 = HyperKycData.DocData.INSTANCE;
        gson2 = hKMainActivity3.getGson();
        docData = companion31.from$hyperkyc_release(gson2, docCapture.getSide(), (HVResponse) performDocCapture);
        z = false;
        MainVM.updateDocData$hyperkyc_release$default(hKMainActivity3.getMainVM(), docCapture, docData, false, 4, null);
        HKMainActivity hKMainActivity622 = hKMainActivity3;
        LoadingFragment loadingFragment22 = new LoadingFragment();
        Pair[] pairArr22 = new Pair[1];
        textConfigs = docCapture.getTextConfigs();
        if (!(textConfigs instanceof Map)) {
        }
        boolean z522 = false;
        pairArr22[0] = TuplesKt.to("textConfigs", textConfigs);
        ActivityExtsKt.replaceContent$default(hKMainActivity622, loadingFragment22, BundleKt.bundleOf(pairArr22), false, null, 0, 28, null);
        responseBody = docData.getResponseBody();
        if (responseBody != null) {
        }
        size = 0;
        if (size <= 1) {
        }
        z522 = false;
        z2 = true;
        boolean areEqual222 = Intrinsics.areEqual(hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.getShowEndState(), Boxing.boxBoolean(false)), Boxing.boxBoolean(true));
        obj4 = null;
        Boolean asBoolean$hyperkyc_release222 = hKMainActivity3.getMainVM().asBoolean$hyperkyc_release(docCapture.isSuccess(), null);
        if (docData.isSuccess(docCapture.getAllowedStatusCodes())) {
        }
        if (!docCapture.getDisableOCR()) {
        }
        m1202constructorimpl10 = Result.m1202constructorimpl(Unit.INSTANCE);
        HKMainActivity hKMainActivity522222222222222222222222222222 = hKMainActivity$startDocFlow$2.this$0;
        WorkflowUIState.DocCapture docCapture322222222222222222222222222222 = hKMainActivity$startDocFlow$2.$docFlowUIState;
        m1205exceptionOrNullimpl2 = Result.m1205exceptionOrNullimpl(m1202constructorimpl10);
        if (m1205exceptionOrNullimpl2 != null) {
        }
        return Result.m1201boximpl(m1202constructorimpl10);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static final void invokeSuspend$lambda$5$failWithError(HKMainActivity hKMainActivity, HyperKycData.DocData docData, boolean z) {
        String str;
        BaseResponse responseBody = docData.getResponseBody();
        if (responseBody == null || (str = responseBody.errorMessage()) == null) {
            str = z ? "Multiple documents detected, please try again!" : "Doc capture failed!";
        }
        HKMainActivity.processHVBridgeError$default(hKMainActivity, "startDocFlow", new Throwable(str), 104, null, 8, null);
    }
}

package com.google.zxing.maxicode.decoder;

import androidx.constraintlayout.core.motion.utils.TypedValues;
import androidx.media3.exoplayer.RendererCapabilities;
import androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;
import androidx.media3.extractor.ts.PsExtractor;
import com.facebook.internal.FacebookRequestErrorClassification;
import com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet;
import com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet;
import com.google.firebase.database.core.ValidationPath;
import com.google.mlkit.common.MlKitException;
import com.google.zxing.common.BitMatrix;
import io.grpc.internal.GrpcUtil;
import io.sentry.HttpStatusCodeRange;
import org.bouncycastle.crypto.tls.CipherSuite;
import org.bouncycastle.math.Primes;
import org.jmrtd.cbeff.ISO781611;

/* loaded from: classes4.dex */
final class BitMatrixParser {
    private static final int[][] BITNR = {new int[]{121, 120, 127, 126, 133, CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA, 139, 138, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA, 151, CipherSuite.TLS_RSA_WITH_SEED_CBC_SHA, CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_PSK_WITH_AES_256_GCM_SHA384, 168, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA384, CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA256, CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA384, 180, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256, CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256, 192, 199, 198, -2, -2}, new int[]{123, 122, 129, 128, 135, 134, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_RC4_128_SHA, 153, CipherSuite.TLS_DH_RSA_WITH_SEED_CBC_SHA, CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, 158, CipherSuite.TLS_DH_DSS_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DHE_PSK_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_PSK_WITH_NULL_SHA384, CipherSuite.TLS_PSK_WITH_NULL_SHA256, CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA384, CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA256, 189, 188, CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256, CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256, 201, 200, 816, -3}, new int[]{125, 124, ISO781611.CREATION_DATE_AND_TIME_TAG, 130, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA, 136, CipherSuite.TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA, 142, CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA, CipherSuite.TLS_DH_anon_WITH_SEED_CBC_SHA, CipherSuite.TLS_DHE_RSA_WITH_SEED_CBC_SHA, CipherSuite.TLS_DH_RSA_WITH_AES_256_GCM_SHA384, 160, CipherSuite.TLS_DH_anon_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DH_anon_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, 172, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA384, CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA256, CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA384, CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256, 190, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256, CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256, 203, 202, 818, 817}, new int[]{BaselineTIFFTagSet.TAG_Y_RESOLUTION, BaselineTIFFTagSet.TAG_X_RESOLUTION, BaselineTIFFTagSet.TAG_SAMPLES_PER_PIXEL, 276, BaselineTIFFTagSet.TAG_MAKE, 270, BaselineTIFFTagSet.TAG_CELL_LENGTH, BaselineTIFFTagSet.TAG_CELL_WIDTH, BaselineTIFFTagSet.TAG_COMPRESSION, 258, 253, 252, 247, 246, 241, PsExtractor.VIDEO_STREAM_MASK, 235, 234, 229, 228, 223, 222, 217, 216, Primes.SMALL_FACTOR_LIMIT, 210, MlKitException.CODE_SCANNER_PIPELINE_INITIALIZATION_ERROR, MlKitException.CODE_SCANNER_TASK_IN_PROGRESS, 819, -3}, new int[]{BaselineTIFFTagSet.TAG_PAGE_NAME, BaselineTIFFTagSet.TAG_PLANAR_CONFIGURATION, BaselineTIFFTagSet.TAG_STRIP_BYTE_COUNTS, BaselineTIFFTagSet.TAG_ROWS_PER_STRIP, BaselineTIFFTagSet.TAG_STRIP_OFFSETS, BaselineTIFFTagSet.TAG_MODEL, 267, BaselineTIFFTagSet.TAG_FILL_ORDER, 261, 260, 255, 254, 249, 248, 243, 242, 237, 236, 231, 230, 225, 224, 219, 218, 213, 212, MlKitException.CODE_SCANNER_GOOGLE_PLAY_SERVICES_VERSION_TOO_OLD, MlKitException.CODE_SCANNER_PIPELINE_INFERENCE_ERROR, 821, 820}, new int[]{BaselineTIFFTagSet.TAG_Y_POSITION, BaselineTIFFTagSet.TAG_X_POSITION, BaselineTIFFTagSet.TAG_MAX_SAMPLE_VALUE, BaselineTIFFTagSet.TAG_MIN_SAMPLE_VALUE, 275, BaselineTIFFTagSet.TAG_ORIENTATION, BaselineTIFFTagSet.TAG_DOCUMENT_NAME, 268, BaselineTIFFTagSet.TAG_THRESHHOLDING, BaselineTIFFTagSet.TAG_PHOTOMETRIC_INTERPRETATION, 257, 256, 251, 250, 245, 244, 239, 238, 233, 232, 227, 226, 221, 220, 215, 214, 209, 208, 822, -3}, new int[]{BaselineTIFFTagSet.TAG_FREE_BYTE_COUNTS, BaselineTIFFTagSet.TAG_FREE_OFFSETS, 295, 294, 301, 300, 307, 306, 313, 312, BaselineTIFFTagSet.TAG_PRIMARY_CHROMATICITES, 318, BaselineTIFFTagSet.TAG_TILE_BYTE_COUNTS, BaselineTIFFTagSet.TAG_TILE_OFFSETS, 331, 330, BaselineTIFFTagSet.TAG_TARGET_PRINTER, BaselineTIFFTagSet.TAG_DOT_RANGE, 343, BaselineTIFFTagSet.TAG_TRANSFER_RANGE, 349, 348, 355, 354, 361, 360, 367, 366, 824, 823}, new int[]{BaselineTIFFTagSet.TAG_GRAY_RESPONSE_CURVE, BaselineTIFFTagSet.TAG_GRAY_RESPONSE_UNIT, BaselineTIFFTagSet.TAG_PAGE_NUMBER, BaselineTIFFTagSet.TAG_RESOLUTION_UNIT, 303, 302, 309, 308, 315, 314, BaselineTIFFTagSet.TAG_HALFTONE_HINTS, BaselineTIFFTagSet.TAG_COLOR_MAP, FaxTIFFTagSet.TAG_CLEAN_FAX_DATA, FaxTIFFTagSet.TAG_BAD_FAX_LINES, BaselineTIFFTagSet.TAG_INK_NAMES, BaselineTIFFTagSet.TAG_INK_SET, BaselineTIFFTagSet.TAG_SAMPLE_FORMAT, BaselineTIFFTagSet.TAG_EXTRA_SAMPLES, 345, 344, 351, 350, 357, 356, 363, 362, 369, 368, 825, -3}, new int[]{BaselineTIFFTagSet.TAG_T6_OPTIONS, BaselineTIFFTagSet.TAG_T4_OPTIONS, 299, 298, 305, 304, 311, 310, 317, 316, BaselineTIFFTagSet.TAG_TILE_LENGTH, BaselineTIFFTagSet.TAG_TILE_WIDTH, 329, FaxTIFFTagSet.TAG_CONSECUTIVE_BAD_LINES, 335, BaselineTIFFTagSet.TAG_NUMBER_OF_INKS, 341, BaselineTIFFTagSet.TAG_S_MIN_SAMPLE_VALUE, BaselineTIFFTagSet.TAG_JPEG_TABLES, 346, 353, 352, 359, 358, 365, 364, 371, 370, 827, 826}, new int[]{409, 408, TypedValues.CycleType.TYPE_ALPHA, TypedValues.CycleType.TYPE_VISIBILITY, 397, 396, 391, 390, 79, 78, -2, -2, 13, 12, 37, 36, 2, -1, 44, 43, 109, 108, 385, RendererCapabilities.DECODER_SUPPORT_MASK, 379, 378, 373, 372, 828, -3}, new int[]{411, 410, 405, 404, 399, 398, 393, 392, 81, 80, 40, -2, 15, 14, 39, 38, 3, -1, -1, 45, 111, 110, 387, 386, 381, 380, 375, 374, 830, 829}, new int[]{413, FacebookRequestErrorClassification.EC_APP_NOT_INSTALLED, 407, 406, TypedValues.CycleType.TYPE_CURVE_FIT, 400, 395, 394, 83, 82, 41, -3, -3, -3, -3, -3, 5, 4, 47, 46, 113, 112, 389, 388, 383, 382, 377, 376, 831, -3}, new int[]{415, 414, 421, TypedValues.CycleType.TYPE_EASING, 427, 426, 103, 102, 55, 54, 16, -3, -3, -3, -3, -3, -3, -3, 20, 19, 85, 84, 433, 432, 439, 438, 445, 444, 833, 832}, new int[]{417, TypedValues.CycleType.TYPE_PATH_ROTATE, TypedValues.CycleType.TYPE_WAVE_PERIOD, TypedValues.CycleType.TYPE_CUSTOM_WAVE_SHAPE, 429, 428, 105, 104, 57, 56, -3, -3, -3, -3, -3, -3, -3, -3, 22, 21, 87, 86, 435, 434, 441, 440, 447, 446, 834, -3}, new int[]{419, 418, TypedValues.CycleType.TYPE_WAVE_PHASE, TypedValues.CycleType.TYPE_WAVE_OFFSET, 431, 430, 107, 106, 59, 58, -3, -3, -3, -3, -3, -3, -3, -3, -3, 23, 89, 88, 437, 436, GrpcUtil.DEFAULT_PORT_SSL, 442, 449, 448, 836, 835}, new int[]{481, 480, 475, 474, 469, 468, 48, -2, 30, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 53, 52, 463, 462, 457, 456, 451, 450, 837, -3}, new int[]{483, 482, 477, 476, 471, 470, 49, -1, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -2, -1, 465, 464, 459, FacebookRequestErrorClassification.ESC_APP_NOT_INSTALLED, 453, 452, 839, 838}, new int[]{485, 484, 479, 478, 473, 472, 51, 50, 31, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 1, -2, 42, 467, 466, 461, 460, 455, 454, 840, -3}, new int[]{487, 486, 493, 492, 499, 498, 97, 96, 61, 60, -3, -3, -3, -3, -3, -3, -3, -3, -3, 26, 91, 90, TypedValues.PositionType.TYPE_SIZE_PERCENT, TypedValues.PositionType.TYPE_PERCENT_HEIGHT, 511, TypedValues.PositionType.TYPE_POSITION_TYPE, BaselineTIFFTagSet.TAG_JPEG_LOSSLESS_PREDICTORS, 516, 842, 841}, new int[]{489, 488, 495, 494, TypedValues.PositionType.TYPE_TRANSITION_EASING, 500, 99, 98, 63, 62, -3, -3, -3, -3, -3, -3, -3, -3, 28, 27, 93, 92, TypedValues.PositionType.TYPE_PERCENT_Y, TypedValues.PositionType.TYPE_PERCENT_X, 513, 512, BaselineTIFFTagSet.TAG_JPEG_Q_TABLES, BaselineTIFFTagSet.TAG_JPEG_POINT_TRANSFORMS, 843, -3}, new int[]{491, 490, 497, 496, TypedValues.PositionType.TYPE_PERCENT_WIDTH, TypedValues.PositionType.TYPE_DRAWPATH, 101, 100, 65, 64, 17, -3, -3, -3, -3, -3, -3, -3, 18, 29, 95, 94, 509, TypedValues.PositionType.TYPE_CURVE_FIT, BaselineTIFFTagSet.TAG_JPEG_RESTART_INTERVAL, BaselineTIFFTagSet.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH, BaselineTIFFTagSet.TAG_JPEG_AC_TABLES, BaselineTIFFTagSet.TAG_JPEG_DC_TABLES, 845, 844}, new int[]{559, 558, 553, 552, 547, 546, 541, 540, 73, 72, 32, -3, -3, -3, -3, -3, -3, 10, 67, 66, 115, 114, 535, 534, BaselineTIFFTagSet.TAG_Y_CB_CR_COEFFICIENTS, 528, 523, 522, 846, -3}, new int[]{561, 560, 555, 554, 549, 548, 543, 542, 75, 74, -2, -1, 7, 6, 35, 34, 11, -2, 69, 68, 117, 116, 537, 536, BaselineTIFFTagSet.TAG_Y_CB_CR_POSITIONING, BaselineTIFFTagSet.TAG_Y_CB_CR_SUBSAMPLING, 525, 524, 848, 847}, new int[]{563, 562, 557, 556, 551, 550, 545, 544, 77, 76, -2, 33, 9, 8, 25, 24, -1, -2, 71, 70, 119, 118, 539, 538, 533, BaselineTIFFTagSet.TAG_REFERENCE_BLACK_WHITE, 527, 526, 849, -3}, new int[]{565, 564, 571, 570, 577, 576, 583, 582, 589, 588, 595, 594, 601, 600, TypedValues.MotionType.TYPE_PATHMOTION_ARC, TypedValues.MotionType.TYPE_ANIMATE_CIRCLEANGLE_TO, 613, TypedValues.MotionType.TYPE_QUANTIZE_INTERPOLATOR_ID, 619, 618, 625, 624, 631, 630, 637, 636, 643, 642, 851, 850}, new int[]{567, 566, 573, 572, 579, 578, 585, 584, 591, 590, 597, 596, TypedValues.MotionType.TYPE_EASING, TypedValues.MotionType.TYPE_QUANTIZE_MOTION_PHASE, TypedValues.MotionType.TYPE_POLAR_RELATIVETO, TypedValues.MotionType.TYPE_DRAW_PATH, 615, 614, 621, 620, 627, 626, 633, 632, 639, 638, 645, 644, 852, -3}, new int[]{569, 568, 575, 574, 581, 580, 587, 586, 593, 592, HttpStatusCodeRange.DEFAULT_MAX, 598, TypedValues.MotionType.TYPE_ANIMATE_RELATIVE_TO, TypedValues.MotionType.TYPE_QUANTIZE_INTERPOLATOR, TypedValues.MotionType.TYPE_QUANTIZE_INTERPOLATOR_TYPE, TypedValues.MotionType.TYPE_QUANTIZE_MOTIONSTEPS, 617, 616, 623, 622, 629, 628, 635, 634, 641, 640, 647, 646, 854, 853}, new int[]{727, 726, 721, 720, 715, 714, 709, 708, 703, TypedValues.TransitionType.TYPE_TO, 697, 696, 691, 690, 685, 684, 679, 678, 673, 672, 667, 666, 661, 660, 655, 654, 649, 648, 855, -3}, new int[]{729, 728, 723, 722, 717, 716, 711, 710, TypedValues.TransitionType.TYPE_INTERPOLATOR, TypedValues.TransitionType.TYPE_AUTO_TRANSITION, 699, 698, 693, 692, 687, 686, 681, 680, 675, 674, 669, 668, 663, 662, 657, 656, 651, 650, 857, 856}, new int[]{731, 730, 725, 724, AdaptiveTrackSelection.DEFAULT_MAX_HEIGHT_TO_DISCARD, 718, 713, 712, TypedValues.TransitionType.TYPE_TRANSITION_FLAGS, TypedValues.TransitionType.TYPE_STAGGERED, TypedValues.TransitionType.TYPE_FROM, 700, 695, 694, 689, 688, 683, 682, 677, 676, 671, 670, 665, 664, 659, 658, 653, 652, 858, -3}, new int[]{733, 732, 739, 738, 745, 744, 751, 750, 757, 756, 763, 762, 769, ValidationPath.MAX_PATH_LENGTH_BYTES, 775, 774, 781, 780, 787, 786, 793, 792, 799, 798, 805, 804, 811, 810, 860, 859}, new int[]{735, 734, 741, 740, 747, 746, 753, 752, 759, 758, 765, 764, 771, 770, 777, 776, 783, 782, 789, 788, 795, 794, 801, 800, 807, 806, 813, 812, 861, -3}, new int[]{737, 736, 743, 742, 749, 748, 755, 754, 761, 760, 767, 766, 773, 772, 779, 778, 785, 784, 791, 790, 797, 796, 803, 802, 809, 808, 815, 814, 863, 862}};
    private final BitMatrix bitMatrix;

    /* JADX INFO: Access modifiers changed from: package-private */
    public BitMatrixParser(BitMatrix bitMatrix) {
        this.bitMatrix = bitMatrix;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public byte[] readCodewords() {
        byte[] bArr = new byte[CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA];
        int height = this.bitMatrix.getHeight();
        int width = this.bitMatrix.getWidth();
        for (int i = 0; i < height; i++) {
            int[] iArr = BITNR[i];
            for (int i2 = 0; i2 < width; i2++) {
                int i3 = iArr[i2];
                if (i3 >= 0 && this.bitMatrix.get(i2, i)) {
                    int i4 = i3 / 6;
                    bArr[i4] = (byte) (((byte) (1 << (5 - (i3 % 6)))) | bArr[i4]);
                }
            }
        }
        return bArr;
    }
}

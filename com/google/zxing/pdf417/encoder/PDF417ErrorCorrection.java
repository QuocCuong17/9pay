package com.google.zxing.pdf417.encoder;

import androidx.constraintlayout.core.motion.utils.TypedValues;
import androidx.media3.exoplayer.RendererCapabilities;
import androidx.media3.extractor.ts.PsExtractor;
import com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet;
import com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet;
import com.google.firebase.database.core.ValidationPath;
import com.google.mlkit.common.MlKitException;
import com.google.zxing.WriterException;
import com.google.zxing.pdf417.PDF417Common;
import io.sentry.HttpStatusCodeRange;
import org.bouncycastle.crypto.tls.CipherSuite;
import org.bouncycastle.math.Primes;

/* loaded from: classes4.dex */
final class PDF417ErrorCorrection {
    private static final int[][] EC_COEFFICIENTS = {new int[]{27, 917}, new int[]{522, 568, 723, 809}, new int[]{237, 308, 436, BaselineTIFFTagSet.TAG_PLANAR_CONFIGURATION, 646, 653, 428, 379}, new int[]{BaselineTIFFTagSet.TAG_ORIENTATION, 562, 232, 755, HttpStatusCodeRange.DEFAULT_MAX, 524, 801, CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA, 295, 116, 442, 428, 295, 42, CipherSuite.TLS_PSK_WITH_NULL_SHA256, 65}, new int[]{361, 575, 922, 525, CipherSuite.TLS_PSK_WITH_NULL_SHA256, 586, 640, BaselineTIFFTagSet.TAG_HALFTONE_HINTS, 536, 742, 677, 742, 687, BaselineTIFFTagSet.TAG_PLANAR_CONFIGURATION, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256, BaselineTIFFTagSet.TAG_JPEG_LOSSLESS_PREDICTORS, BaselineTIFFTagSet.TAG_STRIP_OFFSETS, 494, BaselineTIFFTagSet.TAG_THRESHHOLDING, CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA, 593, 800, 571, BaselineTIFFTagSet.TAG_COLOR_MAP, 803, 133, 231, 390, 685, 330, 63, 410}, new int[]{539, TypedValues.CycleType.TYPE_CUSTOM_WAVE_SHAPE, 6, 93, 862, 771, 453, 106, TypedValues.MotionType.TYPE_QUANTIZE_MOTIONSTEPS, BaselineTIFFTagSet.TAG_Y_POSITION, 107, TypedValues.PositionType.TYPE_SIZE_PERCENT, 733, 877, 381, TypedValues.MotionType.TYPE_QUANTIZE_INTERPOLATOR_ID, 723, 476, 462, 172, 430, TypedValues.MotionType.TYPE_POLAR_RELATIVETO, 858, 822, 543, 376, 511, 400, 672, 762, BaselineTIFFTagSet.TAG_Y_RESOLUTION, CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256, 440, 35, BaselineTIFFTagSet.TAG_JPEG_Q_TABLES, 31, 460, 594, 225, 535, BaselineTIFFTagSet.TAG_JPEG_LOSSLESS_PREDICTORS, 352, TypedValues.MotionType.TYPE_ANIMATE_RELATIVE_TO, 158, 651, 201, 488, TypedValues.PositionType.TYPE_DRAWPATH, 648, 733, 717, 83, 404, 97, BaselineTIFFTagSet.TAG_MIN_SAMPLE_VALUE, 771, 840, 629, 4, 381, 843, 623, BaselineTIFFTagSet.TAG_CELL_WIDTH, 543}, new int[]{BaselineTIFFTagSet.TAG_JPEG_AC_TABLES, 310, 864, 547, 858, 580, BaselineTIFFTagSet.TAG_RESOLUTION_UNIT, 379, 53, 779, 897, 444, 400, 925, 749, 415, 822, 93, 217, 208, PDF417Common.MAX_CODEWORDS_IN_BARCODE, 244, 583, 620, 246, CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA, 447, 631, BaselineTIFFTagSet.TAG_T4_OPTIONS, 908, 490, TypedValues.TransitionType.TYPE_AUTO_TRANSITION, 516, 258, 457, 907, 594, 723, 674, BaselineTIFFTagSet.TAG_T4_OPTIONS, BaselineTIFFTagSet.TAG_MODEL, 96, 684, 432, 686, TypedValues.MotionType.TYPE_ANIMATE_CIRCLEANGLE_TO, 860, 569, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256, 219, 129, CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256, 236, BaselineTIFFTagSet.TAG_Y_POSITION, 192, 775, BaselineTIFFTagSet.TAG_ROWS_PER_STRIP, CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, 40, 379, 712, 463, 646, 776, CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, 491, BaselineTIFFTagSet.TAG_PAGE_NUMBER, 763, CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256, 732, 95, 270, 447, 90, TypedValues.PositionType.TYPE_PERCENT_Y, 48, 228, 821, 808, 898, 784, 663, 627, 378, 382, BaselineTIFFTagSet.TAG_PHOTOMETRIC_INTERPRETATION, 380, TypedValues.MotionType.TYPE_QUANTIZE_MOTION_PHASE, 754, BaselineTIFFTagSet.TAG_DOT_RANGE, 89, 614, 87, 432, 670, 616, CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384, 374, 242, 726, 600, BaselineTIFFTagSet.TAG_DOCUMENT_NAME, 375, 898, 845, 454, 354, 130, 814, 587, 804, 34, Primes.SMALL_FACTOR_LIMIT, 330, 539, BaselineTIFFTagSet.TAG_PAGE_NUMBER, 827, 865, 37, BaselineTIFFTagSet.TAG_JPEG_LOSSLESS_PREDICTORS, 834, 315, 550, 86, 801, 4, 108, 539}, new int[]{524, 894, 75, 766, 882, 857, 74, MlKitException.CODE_SCANNER_TASK_IN_PROGRESS, 82, 586, 708, 250, TypedValues.Custom.TYPE_DIMENSION, 786, 138, 720, 858, CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256, 311, 913, 275, 190, 375, 850, 438, 733, CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256, BaselineTIFFTagSet.TAG_MIN_SAMPLE_VALUE, 201, BaselineTIFFTagSet.TAG_MIN_SAMPLE_VALUE, 828, 757, 710, 814, 919, 89, 68, 569, 11, MlKitException.CODE_SCANNER_TASK_IN_PROGRESS, 796, TypedValues.MotionType.TYPE_ANIMATE_RELATIVE_TO, 540, 913, 801, 700, 799, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA, 439, 418, 592, 668, 353, 859, 370, 694, BaselineTIFFTagSet.TAG_TILE_BYTE_COUNTS, PsExtractor.VIDEO_STREAM_MASK, 216, 257, BaselineTIFFTagSet.TAG_PLANAR_CONFIGURATION, 549, 209, 884, 315, 70, 329, 793, 490, BaselineTIFFTagSet.TAG_ORIENTATION, 877, CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, 749, 812, 684, 461, BaselineTIFFTagSet.TAG_NUMBER_OF_INKS, 376, 849, BaselineTIFFTagSet.TAG_JPEG_AC_TABLES, 307, BaselineTIFFTagSet.TAG_GRAY_RESPONSE_CURVE, 803, 712, 19, 358, 399, 908, 103, 511, 51, 8, BaselineTIFFTagSet.TAG_JPEG_LOSSLESS_PREDICTORS, 225, BaselineTIFFTagSet.TAG_FREE_BYTE_COUNTS, 470, 637, 731, 66, 255, 917, BaselineTIFFTagSet.TAG_DOCUMENT_NAME, 463, 830, 730, 433, 848, 585, 136, 538, TypedValues.Custom.TYPE_REFERENCE, 90, 2, BaselineTIFFTagSet.TAG_GRAY_RESPONSE_UNIT, 743, 199, 655, TypedValues.Custom.TYPE_STRING, 329, 49, 802, 580, 355, 588, 188, 462, 10, 134, 628, BaselineTIFFTagSet.TAG_COLOR_MAP, 479, 130, 739, 71, BaselineTIFFTagSet.TAG_THRESHHOLDING, 318, 374, 601, 192, TypedValues.MotionType.TYPE_ANIMATE_RELATIVE_TO, 142, 673, 687, 234, 722, RendererCapabilities.DECODER_SUPPORT_MASK, CipherSuite.TLS_PSK_WITH_NULL_SHA384, 752, TypedValues.MotionType.TYPE_PATHMOTION_ARC, 640, 455, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256, 689, TypedValues.TransitionType.TYPE_TRANSITION_FLAGS, 805, 641, 48, 60, 732, 621, 895, 544, 261, 852, 655, 309, 697, 755, 756, 60, 231, 773, 434, 421, 726, 528, TypedValues.PositionType.TYPE_PERCENT_WIDTH, 118, 49, 795, 32, CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA, 500, 238, 836, 394, BaselineTIFFTagSet.TAG_MIN_SAMPLE_VALUE, 566, BaselineTIFFTagSet.TAG_PRIMARY_CHROMATICITES, 9, 647, 550, 73, 914, BaselineTIFFTagSet.TAG_TRANSFER_RANGE, 126, 32, 681, 331, 792, 620, 60, TypedValues.MotionType.TYPE_POLAR_RELATIVETO, 441, 180, 791, 893, 754, TypedValues.MotionType.TYPE_ANIMATE_RELATIVE_TO, 383, 228, 749, 760, 213, 54, BaselineTIFFTagSet.TAG_PAGE_NUMBER, 134, 54, 834, 299, 922, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256, 910, BaselineTIFFTagSet.TAG_REFERENCE_BLACK_WHITE, TypedValues.MotionType.TYPE_POLAR_RELATIVETO, 829, 189, 20, CipherSuite.TLS_DH_anon_WITH_AES_256_GCM_SHA384, 29, 872, 449, 83, TypedValues.CycleType.TYPE_VISIBILITY, 41, 656, TypedValues.PositionType.TYPE_SIZE_PERCENT, 579, 481, CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, 404, 251, 688, 95, 497, 555, 642, 543, 307, CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, 924, 558, 648, 55, 497, 10}, new int[]{352, 77, 373, TypedValues.PositionType.TYPE_PERCENT_HEIGHT, 35, HttpStatusCodeRange.DEFAULT_MAX, 428, MlKitException.CODE_SCANNER_GOOGLE_PLAY_SERVICES_VERSION_TOO_OLD, 409, 574, 118, 498, BaselineTIFFTagSet.TAG_PAGE_NAME, 380, 350, 492, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256, BaselineTIFFTagSet.TAG_CELL_LENGTH, 920, CipherSuite.TLS_DH_anon_WITH_SEED_CBC_SHA, 914, 299, 229, 643, 294, 871, 306, 88, 87, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256, 352, 781, 846, 75, FaxTIFFTagSet.TAG_CLEAN_FAX_DATA, BaselineTIFFTagSet.TAG_JPEG_DC_TABLES, 435, 543, 203, 666, 249, 346, 781, 621, 640, 268, 794, 534, 539, 781, 408, 390, 644, 102, 476, 499, BaselineTIFFTagSet.TAG_GRAY_RESPONSE_UNIT, 632, 545, 37, 858, 916, 552, 41, 542, BaselineTIFFTagSet.TAG_FREE_BYTE_COUNTS, 122, BaselineTIFFTagSet.TAG_MODEL, 383, 800, 485, 98, 752, 472, 761, 107, 784, 860, 658, 741, BaselineTIFFTagSet.TAG_GRAY_RESPONSE_UNIT, MlKitException.CODE_SCANNER_TASK_IN_PROGRESS, 681, 407, 855, 85, 99, 62, 482, 180, 20, BaselineTIFFTagSet.TAG_PAGE_NUMBER, 451, 593, 913, 142, 808, 684, BaselineTIFFTagSet.TAG_Y_POSITION, 536, 561, 76, 653, 899, 729, 567, 744, 390, 513, 192, 516, 258, PsExtractor.VIDEO_STREAM_MASK, BaselineTIFFTagSet.TAG_JPEG_POINT_TRANSFORMS, 794, 395, ValidationPath.MAX_PATH_LENGTH_BYTES, 848, 51, TypedValues.MotionType.TYPE_QUANTIZE_MOTIONSTEPS, RendererCapabilities.DECODER_SUPPORT_MASK, 168, 190, 826, FaxTIFFTagSet.TAG_CONSECUTIVE_BAD_LINES, 596, 786, 303, 570, 381, 415, 641, CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256, 237, 151, 429, BaselineTIFFTagSet.TAG_Y_CB_CR_POSITIONING, MlKitException.CODE_SCANNER_GOOGLE_PLAY_SERVICES_VERSION_TOO_OLD, 676, 710, 89, 168, 304, TypedValues.CycleType.TYPE_VISIBILITY, 40, 708, 575, CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, 864, 229, 65, 861, 841, 512, CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256, 477, 221, 92, 358, 785, BaselineTIFFTagSet.TAG_FREE_OFFSETS, 357, 850, 836, 827, 736, TypedValues.TransitionType.TYPE_TRANSITION_FLAGS, 94, 8, 494, 114, BaselineTIFFTagSet.TAG_JPEG_AC_TABLES, 2, 499, 851, 543, CipherSuite.TLS_DH_RSA_WITH_SEED_CBC_SHA, 729, 771, 95, 248, 361, 578, BaselineTIFFTagSet.TAG_TILE_LENGTH, 856, 797, BaselineTIFFTagSet.TAG_FREE_BYTE_COUNTS, 51, 684, 466, 533, 820, 669, 45, TypedValues.Custom.TYPE_COLOR, 452, CipherSuite.TLS_DH_anon_WITH_AES_256_GCM_SHA384, BaselineTIFFTagSet.TAG_TRANSFER_RANGE, 244, CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, 35, 463, 651, 51, 699, 591, 452, 578, 37, 124, 298, BaselineTIFFTagSet.TAG_INK_SET, 552, 43, 427, 119, 662, 777, 475, 850, 764, 364, 578, 911, BaselineTIFFTagSet.TAG_Y_RESOLUTION, 711, 472, TypedValues.CycleType.TYPE_EASING, 245, BaselineTIFFTagSet.TAG_FREE_OFFSETS, 594, 394, 511, FaxTIFFTagSet.TAG_CLEAN_FAX_DATA, 589, 777, 699, 688, 43, 408, 842, 383, 721, BaselineTIFFTagSet.TAG_JPEG_AC_TABLES, 560, 644, 714, 559, 62, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA, 873, 663, 713, CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, 672, 729, 624, 59, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256, 417, 158, 209, 563, 564, 343, 693, 109, TypedValues.MotionType.TYPE_DRAW_PATH, 563, 365, CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA384, 772, 677, 310, 248, 353, 708, 410, 579, 870, 617, 841, 632, 860, BaselineTIFFTagSet.TAG_FREE_BYTE_COUNTS, 536, 35, 777, 618, 586, TypedValues.CycleType.TYPE_WAVE_OFFSET, 833, 77, 597, 346, BaselineTIFFTagSet.TAG_DOCUMENT_NAME, 757, 632, 695, 751, 331, 247, CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256, 45, 787, 680, 18, 66, 407, 369, 54, 492, 228, 613, 830, 922, 437, BaselineTIFFTagSet.TAG_JPEG_Q_TABLES, 644, TypedValues.Custom.TYPE_DIMENSION, 789, TypedValues.CycleType.TYPE_EASING, 305, 441, MlKitException.CODE_SCANNER_GOOGLE_PLAY_SERVICES_VERSION_TOO_OLD, 300, 892, 827, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA, 537, 381, 662, 513, 56, 252, 341, 242, 797, 838, 837, 720, 224, 307, 631, 61, 87, 560, 310, 756, 665, 397, 808, 851, 309, 473, 795, 378, 31, 647, 915, 459, 806, 590, 731, TypedValues.CycleType.TYPE_WAVE_PHASE, 216, 548, 249, BaselineTIFFTagSet.TAG_HALFTONE_HINTS, 881, 699, 535, 673, 782, 210, 815, TypedValues.Custom.TYPE_DIMENSION, 303, 843, 922, BaselineTIFFTagSet.TAG_MAX_SAMPLE_VALUE, 73, 469, 791, 660, CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, 498, 308, CipherSuite.TLS_DH_anon_WITH_SEED_CBC_SHA, TypedValues.CycleType.TYPE_CUSTOM_WAVE_SHAPE, 907, 817, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256, 62, 16, TypedValues.CycleType.TYPE_WAVE_PHASE, 535, BaselineTIFFTagSet.TAG_DOT_RANGE, BaselineTIFFTagSet.TAG_X_POSITION, 437, 375, BaselineTIFFTagSet.TAG_STRIP_OFFSETS, TypedValues.MotionType.TYPE_QUANTIZE_MOTIONSTEPS, BaselineTIFFTagSet.TAG_RESOLUTION_UNIT, CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA384, 923, 116, 667, 751, 353, 62, 366, 691, 379, 687, 842, 37, 357, 720, 742, 330, 5, 39, 923, 311, TypedValues.CycleType.TYPE_WAVE_OFFSET, 242, 749, BaselineTIFFTagSet.TAG_HALFTONE_HINTS, 54, 669, 316, BaselineTIFFTagSet.TAG_TRANSFER_RANGE, 299, 534, 105, 667, 488, 640, 672, 576, 540, 316, 486, 721, TypedValues.MotionType.TYPE_QUANTIZE_MOTIONSTEPS, 46, 656, 447, CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, 616, 464, 190, BaselineTIFFTagSet.TAG_Y_CB_CR_POSITIONING, BaselineTIFFTagSet.TAG_PAGE_NUMBER, BaselineTIFFTagSet.TAG_HALFTONE_HINTS, 762, 752, 533, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA384, 134, 14, 381, 433, 717, 45, 111, 20, 596, BaselineTIFFTagSet.TAG_PLANAR_CONFIGURATION, 736, 138, 646, 411, 877, 669, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA, 919, 45, 780, 407, CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256, BaselineTIFFTagSet.TAG_INK_SET, 899, CipherSuite.TLS_DH_DSS_WITH_AES_256_GCM_SHA384, 726, 600, BaselineTIFFTagSet.TAG_TILE_BYTE_COUNTS, 498, 655, 357, 752, ValidationPath.MAX_PATH_LENGTH_BYTES, 223, 849, 647, 63, 310, 863, 251, 366, 304, BaselineTIFFTagSet.TAG_X_RESOLUTION, 738, 675, 410, 389, 244, 31, 121, 303, BaselineTIFFTagSet.TAG_THRESHHOLDING}};

    private PDF417ErrorCorrection() {
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static int getErrorCorrectionCodewordCount(int i) {
        if (i < 0 || i > 8) {
            throw new IllegalArgumentException("Error correction level must be between 0 and 8!");
        }
        return 1 << (i + 1);
    }

    static int getRecommendedMinimumErrorCorrectionLevel(int i) throws WriterException {
        if (i <= 0) {
            throw new IllegalArgumentException("n must be > 0");
        }
        if (i <= 40) {
            return 2;
        }
        if (i <= 160) {
            return 3;
        }
        if (i <= 320) {
            return 4;
        }
        if (i <= 863) {
            return 5;
        }
        throw new WriterException("No recommendation possible");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String generateErrorCorrection(CharSequence charSequence, int i) {
        int errorCorrectionCodewordCount = getErrorCorrectionCodewordCount(i);
        char[] cArr = new char[errorCorrectionCodewordCount];
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            int i3 = errorCorrectionCodewordCount - 1;
            int charAt = (charSequence.charAt(i2) + cArr[i3]) % PDF417Common.NUMBER_OF_CODEWORDS;
            while (i3 >= 1) {
                cArr[i3] = (char) ((cArr[i3 - 1] + (929 - ((EC_COEFFICIENTS[i][i3] * charAt) % PDF417Common.NUMBER_OF_CODEWORDS))) % PDF417Common.NUMBER_OF_CODEWORDS);
                i3--;
            }
            cArr[0] = (char) ((929 - ((charAt * EC_COEFFICIENTS[i][0]) % PDF417Common.NUMBER_OF_CODEWORDS)) % PDF417Common.NUMBER_OF_CODEWORDS);
        }
        StringBuilder sb = new StringBuilder(errorCorrectionCodewordCount);
        for (int i4 = errorCorrectionCodewordCount - 1; i4 >= 0; i4--) {
            if (cArr[i4] != 0) {
                cArr[i4] = (char) (929 - cArr[i4]);
            }
            sb.append(cArr[i4]);
        }
        return sb.toString();
    }
}
